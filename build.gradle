plugins {
    id 'java'
    id 'maven-publish'
    id 'eclipse'
}

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}


repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

configurations {
    // for putting Error Prone javac in bootclasspath for running tests
    errorproneJavac
}

ext.versions = [
        checkerFramework: "3.42.0-eisop3",
]


sourceCompatibility = 11
def checkerframework_local = true  // Set this variable to [true] while using local version of checker framework.

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    if (checkerframework_local) {
        implementation files('checker-framework/dist/checker-3.42.0-eisop3-SNAPSHOT.jar')
        implementation files('checker-framework/dist/checker-qual-3.42.0-eisop3-SNAPSHOT.jar')
        implementation files('checker-framework/dist/dataflow-3.42.0-eisop3-SNAPSHOT.jar')
        implementation files('checker-framework/dist/framework-3.42.0-eisop3-SNAPSHOT.jar')
        
    }
    else {
        implementation "org.checkerframework:checker:${versions.checkerFramework}"
    }

  	implementation "com.google.guava:guava:30.1-jre"
  	implementation "org.apache.commons:commons-lang3:3.11"
  	implementation "org.apache.commons:commons-io:1.3.2"
    implementation 'org.plumelib:plume-util:1.8.1'
    compileOnly "com.google.errorprone:javac:9+181-r4173-1"

    // Testing
    testImplementation 'junit:junit:4.13'
    if (checkerframework_local) {
        implementation files('checker-framework/dist/checker-3.42.0-eisop3-SNAPSHOT.jar')
        implementation files('checker-framework/dist/framework-test-3.42.0-eisop3-SNAPSHOT.jar')
    } else {
        testImplementation "org.checkerframework:framework-test:${versions.checkerFramework}"
    }

    errorproneJavac "com.google.errorprone:javac:9+181-r4173-1"
}

tasks.withType(JavaCompile).all {
    options.compilerArgs.add("-Xlint:all")
}

// Add `mavenLocal()` in `repositories`, then run `./gradlew publishToMavenLocal`
// to publish your checker to your local Maven repository.
publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'edu.kit.kastel'
            artifactId = 'property-checker'
            version = '2.0.0'

            from components.java
        }
    }
}

jar {
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    
    manifest {
        attributes("Main-Class": "org.checkerframework.framework.util.CheckerMain")
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    destinationDirectory = file("$rootDir")
 }

test {
    maxHeapSize = "4096m"
    //jvmArgs "-XX:MaxPermSize=256m"
    
    inputs.files("tests/property")

    systemProperty 'translationOnly', System.getProperty('translationOnly')
    
    if (!JavaVersion.current().java9Compatible) {
        jvmArgs "-Xbootclasspath/p:${configurations.errorproneJavac.asPath}"
    }
    jvmArgs += [
            // These are required in Java 16+ because the --illegal-access option is set to deny
            // by default.  None of these packages are accessed via reflection, so the module
            // only needs to be exported, but not opened.
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED',
            '--add-exports',
            'jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED',
            // Required because the Checker Framework reflectively accesses private members in com.sun.tools.javac.comp.
            '--add-opens',
            'jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED',
    ]
    testLogging.showStandardStreams = true
}

clean.doFirst {
    delete "${rootDir}/tests/build/"
    delete "${rootDir}/../property-checker-out/"
    delete "${rootDir}/../flowdot/"
}

task printClasspath {
    description 'Prints the runtime classpath of the checker. When using the checker to typecheck' +
            'another project, you should put the result of running this task on either the processor' +
            'path or the classpath of the target project.'
    doLast {
        println sourceSets.main.runtimeClasspath.asPath
    }
}
