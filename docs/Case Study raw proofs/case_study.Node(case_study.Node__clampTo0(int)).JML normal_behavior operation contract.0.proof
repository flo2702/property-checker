\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:off",
        "Strings" : "Strings:on",
        "assertions" : "assertions:on",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:treatAsAxiom",
        "moreSeqRules" : "moreSeqRules:on",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:allow",
        "sequences" : "sequences:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : false
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 100000,
        "Timeout" : -1,
        "options" : { 
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_FREE",
            "DEP_OPTIONS_KEY" : "DEP_ON",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_INVARIANT",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_DEF_OPS",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_OFF",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_DEFAULT",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\javaSource "../../../property-checker-out/case_study";

\proofObligation "#Proof Obligation Settings
#Mon Mar 18 03:05:12 CET 2024
contract=case_study.Node[case_study.Node\\:\\:clampTo0(int)].JML normal_behavior operation contract.0
name=case_study.Node[case_study.Node\\:\\:clampTo0(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "florian" ) (keyVersion "27183cea39cd71d8280021bab8de03c8490dcfd2"))

(autoModeTime "1225")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "3") (term "0,0,1,0,1"))
(rule "assignment" (formula "3") (term "1"))
 (builtin "One Step Simplification" (formula "3"))
(rule "methodBodyExpand" (formula "3") (term "1") (newnames "heapBefore_clampTo0,savedHeapBefore_clampTo0"))
 (builtin "One Step Simplification" (formula "3"))
(rule "returnUnfold" (formula "3") (term "1") (inst "#v0=i_1"))
(rule "variableDeclarationAssign" (formula "3") (term "1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "i_1"))
(rule "condition_not_simple" (formula "3") (term "1") (inst "#v0=b"))
(rule "variableDeclarationAssign" (formula "3") (term "1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "b"))
(rule "greater_equal_than_comparison_simple" (formula "3") (term "1"))
 (builtin "One Step Simplification" (formula "3"))
(rule "condition_simple" (formula "3") (term "1"))
 (builtin "One Step Simplification" (formula "3"))
(rule "methodCallReturn" (formula "3") (term "1"))
(rule "assignment" (formula "3") (term "1"))
 (builtin "One Step Simplification" (formula "3"))
(rule "methodCallEmpty" (formula "3") (term "1"))
(rule "tryEmpty" (formula "3") (term "1"))
(rule "emptyModality" (formula "3") (term "1"))
 (builtin "One Step Simplification" (formula "3"))
(rule "eqSymm" (formula "3") (term "1,1,0,1"))
(rule "inEqSimp_notGeq" (formula "3") (term "0,1,1,1"))
(rule "times_zero_1" (formula "3") (term "1,0,0,0,1,1,1"))
(rule "add_zero_right" (formula "3") (term "0,0,0,1,1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,1,1,1"))
(rule "mul_literals" (formula "3") (term "1,0,1,1,1"))
(rule "inEqSimp_or_subsumption6" (formula "3") (term "1,0,1"))
(rule "greater_literals" (formula "3") (term "0,1,1,0,1"))
 (builtin "One Step Simplification" (formula "3"))
(rule "inEqSimp_or_weaken0" (formula "3") (term "1,1"))
(rule "add_literals" (formula "3") (term "1,0,1,1"))
 (builtin "One Step Simplification" (formula "3"))
(rule "inEqSimp_geqRight" (formula "3"))
(rule "times_zero_1" (formula "1") (term "1,0,0"))
(rule "add_zero_right" (formula "1") (term "0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1"))
(rule "mul_literals" (formula "1") (term "1"))
(rule "ifthenelse_split" (formula "1") (term "0"))
(branch "i ≥ 0 TRUE"
   (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
   (rule "qeq_literals" (formula "2") (term "0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "closeFalse" (formula "2"))
)
(branch "i ≥ 0 FALSE"
   (rule "leq_literals" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
)
}
