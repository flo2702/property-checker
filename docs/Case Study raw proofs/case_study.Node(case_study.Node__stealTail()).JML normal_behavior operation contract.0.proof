\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:off",
        "Strings" : "Strings:on",
        "assertions" : "assertions:on",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:treatAsAxiom",
        "moreSeqRules" : "moreSeqRules:on",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:allow",
        "sequences" : "sequences:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : false
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 100000,
        "Timeout" : -1,
        "options" : { 
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_FREE",
            "DEP_OPTIONS_KEY" : "DEP_ON",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_INVARIANT",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_DEF_OPS",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_OFF",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_DEFAULT",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\javaSource "../../../property-checker-out/case_study";

\proofObligation "#Proof Obligation Settings
#Mon Mar 18 03:02:40 CET 2024
contract=case_study.Node[case_study.Node\\:\\:stealTail()].JML normal_behavior operation contract.0
name=case_study.Node[case_study.Node\\:\\:stealTail()].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "florian" ) (keyVersion "27183cea39cd71d8280021bab8de03c8490dcfd2"))

(autoModeTime "15044")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "9") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "9") (term "0,0,0,0,1"))
(rule "polySimp_homoEq" (formula "9") (term "1,1,0,1,0,0,0,1"))
(rule "polySimp_addComm0" (formula "9") (term "0,0,1,1,0,1,0,0,0,1"))
(rule "polySimp_addComm1" (formula "9") (term "0,1,1,0,1,0,0,0,1"))
(rule "elementOfSingleton" (formula "9") (term "0,0,0,0,1,0,1"))
(rule "assignment" (formula "9") (term "1"))
 (builtin "One Step Simplification" (formula "9"))
(rule "polySimp_sepPosMonomial" (formula "9") (term "1,1,0,1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,1,0,1,0,0,0,1"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,1,0,1,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,1,0,1,0,0,0,1"))
(rule "mul_literals" (formula "9") (term "0,1,1,1,0,1,0,0,0,1"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,1,0,1,0,0,0,1"))
(rule "Free_class_invariant_axiom_for_case_study_Node" (formula "7") (ifseqformula "8"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "polySimp_homoEq" (formula "14") (term "1,1,1"))
(rule "polySimp_addComm0" (formula "14") (term "0,0,1,1,1"))
(rule "polySimp_addComm1" (formula "14") (term "0,1,1,1"))
(rule "sortsDisjointModuloNull" (formula "11") (term "0,1"))
(rule "inEqSimp_gtToGeq" (formula "13") (term "1"))
(rule "times_zero_1" (formula "13") (term "1,0,0,1"))
(rule "add_zero_right" (formula "13") (term "0,0,1"))
(rule "applyEq" (formula "9") (term "0,0") (ifseqformula "6"))
(rule "ssubsortDirect" (formula "9") (term "0"))
 (builtin "One Step Simplification" (formula "9"))
(rule "applyEq" (formula "13") (term "0,0") (ifseqformula "6"))
(rule "ssubsortDirect" (formula "13") (term "0"))
 (builtin "One Step Simplification" (formula "13"))
(rule "applyEq" (formula "14") (term "0,0") (ifseqformula "6"))
(rule "ssubsortDirect" (formula "14") (term "0"))
 (builtin "One Step Simplification" (formula "14"))
(rule "applyEq" (formula "12") (term "0,0") (ifseqformula "6"))
(rule "ssubsortDirect" (formula "12") (term "0"))
 (builtin "One Step Simplification" (formula "12"))
(rule "notLeft" (formula "12"))
(rule "replace_known_right" (formula "11") (term "1,0,1") (ifseqformula "14"))
 (builtin "One Step Simplification" (formula "11"))
(rule "true_left" (formula "11"))
(rule "applyEq" (formula "7") (term "0,0") (ifseqformula "6"))
(rule "ssubsortDirect" (formula "7") (term "0"))
 (builtin "One Step Simplification" (formula "7"))
(rule "polySimp_sepPosMonomial" (formula "12") (term "1,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,1,1"))
(rule "polySimp_rightDist" (formula "12") (term "1,1,1"))
(rule "mul_literals" (formula "12") (term "0,1,1,1"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,1,1"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,1,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "11"))
(rule "mul_literals" (formula "11") (term "1"))
(rule "Class_invariant_axiom_for_case_study_Node" (formula "5") (ifseqformula "14"))
(rule "true_left" (formula "5"))
(rule "Free_class_invariant_axiom_for_case_study_Order" (formula "7") (ifseqformula "12"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "inEqSimp_commuteGeq" (formula "13") (term "1,1,1"))
(rule "applyEq" (formula "9") (term "0,0") (ifseqformula "6"))
(rule "ssubsortDirect" (formula "9") (term "0"))
 (builtin "One Step Simplification" (formula "9"))
(rule "applyEq" (formula "7") (term "0,0") (ifseqformula "6"))
(rule "ssubsortDirect" (formula "7") (term "0"))
 (builtin "One Step Simplification" (formula "7"))
(rule "applyEq" (formula "11") (term "0,0") (ifseqformula "6"))
(rule "ssubsortDirect" (formula "11") (term "0"))
 (builtin "One Step Simplification" (formula "11"))
(rule "notLeft" (formula "11"))
(rule "replace_known_right" (formula "12") (term "0,0,1,1") (ifseqformula "18"))
 (builtin "One Step Simplification" (formula "12"))
(rule "applyEq" (formula "11") (term "0,0") (ifseqformula "6"))
(rule "ssubsortDirect" (formula "11") (term "0"))
 (builtin "One Step Simplification" (formula "11"))
(rule "notLeft" (formula "11"))
(rule "replace_known_right" (formula "12") (term "0,0,1,1") (ifseqformula "17"))
 (builtin "One Step Simplification" (formula "12"))
(rule "applyEq" (formula "12") (term "0,0") (ifseqformula "6"))
(rule "ssubsortDirect" (formula "12") (term "0"))
 (builtin "One Step Simplification" (formula "12"))
(rule "andLeft" (formula "12"))
(rule "replace_known_left" (formula "11") (term "0,1") (ifseqformula "12"))
 (builtin "One Step Simplification" (formula "11"))
(rule "applyEq" (formula "11") (term "0,0") (ifseqformula "6"))
(rule "ssubsortDirect" (formula "11") (term "0"))
 (builtin "One Step Simplification" (formula "11"))
(rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "11"))
(rule "times_zero_1" (formula "12") (term "0,0"))
(rule "add_zero_left" (formula "12") (term "0"))
(rule "Free_class_invariant_axiom_for_case_study_Customer" (formula "8") (ifseqformula "20"))
(rule "leq_literals" (formula "8") (term "1,0,1,1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "qeq_literals" (formula "8") (term "0,1,1"))
 (builtin "One Step Simplification" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "8"))
(rule "applyEq" (formula "11") (term "0,0") (ifseqformula "7"))
(rule "ssubsortDirect" (formula "11") (term "0"))
 (builtin "One Step Simplification" (formula "11"))
(rule "andLeft" (formula "11"))
(rule "applyEq" (formula "8") (term "0,0") (ifseqformula "7"))
(rule "ssubsortDirect" (formula "8") (term "0"))
 (builtin "One Step Simplification" (formula "8"))
(rule "applyEq" (formula "10") (term "0,0") (ifseqformula "7"))
(rule "ssubsortDirect" (formula "10") (term "0"))
 (builtin "One Step Simplification" (formula "10"))
(rule "notLeft" (formula "10"))
(rule "inEqSimp_subsumption1" (formula "15") (ifseqformula "10"))
(rule "leq_literals" (formula "15") (term "0"))
 (builtin "One Step Simplification" (formula "15"))
(rule "true_left" (formula "15"))
(rule "Free_class_invariant_axiom_for_case_study_Product" (formula "13") (ifseqformula "22"))
(rule "leq_literals" (formula "13") (term "1,0,1,1"))
 (builtin "One Step Simplification" (formula "13"))
(rule "qeq_literals" (formula "13") (term "0,0,1,1,0"))
 (builtin "One Step Simplification" (formula "13"))
(rule "leq_literals" (formula "13") (term "0,1,1,0"))
 (builtin "One Step Simplification" (formula "13"))
(rule "qeq_literals" (formula "13") (term "0,1,1"))
 (builtin "One Step Simplification" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "applyEq" (formula "17") (term "0,0") (ifseqformula "12"))
(rule "ssubsortDirect" (formula "17") (term "0"))
 (builtin "One Step Simplification" (formula "17"))
(rule "andLeft" (formula "17"))
(rule "applyEq" (formula "16") (term "0,0") (ifseqformula "12"))
(rule "ssubsortDirect" (formula "16") (term "0"))
 (builtin "One Step Simplification" (formula "16"))
(rule "andLeft" (formula "16"))
(rule "applyEq" (formula "15") (term "0,0") (ifseqformula "12"))
(rule "ssubsortDirect" (formula "15") (term "0"))
 (builtin "One Step Simplification" (formula "15"))
(rule "notLeft" (formula "15"))
(rule "applyEq" (formula "13") (term "0,0") (ifseqformula "12"))
(rule "ssubsortDirect" (formula "13") (term "0"))
 (builtin "One Step Simplification" (formula "13"))
(rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "21"))
(rule "times_zero_1" (formula "17") (term "0,0"))
(rule "add_zero_left" (formula "17") (term "0"))
(rule "cnf_rightDist" (formula "25") (term "0"))
(rule "commute_and_2" (formula "25") (term "1"))
(rule "Free_class_invariant_axiom_for_java_lang_String" (formula "9") (ifseqformula "27"))
(rule "true_left" (formula "9"))
(rule "Free_class_invariant_axiom_for_java_lang_String" (formula "13") (ifseqformula "25"))
(rule "true_left" (formula "13"))
(rule "methodBodyExpand" (formula "30") (term "1") (newnames "heapBefore_stealTail,savedHeapBefore_stealTail"))
 (builtin "One Step Simplification" (formula "30"))
(rule "commute_or" (formula "23") (term "1,0"))
(rule "cnf_rightDist" (formula "23"))
(rule "andLeft" (formula "23"))
(rule "cnf_rightDist" (formula "24"))
(rule "andLeft" (formula "24"))
(rule "commute_or" (formula "24"))
(rule "cnf_rightDist" (formula "23"))
(rule "andLeft" (formula "23"))
(rule "commute_or" (formula "23"))
(rule "cnf_rightDist" (formula "24"))
(rule "andLeft" (formula "24"))
(rule "commute_or" (formula "24"))
(rule "cnf_rightDist" (formula "23"))
(rule "andLeft" (formula "23"))
(rule "commute_or_2" (formula "24"))
(rule "shift_paren_or" (formula "23"))
(rule "commute_or" (formula "23") (term "0"))
 (builtin "One Step Simplification" (formula "23"))
(rule "true_left" (formula "23"))
 (builtin "Use Operation Contract" (formula "34") (newnames "heapBefore_havocPacked,exc_0,heapAfter_havocPacked,anon_heap_havocPacked") (contract "case_study.Node[java.lang.Object::havocPacked()].JML normal_behavior operation contract.0") (modality "diamond"))
(branch "Post (havocPacked)"
    (builtin "One Step Simplification" (formula "29"))
    (builtin "One Step Simplification" (formula "36"))
   (rule "andLeft" (formula "29"))
    (builtin "JML assume" (formula "37"))
    (builtin "One Step Simplification" (formula "37"))
   (rule "impRight" (formula "37"))
   (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=java_lang_Object_packed_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")) (ifInst ""  (formula "4")))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "applyEqReverse" (formula "2") (term "0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "returnUnfold" (formula "38") (term "1") (inst "#v0=n"))
   (rule "variableDeclarationAssign" (formula "38") (term "1"))
   (rule "variableDeclaration" (formula "38") (term "1") (newnames "n"))
   (rule "assignment_read_attribute_this" (formula "38") (term "1"))
    (builtin "One Step Simplification" (formula "38"))
   (rule "pullOutSelect" (formula "38") (term "0,1,0") (inst "selectSK=case_study_Node_tail_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "38")) (ifInst ""  (formula "4")))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "applyEqReverse" (formula "39") (term "0,1,0") (ifseqformula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "methodCallReturn" (formula "38") (term "1"))
   (rule "assignment" (formula "38") (term "1"))
    (builtin "One Step Simplification" (formula "38"))
   (rule "methodCallEmpty" (formula "38") (term "1"))
   (rule "tryEmpty" (formula "38") (term "1"))
   (rule "emptyModality" (formula "38") (term "1"))
    (builtin "One Step Simplification" (formula "38") (ifInst ""  (formula "37")))
   (rule "replaceKnownSelect_taclet0_2" (formula "38") (term "0,0,0"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "38") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "38"))
   (rule "eqSymm" (formula "38") (term "1,0,0,1"))
   (rule "pullOutSelect" (formula "38") (term "1,1,1,1,0,1,0,0") (inst "selectSK=case_study_Node_head_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "31"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "pullOutSelect" (formula "39") (term "0,1,1,0,0") (inst "selectSK=case_study_Node_size_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "32"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_homoEq" (formula "40") (term "1,1,0,0"))
   (rule "polySimp_addComm1" (formula "40") (term "0,1,1,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_sepPosMonomial" (formula "40") (term "1,1,0,0"))
   (rule "polySimp_mulComm0" (formula "40") (term "1,1,1,0,0"))
   (rule "polySimp_rightDist" (formula "40") (term "1,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1,1,0,0"))
   (rule "mul_literals" (formula "40") (term "0,1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "40") (term "1,1,1,1,0,0"))
   (rule "pullOutSelect" (formula "40") (term "0,1,1,0,0,0") (inst "selectSK=case_study_Node_size_1"))
   (rule "applyEq" (formula "41") (term "0,1,1,0,0") (ifseqformula "1"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "33"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "pullOutSelect" (formula "41") (term "1,1,0,1,0,1,0,0") (inst "selectSK=case_study_Node_head_1"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "34"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "pullOutSelect" (formula "42") (term "0,0,1,0,0,0") (inst "selectSK=case_study_Node_tail_1"))
   (rule "applyEq" (formula "4") (term "0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "43") (term "0,0,0,0,1,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "2") (term "0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
   (rule "applyEq" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "4") (term "1,1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "4") (term "1,2,0") (ifseqformula "1"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "pullOutSelect" (formula "43") (term "1,1,1,0,1,0,0") (inst "selectSK=case_study_Order_product_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "pullOutSelect" (formula "44") (term "0,1,0,1,0,0") (inst "selectSK=case_study_Product_price_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "37"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_commuteGeq" (formula "45") (term "1,0,1,0,0"))
   (rule "pullOutSelect" (formula "1") (term "1,0,0,1,0,0") (inst "selectSK=case_study_Order_product_1"))
   (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "2") (term "1,2,0") (ifseqformula "1"))
   (rule "applyEq" (formula "2") (term "0,0,0,0,0") (ifseqformula "1"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "38"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "pullOutSelect" (formula "46") (term "0,1,0,1,0,0") (inst "selectSK=case_study_Product_price_1"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "39"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "Class_invariant_axiom_for_case_study_Node" (formula "47") (term "1,0") (ifseqformula "46"))
    (builtin "One Step Simplification" (formula "47"))
   (rule "commute_and_2" (formula "47") (term "1,0"))
   (rule "cnf_rightDist" (formula "47") (term "0,0"))
   (rule "commute_or" (formula "47") (term "1,0,0"))
   (rule "commute_or" (formula "47") (term "0,0,0"))
   (rule "cnf_rightDist" (formula "47") (term "0"))
   (rule "cnf_rightDist" (formula "47") (term "1,0"))
   (rule "commute_or" (formula "47") (term "0,1,0"))
   (rule "cnf_rightDist" (formula "47") (term "0,0"))
   (rule "commute_or" (formula "47") (term "0,0,0"))
   (rule "cnf_rightDist" (formula "47") (term "1,0,0"))
   (rule "commute_or" (formula "47") (term "0,1,0,0"))
   (rule "cnf_rightDist" (formula "47") (term "0,0,0"))
   (rule "commute_or_2" (formula "47") (term "1,0,0,0"))
   (rule "shift_paren_or" (formula "47") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "47"))
   (rule "commute_or" (formula "47") (term "0,0,0,0"))
   (rule "shift_paren_and" (formula "47") (term "0,0"))
   (rule "shift_paren_and" (formula "47") (term "0"))
   (rule "cut_direct" (formula "35") (term "0,0"))
   (branch "CUT: self.tail = null TRUE"
       (builtin "One Step Simplification" (formula "36"))
      (rule "true_left" (formula "36"))
      (rule "replace_known_left" (formula "7") (term "0,0,0,0") (ifseqformula "35"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "applyEqReverse" (formula "47") (term "0,1,0,0,0,0,0") (ifseqformula "7"))
      (rule "applyEqReverse" (formula "47") (term "0,1,0,1,0,0,0") (ifseqformula "7"))
      (rule "applyEqReverse" (formula "47") (term "0,1,0,1,0") (ifseqformula "7"))
      (rule "applyEqReverse" (formula "47") (term "0,1,1,0,0,0,0") (ifseqformula "7"))
      (rule "applyEqReverse" (formula "47") (term "0,1,1,0,0,0") (ifseqformula "7"))
      (rule "hideAuxiliaryEq" (formula "7"))
      (rule "replace_known_left" (formula "5") (term "0,0,0,0") (ifseqformula "34"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "applyEqReverse" (formula "6") (term "0,0,0,0,0") (ifseqformula "5"))
      (rule "applyEqReverse" (formula "6") (term "1,0,0,1,0,0") (ifseqformula "5"))
      (rule "applyEqReverse" (formula "7") (term "1,2,0") (ifseqformula "5"))
      (rule "applyEqReverse" (formula "7") (term "1,0,0,1,0,0") (ifseqformula "5"))
      (rule "applyEqReverse" (formula "6") (term "1,1,0") (ifseqformula "5"))
      (rule "applyEqReverse" (formula "7") (term "0,0,0,0,0") (ifseqformula "5"))
      (rule "applyEqReverse" (formula "46") (term "0,0,0,1,0,0,0,0") (ifseqformula "5"))
      (rule "applyEqReverse" (formula "7") (term "1,1,0") (ifseqformula "5"))
      (rule "applyEqReverse" (formula "6") (term "1,2,0") (ifseqformula "5"))
      (rule "applyEqReverse" (formula "46") (term "0,0,0,1,0,0") (ifseqformula "5"))
      (rule "applyEqReverse" (formula "46") (term "0,0,0,0,0,0,0,0,0") (ifseqformula "5"))
      (rule "hideAuxiliaryEq" (formula "5"))
      (rule "replace_known_left" (formula "7") (term "0,0,0,0") (ifseqformula "33"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "applyEqReverse" (formula "4") (term "0,0,0,0,0") (ifseqformula "7"))
      (rule "applyEqReverse" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "7"))
      (rule "applyEqReverse" (formula "4") (term "1,1,0") (ifseqformula "7"))
      (rule "applyEqReverse" (formula "4") (term "1,2,0") (ifseqformula "7"))
      (rule "hideAuxiliaryEq" (formula "7"))
      (rule "replace_known_left" (formula "33") (term "0,0") (ifseqformula "32"))
       (builtin "One Step Simplification" (formula "33"))
      (rule "true_left" (formula "33"))
      (rule "replace_known_left" (formula "30") (term "0,0") (ifseqformula "32"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "true_left" (formula "30"))
      (rule "replace_known_left" (formula "32") (term "0,0") (ifseqformula "31"))
       (builtin "One Step Simplification" (formula "32"))
      (rule "true_left" (formula "32"))
      (rule "replace_known_left" (formula "30") (term "0,0") (ifseqformula "31"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "true_left" (formula "30"))
      (rule "replace_known_left" (formula "40") (term "1,0,1,0,0") (ifseqformula "30"))
       (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "30")) (ifInst ""  (formula "30")) (ifInst ""  (formula "30")) (ifInst ""  (formula "30")))
      (rule "allRight" (formula "40") (inst "sk=f_0"))
      (rule "allRight" (formula "40") (inst "sk=o_0"))
      (rule "orRight" (formula "40"))
      (rule "orRight" (formula "40"))
      (rule "applyEq" (formula "28") (term "1") (ifseqformula "30"))
      (rule "applyEq" (formula "27") (term "1,0") (ifseqformula "30"))
      (rule "applyEq" (formula "5") (term "1,1,0,0,1,0,0") (ifseqformula "30"))
      (rule "applyEq" (formula "5") (term "1,0,0,0,0,0") (ifseqformula "30"))
      (rule "applyEq" (formula "6") (term "1,1,2,0") (ifseqformula "30"))
      (rule "applyEq" (formula "5") (term "1,1,1,0") (ifseqformula "30"))
      (rule "applyEq" (formula "6") (term "1,1,1,0") (ifseqformula "30"))
      (rule "applyEq" (formula "6") (term "1,1,0,0,1,0,0") (ifseqformula "30"))
      (rule "applyEq" (formula "6") (term "1,0,0,0,0,0") (ifseqformula "30"))
      (rule "applyEq" (formula "5") (term "1,1,2,0") (ifseqformula "30"))
      (rule "applyEq" (formula "4") (term "1,0,0,0,0,0") (ifseqformula "30"))
      (rule "applyEq" (formula "4") (term "1,1,0,0,1,0,0") (ifseqformula "30"))
      (rule "applyEq" (formula "4") (term "1,1,1,0") (ifseqformula "30"))
      (rule "applyEq" (formula "4") (term "1,1,2,0") (ifseqformula "30"))
      (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=f_0_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "33"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "42")))
      (rule "eqSymm" (formula "43"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
      (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "41"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")))
      (rule "closeFalse" (formula "1"))
   )
   (branch "CUT: self.tail = null FALSE"
       (builtin "One Step Simplification" (formula "35"))
      (rule "replace_known_right" (formula "7") (term "0,0,0,0") (ifseqformula "41"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "replace_known_right" (formula "9") (term "0,0,0,0") (ifseqformula "41"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "replace_known_right" (formula "5") (term "0,0,0,0") (ifseqformula "41"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "replace_known_right" (formula "33") (term "0,0") (ifseqformula "41"))
       (builtin "One Step Simplification" (formula "33"))
      (rule "replace_known_right" (formula "36") (term "0,0") (ifseqformula "41"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "replace_known_right" (formula "34") (term "0,0") (ifseqformula "41"))
       (builtin "One Step Simplification" (formula "34"))
      (rule "replace_known_right" (formula "37") (term "0,0") (ifseqformula "41"))
       (builtin "One Step Simplification" (formula "37"))
      (rule "replace_known_right" (formula "48") (term "1,0,1,0,0") (ifseqformula "41"))
       (builtin "One Step Simplification" (formula "48") (ifInst ""  (formula "41")) (ifInst ""  (formula "41")) (ifInst ""  (formula "41")) (ifInst ""  (formula "41")))
      (rule "ifthenelse_negated" (formula "7") (term "0"))
      (rule "ifthenelse_negated" (formula "9") (term "0"))
      (rule "ifthenelse_negated" (formula "5") (term "0"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "1,0") (ifseqformula "11"))
      (rule "replace_known_right" (formula "30") (term "0") (ifseqformula "42"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "30"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "applyEqReverse" (formula "49") (term "0,0,1,0,0") (ifseqformula "5"))
      (rule "applyEqReverse" (formula "49") (term "0,0,1,0,0,0,0") (ifseqformula "5"))
      (rule "applyEqReverse" (formula "6") (term "0,0,0,0,0") (ifseqformula "5"))
      (rule "applyEqReverse" (formula "8") (term "1,0,0,1,0,0") (ifseqformula "5"))
      (rule "applyEqReverse" (formula "8") (term "1,1,0") (ifseqformula "5"))
      (rule "applyEqReverse" (formula "8") (term "1,2,0") (ifseqformula "5"))
      (rule "applyEqReverse" (formula "6") (term "1,2,0") (ifseqformula "5"))
      (rule "applyEqReverse" (formula "6") (term "1,1,0") (ifseqformula "5"))
      (rule "applyEqReverse" (formula "49") (term "0,0,0,0,0,0,0,0") (ifseqformula "5"))
      (rule "applyEqReverse" (formula "8") (term "0,0,0,0,0") (ifseqformula "5"))
      (rule "applyEqReverse" (formula "6") (term "1,0,0,1,0,0") (ifseqformula "5"))
      (rule "hideAuxiliaryEq" (formula "5"))
      (rule "replace_known_left" (formula "6") (term "0,0") (ifseqformula "29"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "applyEqReverse" (formula "48") (term "0,1,1,0,0,0,0") (ifseqformula "6"))
      (rule "applyEqReverse" (formula "48") (term "0,1,0,0,0,0,0") (ifseqformula "6"))
      (rule "applyEqReverse" (formula "48") (term "0,0,1,0,0,0") (ifseqformula "6"))
      (rule "applyEqReverse" (formula "48") (term "0,1,1,0,0,0") (ifseqformula "6"))
      (rule "applyEqReverse" (formula "48") (term "0,0,1,0") (ifseqformula "6"))
      (rule "hideAuxiliaryEq" (formula "6"))
      (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "28"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "applyEqReverse" (formula "4") (term "0,0,0,0,0") (ifseqformula "7"))
      (rule "applyEqReverse" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "7"))
      (rule "applyEqReverse" (formula "4") (term "1,2,0") (ifseqformula "7"))
      (rule "applyEqReverse" (formula "4") (term "1,1,0") (ifseqformula "7"))
      (rule "hideAuxiliaryEq" (formula "7"))
      (rule "replace_known_left" (formula "46") (term "0,0,0,0,0") (ifseqformula "31"))
       (builtin "One Step Simplification" (formula "46"))
      (rule "commute_or" (formula "46") (term "1,0"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "1,0") (ifseqformula "8"))
      (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "45"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "1,0") (ifseqformula "9"))
      (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "45"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0") (ifseqformula "9"))
      (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "45"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "ifthenelse_split" (formula "6") (term "0"))
      (branch " ¬self.tail.tail = null ∧ ¬self.tail.tail.<created> = TRUE TRUE"
         (rule "andLeft" (formula "6"))
         (rule "notLeft" (formula "6"))
         (rule "notLeft" (formula "6"))
         (rule "referencedObjectIsCreatedRight" (formula "42") (ifseqformula "43"))
         (rule "close" (formula "42") (ifseqformula "9"))
      )
      (branch " ¬self.tail.tail = null ∧ ¬self.tail.tail.<created> = TRUE FALSE"
         (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "6"))
         (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "6"))
         (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "6"))
         (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "6"))
         (rule "hideAuxiliaryEq" (formula "6"))
         (rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "41"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "applyEqReverse" (formula "49") (term "1,1,1,0,0,0,0") (ifseqformula "6"))
         (rule "applyEqReverse" (formula "49") (term "1,1,1,1,0,0,0") (ifseqformula "6"))
         (rule "hideAuxiliaryEq" (formula "6"))
         (rule "polySimp_homoEq" (formula "48") (term "1,0,0,0,0"))
         (rule "polySimp_homoEq" (formula "48") (term "1,1,0,0,0"))
         (rule "polySimp_addComm1" (formula "48") (term "0,1,0,0,0,0"))
         (rule "polySimp_addComm1" (formula "48") (term "0,1,1,0,0,0"))
         (rule "polySimp_sepPosMonomial" (formula "48") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "48") (term "1,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "48") (term "1,1,0,0,0,0"))
         (rule "mul_literals" (formula "48") (term "0,1,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "48") (term "1,1,1,0,0,0,0"))
         (rule "replace_known_left" (formula "48") (term "0,0,0,0") (ifseqformula "33"))
          (builtin "One Step Simplification" (formula "48"))
         (rule "polySimp_sepPosMonomial" (formula "48") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "48") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "48") (term "1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "48") (term "1,1,1,0,0,0"))
         (rule "mul_literals" (formula "48") (term "0,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "48") (term "1,1,1,0,0,0"))
         (rule "replace_known_left" (formula "48") (term "0,0,0") (ifseqformula "34"))
          (builtin "One Step Simplification" (formula "48"))
         (rule "ifthenelse_split" (formula "5") (term "0"))
         (branch " ¬self.tail.head = null ∧ ¬self.tail.head.<created> = TRUE TRUE"
            (rule "andLeft" (formula "5"))
            (rule "notLeft" (formula "5"))
            (rule "notLeft" (formula "5"))
            (rule "referencedObjectIsCreatedRight" (formula "40") (ifseqformula "41"))
            (rule "close" (formula "40") (ifseqformula "7"))
         )
         (branch " ¬self.tail.head = null ∧ ¬self.tail.head.<created> = TRUE FALSE"
            (rule "applyEqReverse" (formula "2") (term "1,1,0") (ifseqformula "5"))
            (rule "applyEqReverse" (formula "2") (term "1,2,0") (ifseqformula "5"))
            (rule "applyEqReverse" (formula "2") (term "0,0,0,0,0") (ifseqformula "5"))
            (rule "applyEqReverse" (formula "2") (term "1,0,0,1,0,0") (ifseqformula "5"))
            (rule "hideAuxiliaryEq" (formula "5"))
            (rule "cut_direct" (formula "33") (term "0"))
            (branch "CUT: self.tail.size = 1 TRUE"
                (builtin "One Step Simplification" (formula "34"))
               (rule "true_left" (formula "34"))
               (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "33"))
                (builtin "One Step Simplification" (formula "31"))
               (rule "true_left" (formula "31"))
               (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "32"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "true_left" (formula "34"))
               (rule "replace_known_left" (formula "46") (term "1,1,0") (ifseqformula "32"))
                (builtin "One Step Simplification" (formula "46"))
               (rule "applyEq" (formula "31") (term "1,1,1") (ifseqformula "32"))
               (rule "add_literals" (formula "31") (term "1,1"))
               (rule "cut_direct" (formula "31") (term "0"))
               (branch "CUT: self.tail.tail = null TRUE"
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "true_left" (formula "32"))
                  (rule "replace_known_left" (formula "38") (term "0,0") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "38"))
                  (rule "false_right" (formula "38"))
                  (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "true_left" (formula "33"))
                  (rule "replace_known_left" (formula "44") (term "0,0") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "44"))
                  (rule "allRight" (formula "44") (inst "sk=f_0"))
                  (rule "allRight" (formula "44") (inst "sk=o_0"))
                  (rule "orRight" (formula "44"))
                  (rule "orRight" (formula "44"))
                  (rule "applyEq" (formula "3") (term "1,1,1,0") (ifseqformula "31"))
                  (rule "applyEq" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "31"))
                  (rule "applyEq" (formula "3") (term "1,1,0,0,1,0,0") (ifseqformula "31"))
                  (rule "applyEq" (formula "3") (term "1,1,2,0") (ifseqformula "31"))
                  (rule "pullOutSelect" (formula "46") (term "0") (inst "selectSK=f_0_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "46")))
                  (rule "eqSymm" (formula "47"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "45"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "47")))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "CUT: self.tail.tail = null FALSE"
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "37"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "replace_known_right" (formula "47") (term "0,0") (ifseqformula "37"))
                   (builtin "One Step Simplification" (formula "47"))
                  (rule "replace_known_right" (formula "39") (term "0,0") (ifseqformula "37"))
                   (builtin "One Step Simplification" (formula "39"))
                  (rule "notRight" (formula "39"))
                  (rule "ifthenelse_split" (formula "4") (term "0"))
                  (branch " ¬self.tail.tail.head = null ∧ ¬self.tail.tail.head.<created> = TRUE TRUE"
                     (rule "andLeft" (formula "4"))
                     (rule "notLeft" (formula "4"))
                     (rule "notLeft" (formula "4"))
                     (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "39"))
                     (rule "close" (formula "38") (ifseqformula "7"))
                  )
                  (branch " ¬self.tail.tail.head = null ∧ ¬self.tail.tail.head.<created> = TRUE FALSE"
                     (rule "applyEqReverse" (formula "5") (term "1,2,0") (ifseqformula "4"))
                     (rule "applyEqReverse" (formula "5") (term "1,0,0,1,0,0") (ifseqformula "4"))
                     (rule "applyEqReverse" (formula "5") (term "1,1,0") (ifseqformula "4"))
                     (rule "applyEqReverse" (formula "5") (term "0,0,0,0,0") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,0") (ifseqformula "6"))
                     (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "43"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0") (ifseqformula "6"))
                     (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "43"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "ifthenelse_split" (formula "3") (term "0"))
                     (branch " ¬self.tail.head.product = null ∧ ¬self.tail.head.product.<created> = TRUE TRUE"
                        (rule "andLeft" (formula "3"))
                        (rule "notLeft" (formula "4"))
                        (rule "notLeft" (formula "3"))
                        (rule "referencedObjectIsCreatedRight" (formula "40") (ifseqformula "39"))
                        (rule "close" (formula "40") (ifseqformula "6"))
                     )
                     (branch " ¬self.tail.head.product = null ∧ ¬self.tail.head.product.<created> = TRUE FALSE"
                        (rule "applyEqReverse" (formula "50") (term "0,0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "ifthenelse_split" (formula "3") (term "0"))
                        (branch " ¬self.tail.tail.head.product = null ∧ ¬self.tail.tail.head.product.<created> = TRUE TRUE"
                           (rule "andLeft" (formula "3"))
                           (rule "notLeft" (formula "3"))
                           (rule "notLeft" (formula "3"))
                           (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "39"))
                           (rule "close" (formula "38") (ifseqformula "5"))
                        )
                        (branch " ¬self.tail.tail.head.product = null ∧ ¬self.tail.tail.head.product.<created> = TRUE FALSE"
                           (rule "applyEqReverse" (formula "50") (term "1,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "inEqSimp_commuteLeq" (formula "49") (term "0"))
                           (rule "replace_known_left" (formula "49") (term "0") (ifseqformula "33"))
                            (builtin "One Step Simplification" (formula "49"))
                           (rule "allRight" (formula "49") (inst "sk=f_0"))
                           (rule "allRight" (formula "49") (inst "sk=o_0"))
                           (rule "orRight" (formula "49"))
                           (rule "orRight" (formula "49"))
                           (rule "pullOutSelect" (formula "51") (term "0") (inst "selectSK=f_0_0"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")))
                           (rule "eqSymm" (formula "52"))
                           (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                           (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "50"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
               )
            )
            (branch "CUT: self.tail.size = 1 FALSE"
                (builtin "One Step Simplification" (formula "33"))
               (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                (builtin "One Step Simplification" (formula "32"))
               (rule "true_left" (formula "32"))
               (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "38"))
                (builtin "One Step Simplification" (formula "31"))
               (rule "notLeft" (formula "31"))
               (rule "replace_known_right" (formula "33") (term "0") (ifseqformula "38"))
                (builtin "One Step Simplification" (formula "33"))
               (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
                (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "37")))
               (rule "true_left" (formula "32"))
               (rule "replace_known_right" (formula "39") (term "0,0") (ifseqformula "36"))
                (builtin "One Step Simplification" (formula "39"))
               (rule "notRight" (formula "39"))
               (rule "replace_known_right" (formula "47") (term "1,1,0") (ifseqformula "38"))
                (builtin "One Step Simplification" (formula "47") (ifInst ""  (formula "37")))
               (rule "ifthenelse_split" (formula "4") (term "0"))
               (branch " ¬self.tail.tail.head = null ∧ ¬self.tail.tail.head.<created> = TRUE TRUE"
                  (rule "andLeft" (formula "4"))
                  (rule "notLeft" (formula "5"))
                  (rule "notLeft" (formula "4"))
                  (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "37"))
                  (rule "close" (formula "38") (ifseqformula "7"))
               )
               (branch " ¬self.tail.tail.head = null ∧ ¬self.tail.tail.head.<created> = TRUE FALSE"
                  (rule "applyEqReverse" (formula "5") (term "1,0,0,1,0,0") (ifseqformula "4"))
                  (rule "applyEqReverse" (formula "5") (term "1,2,0") (ifseqformula "4"))
                  (rule "applyEqReverse" (formula "5") (term "0,0,0,0,0") (ifseqformula "4"))
                  (rule "applyEqReverse" (formula "5") (term "1,1,0") (ifseqformula "4"))
                  (rule "hideAuxiliaryEq" (formula "4"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1,0") (ifseqformula "6"))
                  (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "43"))
                   (builtin "One Step Simplification" (formula "14"))
                  (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "1,0") (ifseqformula "6"))
                  (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "43"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "ifthenelse_split" (formula "3") (term "0"))
                  (branch " ¬self.tail.head.product = null ∧ ¬self.tail.head.product.<created> = TRUE TRUE"
                     (rule "andLeft" (formula "3"))
                     (rule "notLeft" (formula "3"))
                     (rule "notLeft" (formula "3"))
                     (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "39"))
                     (rule "close" (formula "38") (ifseqformula "6"))
                  )
                  (branch " ¬self.tail.head.product = null ∧ ¬self.tail.head.product.<created> = TRUE FALSE"
                     (rule "applyEqReverse" (formula "50") (term "0,0") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "ifthenelse_split" (formula "3") (term "0"))
                     (branch " ¬self.tail.tail.head.product = null ∧ ¬self.tail.tail.head.product.<created> = TRUE TRUE"
                        (rule "andLeft" (formula "3"))
                        (rule "notLeft" (formula "4"))
                        (rule "notLeft" (formula "3"))
                        (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "37"))
                        (rule "close" (formula "38") (ifseqformula "5"))
                     )
                     (branch " ¬self.tail.tail.head.product = null ∧ ¬self.tail.tail.head.product.<created> = TRUE FALSE"
                        (rule "applyEqReverse" (formula "50") (term "1,0") (ifseqformula "3"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "inEqSimp_commuteLeq" (formula "49") (term "0"))
                        (rule "replace_known_left" (formula "49") (term "0") (ifseqformula "32"))
                         (builtin "One Step Simplification" (formula "49"))
                        (rule "allRight" (formula "49") (inst "sk=f_0"))
                        (rule "allRight" (formula "49") (inst "sk=o_0"))
                        (rule "orRight" (formula "49"))
                        (rule "orRight" (formula "49"))
                        (rule "pullOutSelect" (formula "51") (term "0") (inst "selectSK=f_0_0"))
                        (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "35"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")))
                        (rule "eqSymm" (formula "52"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                        (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "50"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
               )
            )
         )
      )
   )
)
(branch "Exceptional Post (havocPacked)"
    (builtin "One Step Simplification" (formula "36"))
    (builtin "One Step Simplification" (formula "29"))
   (rule "andLeft" (formula "29"))
   (rule "andLeft" (formula "30"))
   (rule "andLeft" (formula "30"))
   (rule "notLeft" (formula "30"))
   (rule "close" (formula "32") (ifseqformula "31"))
)
(branch "Pre (havocPacked)"
    (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "1")))
   (rule "closeTrue" (formula "34"))
)
)
}
