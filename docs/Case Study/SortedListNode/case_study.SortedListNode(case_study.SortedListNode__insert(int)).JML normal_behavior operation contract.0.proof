\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:on",
        "Strings" : "Strings:on",
        "assertions" : "assertions:safe",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:treatAsAxiom",
        "moreSeqRules" : "moreSeqRules:off",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:allow",
        "sequences" : "sequences:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 100000,
        "Timeout" : -1,
        "options" : { 
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_EXPAND",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_FREE",
            "DEP_OPTIONS_KEY" : "DEP_OFF",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_SCOPE_INV_TACLET",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_DEF_OPS",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_INSTANTIATE",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_OFF",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_OFF",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_DEFAULT",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\javaSource "../../../property-checker-out/case_study";

\proofObligation "#Proof Obligation Settings
#Fri Jun 14 12:22:23 CEST 2024
contract=case_study.SortedListNode[case_study.SortedListNode\\:\\:insert(int)].JML normal_behavior operation contract.0
name=case_study.SortedListNode[case_study.SortedListNode\\:\\:insert(int)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "florian" ) (keyVersion "7ff2d9dc3ea43e071577b3f8d0e3a537f9213982"))

(autoModeTime "38341")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "10") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "9"))
 (builtin "One Step Simplification" (formula "5"))
(rule "polySimp_addComm0" (formula "10") (term "1,0,0,0,0,1"))
(rule "polySimp_addComm0" (formula "5") (term "1,1,1"))
(rule "elementOfInfiniteUnion" (formula "10") (term "0,0,0,0,1,0,1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "assignment" (formula "10") (term "1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "Class_invariant_axiom_for_case_study_SortedListNode" (formula "6") (ifseqformula "9"))
(rule "true_left" (formula "6"))
(rule "Free_class_invariant_axiom_for_case_study_SortedListNode" (formula "7") (ifseqformula "8"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "andLeft" (formula "7"))
(rule "polySimp_addComm0" (formula "10") (term "1,1,1,1"))
(rule "applyEq" (formula "10") (term "0,0") (ifseqformula "6"))
(rule "ssubsortDirect" (formula "10") (term "0"))
 (builtin "One Step Simplification" (formula "10"))
(rule "applyEq" (formula "9") (term "0,0") (ifseqformula "6"))
(rule "ssubsortDirect" (formula "9") (term "0"))
 (builtin "One Step Simplification" (formula "9"))
(rule "applyEq" (formula "7") (term "0,0") (ifseqformula "6"))
(rule "ssubsortDirect" (formula "7") (term "0"))
 (builtin "One Step Simplification" (formula "7"))
(rule "commute_and_2" (formula "5") (term "1"))
(rule "commute_and_2" (formula "10") (term "1"))
(rule "cnf_rightDist" (formula "10") (term "0"))
(rule "commute_or" (formula "10") (term "1,0"))
(rule "cnf_rightDist" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "cnf_rightDist" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "commute_or" (formula "6"))
(rule "cnf_rightDist" (formula "12"))
(rule "andLeft" (formula "12"))
(rule "cnf_rightDist" (formula "13"))
(rule "andLeft" (formula "13"))
(rule "commute_or" (formula "13"))
(rule "cnf_rightDist" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "commute_or" (formula "5"))
(rule "cnf_rightDist" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "commute_or" (formula "6"))
(rule "cnf_rightDist" (formula "5"))
 (builtin "One Step Simplification" (formula "5"))
(rule "commute_or" (formula "5"))
(rule "cnf_rightDist" (formula "14"))
(rule "andLeft" (formula "14"))
(rule "commute_or" (formula "14"))
(rule "cnf_rightDist" (formula "15"))
(rule "andLeft" (formula "15"))
(rule "commute_or" (formula "15"))
(rule "cnf_rightDist" (formula "14"))
(rule "andLeft" (formula "14"))
(rule "commute_or_2" (formula "15"))
(rule "shift_paren_or" (formula "14"))
(rule "commute_or" (formula "14") (term "0"))
 (builtin "One Step Simplification" (formula "14"))
(rule "true_left" (formula "14"))
(rule "methodBodyExpand" (formula "20") (term "1") (newnames "heapBefore_insert,savedHeapBefore_insert"))
 (builtin "One Step Simplification" (formula "20"))
(rule "ifElseUnfold" (formula "20") (term "1") (inst "#boolv=b"))
(rule "variableDeclaration" (formula "20") (term "1") (newnames "b"))
(rule "compound_less_equal_than_comparison_2" (formula "20") (term "1") (inst "#v1=i_1") (inst "#v0=i"))
(rule "variableDeclarationAssign" (formula "20") (term "1"))
(rule "variableDeclaration" (formula "20") (term "1") (newnames "i"))
(rule "assignment" (formula "20") (term "1"))
 (builtin "One Step Simplification" (formula "20"))
(rule "variableDeclarationAssign" (formula "20") (term "1"))
(rule "variableDeclaration" (formula "20") (term "1") (newnames "i_1"))
(rule "assignment_read_attribute_this" (formula "20") (term "1"))
 (builtin "One Step Simplification" (formula "20"))
(rule "less_equal_than_comparison_simple" (formula "20") (term "1"))
 (builtin "One Step Simplification" (formula "20"))
(rule "inEqSimp_commuteLeq" (formula "20") (term "0,0,1,0"))
(rule "ifElseSplit" (formula "20"))
(branch "if _newHead <= this.head true"
    (builtin "One Step Simplification" (formula "21"))
    (builtin "One Step Simplification" (formula "1"))
    (builtin "Use Operation Contract" (formula "21") (newnames "heapBefore___insertHead_trampoline,exc_0,heapAfter___insertHead_trampoline,anon_heap___insertHead_trampoline") (contract "case_study.SortedListNode[case_study.SortedListNode::__insertHead_trampoline(int,boolean,boolean)].JML normal_behavior operation contract.0") (modality "diamond"))
   (branch "Post (__insertHead_trampoline)"
       (builtin "One Step Simplification" (formula "23"))
       (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "22")) (ifInst ""  (formula "22")) (ifInst ""  (formula "22")) (ifInst ""  (formula "22")))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "25"))
      (rule "andLeft" (formula "23"))
      (rule "andLeft" (formula "24"))
      (rule "polySimp_addComm0" (formula "26") (term "1"))
      (rule "polySimp_addComm0" (formula "23") (term "1,1,1"))
      (rule "pullOutSelect" (formula "25") (term "0") (inst "selectSK=case_study_SortedListNode_head_0"))
      (rule "applyEq" (formula "23") (term "1,1,0,1") (ifseqformula "25"))
      (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "21"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "applyEqReverse" (formula "26") (term "0") (ifseqformula "25"))
      (rule "applyEqReverse" (formula "23") (term "1,1,0,1") (ifseqformula "25"))
      (rule "hideAuxiliaryEq" (formula "25"))
      (rule "applyEq" (formula "23") (term "1,1,0,1") (ifseqformula "25"))
      (rule "pullOutSelect" (formula "22") (term "0") (inst "selectSK=java_lang_Object_packed_0"))
      (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "21"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "applyEqReverse" (formula "23") (term "0") (ifseqformula "22"))
      (rule "hideAuxiliaryEq" (formula "22"))
      (rule "pullOutSelect" (formula "26") (term "0") (inst "selectSK=case_study_SortedListNode_size_0"))
      (rule "applyEq" (formula "23") (term "0,1,0") (ifseqformula "26"))
      (rule "applyEq" (formula "23") (term "0,1,1") (ifseqformula "26"))
      (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "21"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "26"))
      (rule "applyEqReverse" (formula "23") (term "0,1,0") (ifseqformula "26"))
      (rule "applyEqReverse" (formula "23") (term "0,1,1") (ifseqformula "26"))
      (rule "hideAuxiliaryEq" (formula "26"))
      (rule "applyEq" (formula "23") (term "0,1,1") (ifseqformula "26"))
      (rule "applyEq" (formula "23") (term "0,1,0") (ifseqformula "26"))
      (rule "pullOutSelect" (formula "23") (term "0,0,0") (inst "selectSK=case_study_SortedListNode_tail_0"))
      (rule "applyEq" (formula "24") (term "1,1,1,1,1") (ifseqformula "23"))
      (rule "applyEq" (formula "24") (term "0,0,0,0,1") (ifseqformula "23"))
      (rule "applyEq" (formula "24") (term "1,0,1,0,1") (ifseqformula "23"))
      (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "21"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "applyEqReverse" (formula "24") (term "0,0,0") (ifseqformula "23"))
      (rule "applyEqReverse" (formula "24") (term "1,1,1,1,1") (ifseqformula "23"))
      (rule "applyEqReverse" (formula "24") (term "0,0,0,0,1") (ifseqformula "23"))
      (rule "applyEqReverse" (formula "24") (term "1,0,1,0,1") (ifseqformula "23"))
      (rule "hideAuxiliaryEq" (formula "23"))
      (rule "pullOutSelect" (formula "23") (term "1,1,1,1") (inst "selectSK=case_study_SortedListNode_size_1"))
      (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "21"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "pullOutSelect" (formula "24") (term "0,1,0,1") (inst "selectSK=case_study_SortedListNode_head_1"))
      (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "21"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "inEqSimp_commuteGeq" (formula "25") (term "1,0,1"))
      (rule "Free_class_invariant_axiom_for_case_study_SortedListNode" (formula "26") (ifseqformula "31"))
      (rule "replaceKnownSelect_taclet00_2" (formula "26") (term "0,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_3" (formula "26") (term "0,0,1"))
      (rule "replaceKnownSelect_taclet00_4" (formula "26") (term "0,1,1,0"))
      (rule "replaceKnownSelect_taclet00_2" (formula "26") (term "0,0,1,0"))
      (rule "replaceKnownSelect_taclet00_6" (formula "26") (term "1,1,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_5" (formula "26") (term "0,1,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_3" (formula "26") (term "0,0,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_7" (formula "26") (term "1,1,0,0"))
      (rule "replaceKnownSelect_taclet00_2" (formula "26") (term "0,0,0,0,0"))
      (rule "replaceKnownSelect_taclet00_6" (formula "26") (term "0,0,0,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_3" (formula "26") (term "0,0,0,0,0"))
      (rule "replaceKnownSelect_taclet00_6" (formula "26") (term "1,0,1,1,1,1"))
      (rule "replaceKnownSelect_taclet00_6" (formula "26") (term "1,0,1,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_7" (formula "26") (term "0,0,0,1,1"))
      (rule "replaceKnownSelect_taclet00_6" (formula "26") (term "1,1,1,0,1,1,1"))
      (rule "replaceKnownSelect_taclet00_6" (formula "26") (term "1,0,1,1,0,1,1"))
      (rule "replaceKnownSelect_taclet00_6" (formula "26") (term "1,0,0,1,0,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_7" (formula "26") (term "1,0,1,1,1,1"))
      (rule "replaceKnownSelect_taclet00_8" (formula "26") (term "0,1,1,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_7" (formula "26") (term "1,0,1,0,0,0"))
      (rule "replaceKnownSelect_taclet00_6" (formula "26") (term "1,1,0,1,0,1,1,1"))
      (rule "replaceKnownSelect_taclet00_6" (formula "26") (term "1,1,0,1,1,1,1,1"))
      (rule "replaceKnownSelect_taclet00_6" (formula "26") (term "1,0,0,0,0,1,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_7" (formula "26") (term "1,1,1,0,1,1,1"))
      (rule "replaceKnownSelect_taclet00_9" (formula "26") (term "1,1,0,1,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_7" (formula "26") (term "1,0,1,1,0,1,1"))
      (rule "replaceKnownSelect_taclet00_8" (formula "26") (term "0,1,1,0,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_7" (formula "26") (term "1,0,0,1,0,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_7" (formula "26") (term "1,1,0,1,0,1,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_7" (formula "26") (term "1,1,0,1,1,1,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet00_7" (formula "26") (term "1,0,0,0,0,1,1,1"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "polySimp_addComm0" (formula "29") (term "1,1,1,1"))
      (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "22"))
      (rule "ssubsortDirect" (formula "29") (term "0"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "applyEq" (formula "28") (term "0,1") (ifseqformula "31"))
      (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "22"))
      (rule "ssubsortDirect" (formula "26") (term "0"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "22"))
      (rule "ssubsortDirect" (formula "28") (term "0"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "pullOutSelect" (formula "29") (term "1,1,1,1,1") (inst "selectSK=case_study_SortedListNode_tail_1"))
      (rule "applyEq" (formula "30") (term "0,0,0,0,1") (ifseqformula "29"))
      (rule "applyEq" (formula "30") (term "0,0,1,0") (ifseqformula "29"))
      (rule "applyEq" (formula "30") (term "1,0,1,0,1") (ifseqformula "29"))
      (rule "simplifySelectOfAnonEQ" (formula "29") (ifseqformula "21"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "pullOutSelect" (formula "26") (term "0") (inst "selectSK=java_lang_Object_packed_1"))
      (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "21"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "applyEqRigid" (formula "26") (term "1") (ifseqformula "27"))
      (rule "pullOutSelect" (formula "31") (term "1,1,1,1") (inst "selectSK=case_study_SortedListNode_size_2"))
      (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "21"))
       (builtin "One Step Simplification" (formula "31"))
      (rule "eqSymm" (formula "31") (term "0,0,0"))
      (rule "pullOutSelect" (formula "32") (term "0,1,0,1") (inst "selectSK=case_study_SortedListNode_head_2"))
      (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "21"))
       (builtin "One Step Simplification" (formula "32"))
      (rule "eqSymm" (formula "32") (term "0,0,0"))
      (rule "Class_invariant_axiom_for_case_study_SortedListNode" (formula "36") (ifseqformula "38"))
      (rule "true_left" (formula "36"))
      (rule "cnf_rightDist" (formula "25"))
      (rule "andLeft" (formula "25"))
      (rule "cnf_rightDist" (formula "23") (term "0,0"))
      (rule "cnf_rightDist" (formula "24") (term "0,0"))
      (rule "methodCallEmpty" (formula "39") (term "1"))
      (rule "cnf_rightDist" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "commute_or" (formula "26"))
      (rule "cnf_rightDist" (formula "35") (term "0"))
      (rule "commute_or" (formula "35") (term "0,0"))
      (rule "commute_or" (formula "35") (term "1,0"))
      (rule "commute_or" (formula "23") (term "0,0,0"))
      (rule "commute_or" (formula "23") (term "1,0,0"))
      (rule "commute_or" (formula "24") (term "0,0,0"))
      (rule "commute_or" (formula "24") (term "1,0,0"))
      (rule "cnf_rightDist" (formula "25"))
      (rule "andLeft" (formula "25"))
      (rule "commute_or" (formula "25"))
      (rule "cnf_rightDist" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "commute_or" (formula "27"))
      (rule "commute_or" (formula "26"))
      (rule "cnf_rightDist" (formula "25"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "commute_or" (formula "25"))
      (rule "cnf_rightDist" (formula "37"))
      (rule "andLeft" (formula "37"))
      (rule "cnf_rightDist" (formula "34") (term "0,0"))
      (rule "cnf_rightDist" (formula "38"))
      (rule "andLeft" (formula "38"))
      (rule "commute_or" (formula "38"))
      (rule "cnf_rightDist" (formula "30") (term "0,0"))
      (rule "cnf_rightDist" (formula "35") (term "0,0"))
      (rule "commute_or" (formula "34") (term "1,0,0"))
      (rule "cnf_rightDist" (formula "36") (term "0,0"))
      (rule "commute_or" (formula "34") (term "0,0,0"))
      (rule "commute_or" (formula "30") (term "1,0,0"))
      (rule "commute_or" (formula "30") (term "0,0,0"))
      (rule "cnf_rightDist" (formula "37"))
      (rule "andLeft" (formula "37"))
      (rule "commute_or" (formula "37"))
      (rule "cnf_rightDist" (formula "38"))
      (rule "andLeft" (formula "38"))
      (rule "commute_or" (formula "38"))
      (rule "commute_or_2" (formula "39"))
      (rule "cnf_rightDist" (formula "37"))
      (rule "andLeft" (formula "37"))
      (rule "commute_or_2" (formula "38"))
      (rule "shift_paren_or" (formula "37"))
       (builtin "One Step Simplification" (formula "37"))
      (rule "true_left" (formula "37"))
      (rule "commute_or" (formula "37") (term "0"))
      (rule "commute_or" (formula "35") (term "1,0,0"))
      (rule "commute_or" (formula "35") (term "0,0,0"))
      (rule "commute_or" (formula "36") (term "1,0,0"))
      (rule "commute_or" (formula "36") (term "0,0,0"))
      (rule "tryEmpty" (formula "46") (term "1"))
      (rule "emptyModality" (formula "46") (term "1"))
      (rule "andRight" (formula "46"))
      (branch
         (rule "andRight" (formula "46"))
         (branch
            (rule "andRight" (formula "46"))
            (branch
                (builtin "One Step Simplification" (formula "46"))
               (rule "replaceKnownSelect_taclet00_4" (formula "46") (term "0"))
               (rule "replaceKnownAuxiliaryConstant_taclet00_5" (formula "46") (term "0"))
               (rule "close" (formula "46") (ifseqformula "43"))
            )
            (branch
                (builtin "One Step Simplification" (formula "46"))
               (rule "polySimp_homoEq" (formula "41") (term "1"))
               (rule "polySimp_homoEq" (formula "29") (term "0"))
               (rule "polySimp_homoEq" (formula "28") (term "1"))
               (rule "polySimp_homoEq" (formula "27") (term "1"))
               (rule "polySimp_homoEq" (formula "16") (term "1"))
               (rule "polySimp_homoEq" (formula "7") (term "1"))
               (rule "polySimp_homoEq" (formula "17") (term "1"))
               (rule "polySimp_homoEq" (formula "40") (term "1"))
               (rule "polySimp_homoEq" (formula "25") (term "1"))
               (rule "polySimp_homoEq" (formula "8") (term "1"))
               (rule "polySimp_homoEq" (formula "29") (term "1"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,0,1"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,0,1"))
               (rule "polySimp_mulComm0" (formula "25") (term "1,0,1"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,0,1"))
               (rule "polySimp_addComm1" (formula "41") (term "0,1"))
               (rule "polySimp_addComm1" (formula "16") (term "0,1"))
               (rule "polySimp_addComm1" (formula "7") (term "0,1"))
               (rule "polySimp_addComm1" (formula "17") (term "0,1"))
               (rule "polySimp_addComm1" (formula "40") (term "0,1"))
               (rule "polySimp_addComm1" (formula "8") (term "0,1"))
               (rule "polySimp_rightDist" (formula "29") (term "1,0,0"))
               (rule "mul_literals" (formula "29") (term "0,1,0,0"))
               (rule "polySimp_rightDist" (formula "28") (term "1,0,1"))
               (rule "mul_literals" (formula "28") (term "0,1,0,1"))
               (rule "polySimp_rightDist" (formula "27") (term "1,0,1"))
               (rule "mul_literals" (formula "27") (term "0,1,0,1"))
               (rule "polySimp_rightDist" (formula "25") (term "1,0,1"))
               (rule "mul_literals" (formula "25") (term "0,1,0,1"))
               (rule "polySimp_rightDist" (formula "29") (term "1,0,1"))
               (rule "mul_literals" (formula "29") (term "0,1,0,1"))
               (rule "polySimp_addAssoc" (formula "29") (term "0,0"))
               (rule "add_literals" (formula "29") (term "0,0,0"))
               (rule "add_zero_left" (formula "29") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "28") (term "0,1"))
               (rule "polySimp_addComm1" (formula "28") (term "0,0,1"))
               (rule "add_literals" (formula "28") (term "0,0,0,1"))
               (rule "add_zero_left" (formula "28") (term "0,0,1"))
               (rule "polySimp_addAssoc" (formula "27") (term "0,1"))
               (rule "add_literals" (formula "27") (term "0,0,1"))
               (rule "add_zero_left" (formula "27") (term "0,1"))
               (rule "polySimp_addAssoc" (formula "25") (term "0,1"))
               (rule "add_literals" (formula "25") (term "0,0,1"))
               (rule "add_zero_left" (formula "25") (term "0,1"))
               (rule "inEqSimp_gtToGeq" (formula "14"))
               (rule "mul_literals" (formula "14") (term "1,0,0"))
               (rule "add_zero_right" (formula "14") (term "0,0"))
               (rule "inEqSimp_gtToGeq" (formula "33"))
               (rule "mul_literals" (formula "33") (term "1,0,0"))
               (rule "add_zero_right" (formula "33") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "29") (term "0,1"))
               (rule "polySimp_addComm1" (formula "29") (term "0,0,1"))
               (rule "add_literals" (formula "29") (term "0,0,0,1"))
               (rule "add_zero_left" (formula "29") (term "0,0,1"))
               (rule "polySimp_addAssoc" (formula "33") (term "0"))
               (rule "add_literals" (formula "33") (term "0,0"))
               (rule "add_zero_left" (formula "33") (term "0"))
               (rule "polySimp_sepPosMonomial" (formula "41") (term "1"))
               (rule "polySimp_mulComm0" (formula "41") (term "1,1"))
               (rule "polySimp_rightDist" (formula "41") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1"))
               (rule "mul_literals" (formula "41") (term "0,1,1"))
               (rule "polySimp_elimOne" (formula "41") (term "1,1,1"))
               (rule "polySimp_sepPosMonomial" (formula "16") (term "1"))
               (rule "polySimp_mulComm0" (formula "16") (term "1,1"))
               (rule "polySimp_rightDist" (formula "16") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1"))
               (rule "mul_literals" (formula "16") (term "0,1,1"))
               (rule "polySimp_elimOne" (formula "16") (term "1,1,1"))
               (rule "polySimp_sepPosMonomial" (formula "7") (term "1"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,1"))
               (rule "polySimp_rightDist" (formula "7") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1"))
               (rule "mul_literals" (formula "7") (term "0,1,1"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1,1"))
               (rule "polySimp_sepPosMonomial" (formula "17") (term "1"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1"))
               (rule "mul_literals" (formula "17") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1"))
               (rule "polySimp_sepPosMonomial" (formula "40") (term "1"))
               (rule "polySimp_mulComm0" (formula "40") (term "1,1"))
               (rule "polySimp_rightDist" (formula "40") (term "1,1"))
               (rule "mul_literals" (formula "40") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "40") (term "1,1,1"))
               (rule "polySimp_sepPosMonomial" (formula "8") (term "1"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,1"))
               (rule "polySimp_rightDist" (formula "8") (term "1,1"))
               (rule "mul_literals" (formula "8") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1,1"))
               (rule "polySimp_invertEq" (formula "29") (term "0"))
               (rule "mul_literals" (formula "29") (term "1,0"))
               (rule "polySimp_mulLiterals" (formula "29") (term "0,0"))
               (rule "polySimp_elimOne" (formula "29") (term "0,0"))
               (rule "polySimp_sepNegMonomial" (formula "28") (term "1"))
               (rule "polySimp_mulLiterals" (formula "28") (term "0,1"))
               (rule "polySimp_elimOne" (formula "28") (term "0,1"))
               (rule "polySimp_invertEq" (formula "27") (term "1"))
               (rule "polySimp_mulLiterals" (formula "27") (term "0,1"))
               (rule "mul_literals" (formula "27") (term "1,1"))
               (rule "polySimp_elimOne" (formula "27") (term "0,1"))
               (rule "polySimp_invertEq" (formula "25") (term "1"))
               (rule "mul_literals" (formula "25") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "25") (term "0,1"))
               (rule "polySimp_elimOne" (formula "25") (term "0,1"))
               (rule "polySimp_sepNegMonomial" (formula "29") (term "1"))
               (rule "polySimp_mulLiterals" (formula "29") (term "0,1"))
               (rule "polySimp_elimOne" (formula "29") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "14"))
               (rule "mul_literals" (formula "14") (term "1"))
               (rule "inEqSimp_contradEq7" (formula "27") (term "1") (ifseqformula "14"))
               (rule "mul_literals" (formula "27") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "27") (term "0,0,1"))
               (rule "leq_literals" (formula "27") (term "0,1"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "true_left" (formula "26"))
               (rule "inEqSimp_contradEq7" (formula "28") (term "0") (ifseqformula "14"))
               (rule "mul_literals" (formula "28") (term "1,0,0,0"))
               (rule "add_zero_right" (formula "28") (term "0,0,0"))
               (rule "leq_literals" (formula "28") (term "0,0"))
                (builtin "One Step Simplification" (formula "28"))
               (rule "applyEqReverse" (formula "40") (term "0,1,0") (ifseqformula "28"))
               (rule "applyEqReverse" (formula "36") (term "0,1") (ifseqformula "28"))
               (rule "applyEqReverse" (formula "27") (term "1,1") (ifseqformula "28"))
                (builtin "One Step Simplification" (formula "27"))
               (rule "true_left" (formula "27"))
               (rule "applyEqReverse" (formula "39") (term "1,1,1") (ifseqformula "27"))
               (rule "applyEqReverse" (formula "38") (term "1,1,1") (ifseqformula "27"))
               (rule "applyEqReverse" (formula "37") (term "0,1") (ifseqformula "27"))
               (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "27"))
               (rule "hideAuxiliaryEq" (formula "27"))
               (rule "polySimp_homoEq" (formula "38") (term "1"))
               (rule "polySimp_homoEq" (formula "37") (term "1"))
               (rule "polySimp_addComm1" (formula "38") (term "0,1"))
               (rule "polySimp_addComm1" (formula "37") (term "0,1"))
               (rule "polySimp_sepPosMonomial" (formula "38") (term "1"))
               (rule "polySimp_mulComm0" (formula "38") (term "1,1"))
               (rule "polySimp_rightDist" (formula "38") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1"))
               (rule "mul_literals" (formula "38") (term "0,1,1"))
               (rule "polySimp_elimOne" (formula "38") (term "1,1,1"))
               (rule "polySimp_sepPosMonomial" (formula "37") (term "1"))
               (rule "polySimp_mulComm0" (formula "37") (term "1,1"))
               (rule "polySimp_rightDist" (formula "37") (term "1,1"))
               (rule "mul_literals" (formula "37") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "37") (term "1,1,1"))
               (rule "inEqSimp_contradEq7" (formula "25") (term "1") (ifseqformula "14"))
               (rule "mul_literals" (formula "25") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "25") (term "0,0,1"))
               (rule "leq_literals" (formula "25") (term "0,1"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "notLeft" (formula "25"))
               (rule "replace_known_right" (formula "24") (term "0,0,0,0,0") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "replace_known_right" (formula "30") (term "0,0,0,0,0") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "30"))
               (rule "replace_known_right" (formula "23") (term "0,0,0,0,0") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "23"))
               (rule "replace_known_right" (formula "26") (term "0,0,0,0,0") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "replace_known_right" (formula "36") (term "1,0") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "replace_known_right" (formula "37") (term "0,0") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "replace_known_right" (formula "35") (term "0,0") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "replace_known_right" (formula "33") (term "1,0") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "33"))
               (rule "replace_known_right" (formula "34") (term "1,0") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "14"))
               (rule "leq_literals" (formula "29") (term "0"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "true_left" (formula "29"))
               (rule "Class_invariant_axiom_for_case_study_SortedListNode" (formula "42") (ifseqformula "41"))
               (rule "closeTrue" (formula "42"))
            )
         )
         (branch
             (builtin "One Step Simplification" (formula "46"))
            (rule "closeTrue" (formula "46"))
         )
      )
      (branch
          (builtin "One Step Simplification" (formula "46"))
         (rule "allRight" (formula "46") (inst "sk=f_0"))
         (rule "allRight" (formula "46") (inst "sk=o_0"))
         (rule "orRight" (formula "46"))
         (rule "orRight" (formula "46"))
         (rule "eqSymm" (formula "48"))
         (rule "polySimp_homoEq" (formula "17") (term "1"))
         (rule "polySimp_homoEq" (formula "28") (term "1"))
         (rule "polySimp_homoEq" (formula "41") (term "1"))
         (rule "polySimp_homoEq" (formula "40") (term "1"))
         (rule "polySimp_homoEq" (formula "7") (term "1"))
         (rule "polySimp_homoEq" (formula "29") (term "1"))
         (rule "polySimp_homoEq" (formula "8") (term "1"))
         (rule "polySimp_homoEq" (formula "16") (term "1"))
         (rule "polySimp_homoEq" (formula "27") (term "1"))
         (rule "polySimp_homoEq" (formula "25") (term "1"))
         (rule "polySimp_homoEq" (formula "29") (term "0"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,0,1"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,0,1"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,0,1"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,1"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "17") (term "0,1"))
         (rule "polySimp_addComm1" (formula "41") (term "0,1"))
         (rule "polySimp_addComm1" (formula "40") (term "0,1"))
         (rule "polySimp_addComm1" (formula "7") (term "0,1"))
         (rule "polySimp_addComm1" (formula "8") (term "0,1"))
         (rule "polySimp_addComm1" (formula "16") (term "0,1"))
         (rule "polySimp_rightDist" (formula "28") (term "1,0,1"))
         (rule "mul_literals" (formula "28") (term "0,1,0,1"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0,1"))
         (rule "mul_literals" (formula "29") (term "0,1,0,1"))
         (rule "polySimp_rightDist" (formula "27") (term "1,0,1"))
         (rule "mul_literals" (formula "27") (term "0,1,0,1"))
         (rule "polySimp_rightDist" (formula "25") (term "1,0,1"))
         (rule "mul_literals" (formula "25") (term "0,1,0,1"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0,0"))
         (rule "mul_literals" (formula "29") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "28") (term "0,1"))
         (rule "polySimp_addComm1" (formula "28") (term "0,0,1"))
         (rule "add_literals" (formula "28") (term "0,0,0,1"))
         (rule "add_zero_left" (formula "28") (term "0,0,1"))
         (rule "inEqSimp_gtToGeq" (formula "33"))
         (rule "times_zero_1" (formula "33") (term "1,0,0"))
         (rule "add_zero_right" (formula "33") (term "0,0"))
         (rule "inEqSimp_gtToGeq" (formula "14"))
         (rule "times_zero_1" (formula "14") (term "1,0,0"))
         (rule "add_zero_right" (formula "14") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "29") (term "0,1"))
         (rule "polySimp_addComm1" (formula "29") (term "0,0,1"))
         (rule "add_literals" (formula "29") (term "0,0,0,1"))
         (rule "add_zero_left" (formula "29") (term "0,0,1"))
         (rule "polySimp_addAssoc" (formula "27") (term "0,1"))
         (rule "add_literals" (formula "27") (term "0,0,1"))
         (rule "add_zero_left" (formula "27") (term "0,1"))
         (rule "polySimp_addAssoc" (formula "25") (term "0,1"))
         (rule "add_literals" (formula "25") (term "0,0,1"))
         (rule "add_zero_left" (formula "25") (term "0,1"))
         (rule "polySimp_addAssoc" (formula "29") (term "0,0"))
         (rule "add_literals" (formula "29") (term "0,0,0"))
         (rule "add_zero_left" (formula "29") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "33") (term "0"))
         (rule "add_literals" (formula "33") (term "0,0"))
         (rule "add_zero_left" (formula "33") (term "0"))
         (rule "polySimp_sepPosMonomial" (formula "17") (term "1"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,1"))
         (rule "polySimp_rightDist" (formula "17") (term "1,1"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1"))
         (rule "mul_literals" (formula "17") (term "0,1,1"))
         (rule "polySimp_elimOne" (formula "17") (term "1,1,1"))
         (rule "polySimp_sepPosMonomial" (formula "41") (term "1"))
         (rule "polySimp_mulComm0" (formula "41") (term "1,1"))
         (rule "polySimp_rightDist" (formula "41") (term "1,1"))
         (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1"))
         (rule "mul_literals" (formula "41") (term "0,1,1"))
         (rule "polySimp_elimOne" (formula "41") (term "1,1,1"))
         (rule "polySimp_sepPosMonomial" (formula "40") (term "1"))
         (rule "polySimp_mulComm0" (formula "40") (term "1,1"))
         (rule "polySimp_rightDist" (formula "40") (term "1,1"))
         (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1"))
         (rule "mul_literals" (formula "40") (term "0,1,1"))
         (rule "polySimp_elimOne" (formula "40") (term "1,1,1"))
         (rule "polySimp_sepPosMonomial" (formula "7") (term "1"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,1"))
         (rule "polySimp_rightDist" (formula "7") (term "1,1"))
         (rule "mul_literals" (formula "7") (term "0,1,1"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,1"))
         (rule "polySimp_sepPosMonomial" (formula "8") (term "1"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,1"))
         (rule "polySimp_rightDist" (formula "8") (term "1,1"))
         (rule "mul_literals" (formula "8") (term "0,1,1"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,1"))
         (rule "polySimp_sepPosMonomial" (formula "16") (term "1"))
         (rule "polySimp_mulComm0" (formula "16") (term "1,1"))
         (rule "polySimp_rightDist" (formula "16") (term "1,1"))
         (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1"))
         (rule "mul_literals" (formula "16") (term "0,1,1"))
         (rule "polySimp_elimOne" (formula "16") (term "1,1,1"))
         (rule "polySimp_sepNegMonomial" (formula "28") (term "1"))
         (rule "polySimp_mulLiterals" (formula "28") (term "0,1"))
         (rule "polySimp_elimOne" (formula "28") (term "0,1"))
         (rule "polySimp_sepNegMonomial" (formula "29") (term "1"))
         (rule "polySimp_mulLiterals" (formula "29") (term "0,1"))
         (rule "polySimp_elimOne" (formula "29") (term "0,1"))
         (rule "polySimp_invertEq" (formula "27") (term "1"))
         (rule "polySimp_mulLiterals" (formula "27") (term "0,1"))
         (rule "mul_literals" (formula "27") (term "1,1"))
         (rule "polySimp_elimOne" (formula "27") (term "0,1"))
         (rule "polySimp_invertEq" (formula "25") (term "1"))
         (rule "polySimp_mulLiterals" (formula "25") (term "0,1"))
         (rule "times_zero_2" (formula "25") (term "1,1"))
         (rule "polySimp_elimOne" (formula "25") (term "0,1"))
         (rule "polySimp_invertEq" (formula "29") (term "0"))
         (rule "polySimp_mulLiterals" (formula "29") (term "0,0"))
         (rule "mul_literals" (formula "29") (term "1,0"))
         (rule "polySimp_elimOne" (formula "29") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "14"))
         (rule "mul_literals" (formula "14") (term "1"))
         (rule "inEqSimp_contradEq7" (formula "29") (term "0") (ifseqformula "14"))
         (rule "mul_literals" (formula "29") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "29") (term "0,0,0"))
         (rule "leq_literals" (formula "29") (term "0,0"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "applyEqReverse" (formula "40") (term "1,1,1") (ifseqformula "29"))
         (rule "applyEqReverse" (formula "41") (term "0,1,0") (ifseqformula "29"))
         (rule "applyEqReverse" (formula "37") (term "0,1") (ifseqformula "29"))
         (rule "applyEqReverse" (formula "28") (term "1,1") (ifseqformula "29"))
          (builtin "One Step Simplification" (formula "28"))
         (rule "true_left" (formula "28"))
         (rule "applyEqReverse" (formula "38") (term "0,1") (ifseqformula "28"))
         (rule "applyEqReverse" (formula "23") (term "1") (ifseqformula "28"))
         (rule "applyEqReverse" (formula "40") (term "1,1,1") (ifseqformula "28"))
         (rule "hideAuxiliaryEq" (formula "28"))
         (rule "polySimp_homoEq" (formula "38") (term "1"))
         (rule "polySimp_homoEq" (formula "39") (term "1"))
         (rule "polySimp_addComm1" (formula "38") (term "0,1"))
         (rule "polySimp_addComm1" (formula "39") (term "0,1"))
         (rule "polySimp_sepPosMonomial" (formula "38") (term "1"))
         (rule "polySimp_mulComm0" (formula "38") (term "1,1"))
         (rule "polySimp_rightDist" (formula "38") (term "1,1"))
         (rule "mul_literals" (formula "38") (term "0,1,1"))
         (rule "polySimp_mulLiterals" (formula "38") (term "1,1,1"))
         (rule "polySimp_elimOne" (formula "38") (term "1,1,1"))
         (rule "polySimp_sepPosMonomial" (formula "39") (term "1"))
         (rule "polySimp_mulComm0" (formula "39") (term "1,1"))
         (rule "polySimp_rightDist" (formula "39") (term "1,1"))
         (rule "mul_literals" (formula "39") (term "0,1,1"))
         (rule "polySimp_mulLiterals" (formula "39") (term "1,1,1"))
         (rule "polySimp_elimOne" (formula "39") (term "1,1,1"))
         (rule "inEqSimp_contradEq7" (formula "27") (term "1") (ifseqformula "14"))
         (rule "mul_literals" (formula "27") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "27") (term "0,0,1"))
         (rule "leq_literals" (formula "27") (term "0,1"))
          (builtin "One Step Simplification" (formula "27"))
         (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "27"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "true_left" (formula "26"))
         (rule "inEqSimp_contradEq7" (formula "25") (term "1") (ifseqformula "14"))
         (rule "mul_literals" (formula "25") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "25") (term "0,0,1"))
         (rule "leq_literals" (formula "25") (term "0,1"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "notLeft" (formula "25"))
         (rule "replace_known_right" (formula "30") (term "0,0,0,0,0") (ifseqformula "41"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "replace_known_right" (formula "26") (term "0,0,0,0,0") (ifseqformula "41"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "replace_known_right" (formula "23") (term "0,0,0,0,0") (ifseqformula "41"))
          (builtin "One Step Simplification" (formula "23"))
         (rule "replace_known_right" (formula "24") (term "0,0,0,0,0") (ifseqformula "41"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "replace_known_right" (formula "37") (term "0,0") (ifseqformula "41"))
          (builtin "One Step Simplification" (formula "37"))
         (rule "replace_known_right" (formula "33") (term "1,0") (ifseqformula "41"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "replace_known_right" (formula "36") (term "1,0") (ifseqformula "41"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "replace_known_right" (formula "34") (term "1,0") (ifseqformula "41"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "replace_known_right" (formula "35") (term "0,0") (ifseqformula "41"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "inEqSimp_subsumption1" (formula "29") (ifseqformula "14"))
         (rule "leq_literals" (formula "29") (term "0"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "true_left" (formula "29"))
         (rule "pullOutSelect" (formula "44") (term "0") (inst "selectSK=f_0_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
         (rule "eqSymm" (formula "45"))
         (rule "commute_and_2" (formula "43"))
         (rule "commute_and" (formula "43") (term "0"))
         (rule "commute_and_2" (formula "43"))
         (rule "commute_and" (formula "1") (term "0,0"))
         (rule "cut_direct" (formula "16") (term "0,0"))
         (branch "CUT: self.tail = null TRUE"
             (builtin "One Step Simplification" (formula "17"))
            (rule "true_left" (formula "17"))
            (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "true_left" (formula "34"))
            (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "true_left" (formula "32"))
            (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "29"))
            (rule "true_left" (formula "29"))
            (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "true_left" (formula "13"))
            (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "true_left" (formula "13"))
            (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "true_left" (formula "13"))
            (rule "applyEq" (formula "11") (term "0") (ifseqformula "7"))
            (rule "qeq_literals" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "applyEq" (formula "9") (term "1,0") (ifseqformula "11"))
            (rule "applyEq" (formula "25") (term "0,1") (ifseqformula "7"))
            (rule "polySimp_homoEq" (formula "25") (term "1"))
            (rule "mul_literals" (formula "25") (term "1,0,1"))
            (rule "polySimp_addComm1" (formula "25") (term "0,1"))
            (rule "add_literals" (formula "25") (term "0,0,1"))
            (rule "add_zero_left" (formula "25") (term "0,1"))
            (rule "applyEq" (formula "10") (term "1") (ifseqformula "11"))
            (rule "applyEq" (formula "27") (term "1,1") (ifseqformula "7"))
            (rule "add_literals" (formula "27") (term "1"))
            (rule "applyEq" (formula "15") (term "1") (ifseqformula "7"))
            (rule "ifEqualsInteger" (formula "15"))
            (rule "commute_and" (formula "15") (term "0"))
            (rule "orLeft" (formula "15"))
            (branch " self.tail.size@anon_heap___insertHead_trampoline«anonHeapFunction» = 1 ∧ ( self.tail@anon_heap___insertHead_trampoline«anonHeapFunction» = self ∨ ¬ (self.tail@anon_heap___insertHead_trampoline«anonHeapFunction»).<created> = TRUE)"
               (rule "andLeft" (formula "15"))
               (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "replace_known_left" (formula "17") (term "0,0") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "applyEqReverse" (formula "18") (term "1") (ifseqformula "17"))
               (rule "applyEqReverse" (formula "25") (term "1,1") (ifseqformula "17"))
               (rule "hideAuxiliaryEq" (formula "17"))
               (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "applyEqReverse" (formula "22") (term "1,0,1,0,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "22") (term "1,1,0,0,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "23") (term "1,2,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "22") (term "1,1,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "23") (term "1,0,0,1,1,0,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "23") (term "1,1,0,0,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "23") (term "1,1,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "22") (term "1,2,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "22") (term "0,0,0,0,0,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "22") (term "1,0,0,1,1,0,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "23") (term "0,0,0,0,0,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "23") (term "1,0,1,0,0") (ifseqformula "21"))
               (rule "hideAuxiliaryEq" (formula "21"))
               (rule "eqSymm" (formula "21") (term "0,1,0,0"))
               (rule "eqSymm" (formula "21") (term "1,0,0,0"))
               (rule "eqSymm" (formula "22") (term "1,0,0,0"))
               (rule "eqSymm" (formula "22") (term "0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "17"))
               (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
               (rule "cut_direct" (formula "31") (term "0,0"))
               (branch "CUT: o_0 = null TRUE"
                  (rule "typeEqDerived" (formula "31") (term "0,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "32"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "false_right" (formula "32"))
                  (rule "applyEq" (formula "2") (term "1,1,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "32") (term "1,0") (ifseqformula "1"))
                  (rule "applyEqRigid" (formula "2") (term "1,2,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "31") (term "0,1,0,1") (ifseqformula "1"))
                  (rule "castDel" (formula "31") (term "1,0,1"))
                  (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                  (rule "eqSymm" (formula "2") (term "1,0,0"))
                  (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "30"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "32")))
                  (rule "closeFalse" (formula "2"))
               )
               (branch "CUT: o_0 = null FALSE"
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "notRight" (formula "32"))
                  (rule "ifthenelse_split" (formula "2") (term "0"))
                  (branch "¬f_0 = java.lang.Object::<created> ∧ o_0 = self TRUE"
                     (rule "andLeft" (formula "2"))
                     (rule "typeEqDerived" (formula "33") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "33"))
                     (rule "notLeft" (formula "2"))
                     (rule "applyEqReverse" (formula "35") (term "1") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "eqSymm" (formula "34"))
                     (rule "applyEq" (formula "32") (term "0,1,0,1") (ifseqformula "2"))
                     (rule "castDel" (formula "32") (term "1,0,1"))
                     (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "5"))
                      (builtin "One Step Simplification" (formula "32"))
                     (rule "notRight" (formula "32"))
                     (rule "applyEq" (formula "34") (term "1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "34") (term "1,1") (ifseqformula "3"))
                     (rule "applyEq" (formula "33") (term "0") (ifseqformula "3"))
                     (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "2"))
                     (rule "castDel" (formula "1") (term "0"))
                     (rule "close" (formula "31") (ifseqformula "1"))
                  )
                  (branch "¬f_0 = java.lang.Object::<created> ∧ o_0 = self FALSE"
                     (rule "close" (formula "34") (ifseqformula "2"))
                  )
               )
            )
            (branch " ¬( self.tail@anon_heap___insertHead_trampoline«anonHeapFunction» = self ∨ ¬ (self.tail@anon_heap___insertHead_trampoline«anonHeapFunction»).<created> = TRUE) ∧ (self.tail@anon_heap___insertHead_trampoline«anonHeapFunction»).size = 1"
               (rule "andLeft" (formula "15"))
               (rule "notLeft" (formula "15"))
               (rule "orRight" (formula "29"))
               (rule "notRight" (formula "30"))
               (rule "replace_known_right" (formula "19") (term "0,0,0") (ifseqformula "30"))
                (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")))
               (rule "replace_known_left" (formula "17") (term "0,1,0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "30")))
               (rule "applyEqReverse" (formula "18") (term "1") (ifseqformula "17"))
               (rule "applyEqReverse" (formula "25") (term "1,1") (ifseqformula "17"))
               (rule "hideAuxiliaryEq" (formula "17"))
               (rule "replace_known_right" (formula "21") (term "0,0,0") (ifseqformula "29"))
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "1")))
               (rule "applyEqReverse" (formula "22") (term "1,1,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "22") (term "1,1,0,0,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "22") (term "1,0,0,1,1,0,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "23") (term "1,2,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "23") (term "1,1,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "22") (term "1,2,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "22") (term "1,0,1,0,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "25") (term "0,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "23") (term "1,0,0,1,1,0,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "23") (term "1,0,1,0,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "22") (term "0,0,0,0,0,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "23") (term "1,1,0,0,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "24") (term "0,0") (ifseqformula "21"))
               (rule "applyEqReverse" (formula "23") (term "0,0,0,0,0,0") (ifseqformula "21"))
               (rule "hideAuxiliaryEq" (formula "21"))
               (rule "eqSymm" (formula "21") (term "1,0,0,0"))
               (rule "eqSymm" (formula "21") (term "0,1,0,0"))
               (rule "eqSymm" (formula "22") (term "0,1,0,0"))
               (rule "eqSymm" (formula "22") (term "1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "17"))
               (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
               (rule "cut_direct" (formula "32") (term "0,0"))
               (branch "CUT: o_0 = null TRUE"
                  (rule "typeEqDerived" (formula "32") (term "0,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "33"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "false_right" (formula "33"))
                  (rule "applyEq" (formula "32") (term "0,0,0,0") (ifseqformula "1"))
                  (rule "castDel" (formula "32") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "32"))
                  (rule "false_right" (formula "32"))
                  (rule "applyEq" (formula "3") (term "1,2,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "1"))
                  (rule "applyEqRigid" (formula "32") (term "1,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "3") (term "0,1,0,0") (ifseqformula "1"))
                  (rule "eqSymm" (formula "3") (term "1,0,0"))
                  (rule "replace_known_right" (formula "3") (term "1,0,0") (ifseqformula "31"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "32")))
                  (rule "closeFalse" (formula "3"))
               )
               (branch "CUT: o_0 = null FALSE"
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "notRight" (formula "33"))
                  (rule "ifthenelse_split" (formula "3") (term "0"))
                  (branch "¬f_0 = java.lang.Object::<created> ∧ o_0 = self TRUE"
                     (rule "andLeft" (formula "3"))
                     (rule "typeEqDerived" (formula "34") (term "0,0,0") (ifseqformula "4"))
                      (builtin "One Step Simplification" (formula "34"))
                     (rule "notLeft" (formula "3"))
                     (rule "applyEqReverse" (formula "36") (term "1") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "eqSymm" (formula "35"))
                     (rule "applyEq" (formula "35") (term "1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "33") (term "0,0,0,0") (ifseqformula "3"))
                     (rule "castDel" (formula "33") (term "0,0,0"))
                     (rule "replace_known_right" (formula "33") (term "0,0") (ifseqformula "32"))
                      (builtin "One Step Simplification" (formula "33"))
                     (rule "applyEq" (formula "35") (term "1,1") (ifseqformula "3"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "33") (term "0") (ifseqformula "2"))
                     (rule "applyEq" (formula "32") (term "0,1,0") (ifseqformula "2"))
                     (rule "castDel" (formula "32") (term "1,0"))
                     (rule "close" (formula "32") (ifseqformula "5"))
                  )
                  (branch "¬f_0 = java.lang.Object::<created> ∧ o_0 = self FALSE"
                     (rule "close" (formula "35") (ifseqformula "3"))
                  )
               )
            )
         )
         (branch "CUT: self.tail = null FALSE"
             (builtin "One Step Simplification" (formula "16"))
            (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "41"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "40"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "40"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "7"))
            (rule "polySimp_homoEq" (formula "15") (term "0"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "15") (term "1,0,0"))
            (rule "mul_literals" (formula "15") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "15") (term "0,0"))
            (rule "add_literals" (formula "15") (term "0,0,0"))
            (rule "applyEq" (formula "13") (term "0,1") (ifseqformula "7"))
            (rule "polySimp_homoEq" (formula "13") (term "1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,1"))
            (rule "mul_literals" (formula "13") (term "0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,1"))
            (rule "add_literals" (formula "13") (term "0,0,1"))
            (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "7"))
            (rule "polySimp_homoEq" (formula "17") (term "0"))
            (rule "polySimp_mulComm0" (formula "17") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "17") (term "1,0,0"))
            (rule "mul_literals" (formula "17") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "17") (term "0,0"))
            (rule "add_literals" (formula "17") (term "0,0,0"))
            (rule "applyEq" (formula "15") (term "1,1,1") (ifseqformula "7"))
            (rule "polySimp_addAssoc" (formula "15") (term "1,1"))
            (rule "add_literals" (formula "15") (term "0,1,1"))
            (rule "applyEq" (formula "14") (term "1,1,1") (ifseqformula "7"))
            (rule "polySimp_addAssoc" (formula "14") (term "1,1"))
            (rule "add_literals" (formula "14") (term "0,1,1"))
            (rule "polySimp_sepNegMonomial" (formula "15") (term "0"))
            (rule "polySimp_mulLiterals" (formula "15") (term "0,0"))
            (rule "polySimp_elimOne" (formula "15") (term "0,0"))
            (rule "polySimp_sepNegMonomial" (formula "13") (term "1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "0,1"))
            (rule "polySimp_elimOne" (formula "13") (term "0,1"))
            (rule "polySimp_sepNegMonomial" (formula "17") (term "0"))
            (rule "polySimp_mulLiterals" (formula "17") (term "0,0"))
            (rule "polySimp_elimOne" (formula "17") (term "0,0"))
            (rule "cut_direct" (formula "42") (term "0,0"))
            (branch "CUT: o_0 = null TRUE"
               (rule "typeEqDerived" (formula "42") (term "0,0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "43"))
                (builtin "One Step Simplification" (formula "42"))
               (rule "false_right" (formula "43"))
               (rule "applyEqRigid" (formula "42") (term "0,0,0,0") (ifseqformula "1"))
               (rule "castDel" (formula "42") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "42"))
               (rule "false_right" (formula "42"))
               (rule "applyEq" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
               (rule "eqSymm" (formula "2") (term "1,0,0"))
               (rule "replace_known_right" (formula "2") (term "1,0,0") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "42")))
               (rule "closeFalse" (formula "2"))
            )
            (branch "CUT: o_0 = null FALSE"
                (builtin "One Step Simplification" (formula "43"))
               (rule "notRight" (formula "43"))
               (rule "ifthenelse_split" (formula "28") (term "0"))
               (branch " self.tail@anon_heap___insertHead_trampoline«anonHeapFunction» = self ∨ ¬ (self.tail@anon_heap___insertHead_trampoline«anonHeapFunction»).<created> = TRUE TRUE"
                  (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "30") (term "1,0,0,1,1,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "32") (term "0,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "30") (term "1,0,1,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "33") (term "0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "31") (term "1,0,1,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "30") (term "1,1,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "30") (term "1,2,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "31") (term "1,1,0,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "31") (term "1,1,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "31") (term "0,0,0,0,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "31") (term "1,0,0,1,1,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "30") (term "1,1,0,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "31") (term "1,2,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "35") (term "0,0") (ifseqformula "29"))
                  (rule "hideAuxiliaryEq" (formula "29"))
                  (rule "eqSymm" (formula "29") (term "0,1,0,0"))
                  (rule "eqSymm" (formula "30") (term "0,1,0,0"))
                  (rule "eqSymm" (formula "30") (term "1,0,0,0"))
                  (rule "eqSymm" (formula "29") (term "1,0,0,0"))
                  (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "23"))
                  (rule "applyEqReverse" (formula "24") (term "1") (ifseqformula "23"))
                  (rule "applyEqReverse" (formula "32") (term "1,1") (ifseqformula "23"))
                  (rule "hideAuxiliaryEq" (formula "23"))
                  (rule "replace_known_left" (formula "24") (term "0,0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_commuteGeq" (formula "32") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "23"))
                  (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                  (rule "commute_or" (formula "32"))
                  (rule "ifthenelse_split" (formula "2") (term "0"))
                  (branch "¬f_0 = java.lang.Object::<created> ∧ o_0 = self TRUE"
                     (rule "andLeft" (formula "2"))
                     (rule "typeEqDerived" (formula "43") (term "0,0,0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "43"))
                     (rule "notLeft" (formula "2"))
                     (rule "applyEqReverse" (formula "45") (term "1") (ifseqformula "3"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "eqSymm" (formula "44"))
                     (rule "applyEq" (formula "42") (term "0,0,0,0") (ifseqformula "2"))
                     (rule "castDel" (formula "42") (term "0,0,0"))
                     (rule "replace_known_right" (formula "42") (term "0,0") (ifseqformula "41"))
                      (builtin "One Step Simplification" (formula "42"))
                     (rule "applyEq" (formula "44") (term "1,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "44") (term "1,1") (ifseqformula "2"))
                     (rule "applyEq" (formula "43") (term "0") (ifseqformula "2"))
                     (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "41") (term "0,1,0") (ifseqformula "1"))
                     (rule "castDel" (formula "41") (term "1,0"))
                     (rule "close" (formula "41") (ifseqformula "4"))
                  )
                  (branch "¬f_0 = java.lang.Object::<created> ∧ o_0 = self FALSE"
                     (rule "close" (formula "44") (ifseqformula "2"))
                  )
               )
               (branch " self.tail@anon_heap___insertHead_trampoline«anonHeapFunction» = self ∨ ¬ (self.tail@anon_heap___insertHead_trampoline«anonHeapFunction»).<created> = TRUE FALSE"
                  (rule "orRight" (formula "39"))
                  (rule "notRight" (formula "40"))
                  (rule "applyEqReverse" (formula "31") (term "1,2,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "31") (term "1,1,0,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "35") (term "0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "30") (term "1,0,0,1,1,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "33") (term "0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "31") (term "1,1,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "32") (term "0,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "30") (term "1,2,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "30") (term "0,0,0,0,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "30") (term "1,1,0,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "31") (term "1,0,0,1,1,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "30") (term "1,1,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "30") (term "1,0,1,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "31") (term "1,0,1,0,0") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "31") (term "0,0,0,0,0,0") (ifseqformula "29"))
                  (rule "hideAuxiliaryEq" (formula "29"))
                  (rule "eqSymm" (formula "30") (term "1,0,0,0"))
                  (rule "eqSymm" (formula "29") (term "1,0,0,0"))
                  (rule "eqSymm" (formula "29") (term "0,1,0,0"))
                  (rule "eqSymm" (formula "30") (term "0,1,0,0"))
                  (rule "replace_known_right" (formula "26") (term "0,0,0") (ifseqformula "39"))
                   (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "1")))
                  (rule "replace_known_right" (formula "23") (term "0,0,0") (ifseqformula "39"))
                   (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "1")))
                  (rule "replace_known_left" (formula "24") (term "0,1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "39")))
                  (rule "applyEqReverse" (formula "32") (term "1,1") (ifseqformula "24"))
                  (rule "applyEqReverse" (formula "33") (term "1,0") (ifseqformula "24"))
                  (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "24"))
                  (rule "hideAuxiliaryEq" (formula "24"))
                  (rule "inEqSimp_commuteGeq" (formula "31") (term "1"))
                  (rule "inEqSimp_commuteGeq" (formula "32") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "24"))
                  (rule "commute_or" (formula "32"))
                  (rule "ifthenelse_split" (formula "3") (term "0"))
                  (branch "¬f_0 = java.lang.Object::<created> ∧ o_0 = self TRUE"
                     (rule "andLeft" (formula "3"))
                     (rule "typeEqDerived" (formula "44") (term "0,0,0") (ifseqformula "4"))
                      (builtin "One Step Simplification" (formula "44"))
                     (rule "notLeft" (formula "3"))
                     (rule "applyEqReverse" (formula "46") (term "1") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "eqSymm" (formula "45"))
                     (rule "applyEq" (formula "43") (term "0,0,0,0") (ifseqformula "3"))
                     (rule "castDel" (formula "43") (term "0,0,0"))
                     (rule "replace_known_right" (formula "43") (term "0,0") (ifseqformula "42"))
                      (builtin "One Step Simplification" (formula "43"))
                     (rule "applyEq" (formula "45") (term "1,1") (ifseqformula "3"))
                     (rule "applyEq" (formula "45") (term "1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "44") (term "0") (ifseqformula "3"))
                     (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "42") (term "0,1,0") (ifseqformula "2"))
                     (rule "castDel" (formula "42") (term "1,0"))
                     (rule "close" (formula "42") (ifseqformula "5"))
                  )
                  (branch "¬f_0 = java.lang.Object::<created> ∧ o_0 = self FALSE"
                     (rule "close" (formula "45") (ifseqformula "3"))
                  )
               )
            )
         )
      )
   )
   (branch "Exceptional Post (__insertHead_trampoline)"
       (builtin "One Step Simplification" (formula "21"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "24"))
      (rule "notLeft" (formula "22"))
      (rule "close" (formula "25") (ifseqformula "24"))
   )
   (branch "Pre (__insertHead_trampoline)"
       (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "2")))
      (rule "polySimp_homoEq" (formula "8") (term "1"))
      (rule "polySimp_homoEq" (formula "17") (term "1"))
      (rule "polySimp_homoEq" (formula "16") (term "1"))
      (rule "polySimp_homoEq" (formula "7") (term "1"))
      (rule "polySimp_addComm1" (formula "8") (term "0,1"))
      (rule "polySimp_addComm1" (formula "17") (term "0,1"))
      (rule "polySimp_addComm1" (formula "16") (term "0,1"))
      (rule "polySimp_addComm1" (formula "7") (term "0,1"))
      (rule "inEqSimp_gtToGeq" (formula "14"))
      (rule "times_zero_1" (formula "14") (term "1,0,0"))
      (rule "add_zero_right" (formula "14") (term "0,0"))
      (rule "inEqSimp_commuteLeq" (formula "21") (term "0"))
      (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "polySimp_sepPosMonomial" (formula "8") (term "1"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,1"))
      (rule "polySimp_rightDist" (formula "8") (term "1,1"))
      (rule "mul_literals" (formula "8") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,1"))
      (rule "polySimp_sepPosMonomial" (formula "17") (term "1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1"))
      (rule "mul_literals" (formula "17") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1"))
      (rule "polySimp_sepPosMonomial" (formula "16") (term "1"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,1"))
      (rule "polySimp_rightDist" (formula "16") (term "1,1"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1"))
      (rule "mul_literals" (formula "16") (term "0,1,1"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,1"))
      (rule "polySimp_sepPosMonomial" (formula "7") (term "1"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,1"))
      (rule "polySimp_rightDist" (formula "7") (term "1,1"))
      (rule "mul_literals" (formula "7") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "14"))
      (rule "mul_literals" (formula "14") (term "1"))
      (rule "Class_invariant_axiom_for_case_study_SortedListNode" (formula "21") (ifseqformula "20"))
      (rule "closeTrue" (formula "21"))
   )
)
(branch "if _newHead <= this.head false"
    (builtin "One Step Simplification" (formula "21"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "elim_double_block_2" (formula "21") (term "1"))
    (builtin "Use Operation Contract" (formula "21") (newnames "heapBefore___insertTail_trampoline,exc_0,heapAfter___insertTail_trampoline,anon_heap___insertTail_trampoline") (contract "case_study.SortedListNode[case_study.SortedListNode::__insertTail_trampoline(int,boolean,boolean)].JML normal_behavior operation contract.0") (modality "diamond"))
   (branch "Post (__insertTail_trampoline)"
       (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "22")) (ifInst ""  (formula "22")) (ifInst ""  (formula "22")) (ifInst ""  (formula "22")))
       (builtin "One Step Simplification" (formula "23"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "24"))
      (rule "andLeft" (formula "22"))
      (rule "andLeft" (formula "23"))
      (rule "polySimp_addComm0" (formula "25") (term "1"))
      (rule "polySimp_addComm0" (formula "22") (term "1,1,1"))
      (rule "pullOutSelect" (formula "24") (term "0") (inst "selectSK=case_study_SortedListNode_head_0"))
      (rule "applyEq" (formula "22") (term "1,1,0,1") (ifseqformula "24"))
      (rule "simplifySelectOfAnonEQ" (formula "24") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "30")) (ifInst ""  (formula "2")))
      (rule "eqSymm" (formula "25"))
      (rule "applyEqReverse" (formula "24") (term "1") (ifseqformula "25"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "applyEqReverse" (formula "22") (term "1,1,0,1") (ifseqformula "25"))
      (rule "hideAuxiliaryEq" (formula "25"))
      (rule "elementOfInfiniteUnion" (formula "24") (term "0,0"))
       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "2")) (ifInst ""  (formula "29")))
      (rule "pullOutSelect" (formula "21") (term "0") (inst "selectSK=java_lang_Object_packed_0"))
      (rule "simplifySelectOfAnonEQ" (formula "21") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "30")) (ifInst ""  (formula "2")))
      (rule "elementOfInfiniteUnion" (formula "21") (term "0,0"))
       (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "2")) (ifInst ""  (formula "30")))
      (rule "applyEqReverse" (formula "22") (term "0") (ifseqformula "21"))
      (rule "hideAuxiliaryEq" (formula "21"))
      (rule "pullOutSelect" (formula "25") (term "0") (inst "selectSK=case_study_SortedListNode_size_0"))
      (rule "applyEq" (formula "22") (term "0,1,0") (ifseqformula "25"))
      (rule "applyEq" (formula "22") (term "0,1,1") (ifseqformula "25"))
      (rule "simplifySelectOfAnonEQ" (formula "25") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "30")) (ifInst ""  (formula "2")))
      (rule "elementOfInfiniteUnion" (formula "25") (term "0,0"))
       (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "2")) (ifInst ""  (formula "30")))
      (rule "applyEqReverse" (formula "22") (term "0,1,1") (ifseqformula "25"))
      (rule "applyEqReverse" (formula "22") (term "0,1,0") (ifseqformula "25"))
      (rule "applyEqReverse" (formula "26") (term "0") (ifseqformula "25"))
      (rule "hideAuxiliaryEq" (formula "25"))
      (rule "applyEq" (formula "22") (term "0,1,1") (ifseqformula "25"))
      (rule "applyEq" (formula "22") (term "0,1,0") (ifseqformula "25"))
      (rule "pullOutSelect" (formula "22") (term "0,0,0,0,1") (inst "selectSK=case_study_SortedListNode_tail_0"))
      (rule "applyEq" (formula "23") (term "1,1,1,1,1") (ifseqformula "22"))
      (rule "applyEq" (formula "23") (term "0,0,0") (ifseqformula "22"))
      (rule "applyEq" (formula "23") (term "1,0,1,0,1") (ifseqformula "22"))
      (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "30")) (ifInst ""  (formula "2")))
      (rule "elementOfInfiniteUnion" (formula "22") (term "0,0"))
       (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "2")) (ifInst ""  (formula "30")))
      (rule "applyEqReverse" (formula "23") (term "1,0,1,0,1") (ifseqformula "22"))
      (rule "applyEqReverse" (formula "23") (term "0,0,0") (ifseqformula "22"))
      (rule "applyEqReverse" (formula "23") (term "1,1,1,1,1") (ifseqformula "22"))
      (rule "applyEqReverse" (formula "23") (term "0,0,0,0,1") (ifseqformula "22"))
      (rule "hideAuxiliaryEq" (formula "22"))
      (rule "pullOutSelect" (formula "22") (term "0,1,0,1") (inst "selectSK=case_study_SortedListNode_head_1"))
      (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "elementOfInfiniteUnion" (formula "22") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "inEqSimp_commuteGeq" (formula "23") (term "1,0,1"))
      (rule "pullOutSelect" (formula "23") (term "1,1,1,1") (inst "selectSK=case_study_SortedListNode_size_1"))
      (rule "simplifySelectOfAnonEQ" (formula "23") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "elementOfInfiniteUnion" (formula "23") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "limit_java_lang_Object__inv_free_" (formula "25"))
      (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "26"))
       (builtin "One Step Simplification" (formula "25"))
      (rule "Free_class_invariant_axiom_for_case_study_SortedListNode" (formula "26") (ifseqformula "32"))
      (rule "replaceKnownSelect_taclet01_2" (formula "26") (term "0,0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet01_3" (formula "26") (term "0,0,1"))
      (rule "replaceKnownSelect_taclet01_4" (formula "26") (term "0,1,1,0"))
      (rule "replaceKnownSelect_taclet01_2" (formula "26") (term "0,0,1,0"))
      (rule "replaceKnownSelect_taclet01_6" (formula "26") (term "1,1,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet01_5" (formula "26") (term "0,1,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet01_3" (formula "26") (term "0,0,1,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet01_7" (formula "26") (term "1,1,0,0"))
      (rule "replaceKnownSelect_taclet01_6" (formula "26") (term "0,0,0,1,1"))
      (rule "replaceKnownSelect_taclet01_2" (formula "26") (term "0,0,0,0,0"))
      (rule "replaceKnownAuxiliaryConstant_taclet01_7" (formula "26") (term "0,0,0,1,1"))
      (rule "replaceKnownSelect_taclet01_6" (formula "26") (term "1,0,1,1,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet01_3" (formula "26") (term "0,0,0,0,0"))
      (rule "replaceKnownSelect_taclet01_6" (formula "26") (term "1,0,1,0,0,0"))
      (rule "replaceKnownSelect_taclet01_6" (formula "26") (term "1,0,1,1,0,1,1"))
      (rule "replaceKnownSelect_taclet01_6" (formula "26") (term "1,1,1,0,1,1,1"))
      (rule "replaceKnownSelect_taclet01_6" (formula "26") (term "1,0,0,1,0,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet01_7" (formula "26") (term "1,0,1,1,1,1"))
      (rule "replaceKnownSelect_taclet01_9" (formula "26") (term "0,1,1,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet01_7" (formula "26") (term "1,0,1,0,0,0"))
      (rule "replaceKnownSelect_taclet01_6" (formula "26") (term "1,1,0,1,0,1,1,1"))
      (rule "replaceKnownSelect_taclet01_6" (formula "26") (term "1,0,0,0,0,1,1,1"))
      (rule "replaceKnownSelect_taclet01_6" (formula "26") (term "1,1,0,1,1,1,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet01_7" (formula "26") (term "1,0,1,1,0,1,1"))
      (rule "replaceKnownSelect_taclet01_9" (formula "26") (term "0,1,1,0,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet01_7" (formula "26") (term "1,1,1,0,1,1,1"))
      (rule "replaceKnownSelect_taclet01_8" (formula "26") (term "1,1,0,1,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet01_7" (formula "26") (term "1,0,0,1,0,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet01_7" (formula "26") (term "1,1,0,1,0,1,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet01_7" (formula "26") (term "1,0,0,0,0,1,1,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet01_7" (formula "26") (term "1,1,0,1,1,1,1,1"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "andLeft" (formula "26"))
      (rule "polySimp_addComm0" (formula "29") (term "1,1,1,1"))
      (rule "applyEq" (formula "28") (term "0,1") (ifseqformula "31"))
      (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "21"))
      (rule "ssubsortDirect" (formula "26") (term "0"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "applyEq" (formula "29") (term "0,0") (ifseqformula "21"))
      (rule "ssubsortDirect" (formula "29") (term "0"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "21"))
      (rule "ssubsortDirect" (formula "28") (term "0"))
       (builtin "One Step Simplification" (formula "28"))
      (rule "pullOutSelect" (formula "26") (term "0") (inst "selectSK=java_lang_Object_packed_1"))
      (rule "simplifySelectOfAnonEQ" (formula "26") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "elementOfInfiniteUnion" (formula "26") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "26"))
      (rule "applyEqRigid" (formula "26") (term "1") (ifseqformula "27"))
      (rule "pullOutSelect" (formula "30") (term "1,1,1,1") (inst "selectSK=case_study_SortedListNode_size_2"))
      (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "elementOfInfiniteUnion" (formula "30") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "pullOutSelect" (formula "31") (term "0,0,1,0") (inst "selectSK=case_study_SortedListNode_tail_1"))
      (rule "applyEq" (formula "30") (term "1,2,0") (ifseqformula "31"))
      (rule "applyEq" (formula "30") (term "1,0,0,1,1,0,0") (ifseqformula "31"))
      (rule "applyEq" (formula "30") (term "0,0,1,0,0,0") (ifseqformula "31"))
      (rule "applyEq" (formula "32") (term "1,0,1,0,1") (ifseqformula "31"))
      (rule "applyEq" (formula "30") (term "1,1,0") (ifseqformula "31"))
      (rule "applyEq" (formula "30") (term "0,0,0,1,0,0") (ifseqformula "31"))
      (rule "applyEq" (formula "30") (term "1,0,0,0,0,0") (ifseqformula "31"))
      (rule "applyEq" (formula "32") (term "0,0,0,0,1") (ifseqformula "31"))
      (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "31"))
      (rule "elementOfInfiniteUnion" (formula "31") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "31"))
      (rule "pullOutSelect" (formula "32") (term "0,1,0,1") (inst "selectSK=case_study_SortedListNode_head_2"))
      (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "32"))
      (rule "elementOfInfiniteUnion" (formula "32") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "32"))
      (rule "Class_invariant_axiom_for_case_study_SortedListNode" (formula "36") (ifseqformula "39"))
      (rule "true_left" (formula "36"))
      (rule "commute_and" (formula "20") (term "0,0,1,0"))
      (rule "cnf_rightDist" (formula "24"))
      (rule "andLeft" (formula "24"))
      (rule "methodCallEmpty" (formula "40") (term "1"))
      (rule "commute_and" (formula "22") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "ifthenelse_negated" (formula "22") (term "0"))
      (rule "commute_and" (formula "23") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "ifthenelse_negated" (formula "23") (term "0"))
      (rule "cnf_rightDist" (formula "34") (term "0"))
      (rule "commute_or" (formula "34") (term "0,0"))
      (rule "commute_or" (formula "34") (term "1,0"))
      (rule "cnf_rightDist" (formula "25"))
      (rule "andLeft" (formula "25"))
      (rule "commute_or" (formula "25"))
      (rule "cnf_rightDist" (formula "24"))
      (rule "andLeft" (formula "24"))
      (rule "commute_or" (formula "24"))
      (rule "cnf_rightDist" (formula "25"))
      (rule "andLeft" (formula "25"))
      (rule "commute_or" (formula "26"))
      (rule "commute_or" (formula "25"))
      (rule "cnf_rightDist" (formula "24"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "commute_or" (formula "24"))
      (rule "commute_and" (formula "30") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "30"))
      (rule "ifthenelse_negated" (formula "30") (term "0"))
      (rule "cnf_rightDist" (formula "37"))
      (rule "andLeft" (formula "37"))
      (rule "cnf_rightDist" (formula "38"))
      (rule "andLeft" (formula "38"))
      (rule "commute_or" (formula "38"))
      (rule "commute_and" (formula "34") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "34"))
      (rule "ifthenelse_negated" (formula "34") (term "0"))
      (rule "commute_and" (formula "35") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "35"))
      (rule "ifthenelse_negated" (formula "35") (term "0"))
      (rule "cnf_rightDist" (formula "37"))
      (rule "andLeft" (formula "37"))
      (rule "commute_or" (formula "37"))
      (rule "cnf_rightDist" (formula "38"))
      (rule "andLeft" (formula "38"))
      (rule "commute_or_2" (formula "39"))
      (rule "commute_or" (formula "38"))
      (rule "cnf_rightDist" (formula "37"))
      (rule "andLeft" (formula "37"))
      (rule "commute_or_2" (formula "38"))
      (rule "shift_paren_or" (formula "37"))
       (builtin "One Step Simplification" (formula "37"))
      (rule "true_left" (formula "37"))
      (rule "commute_or" (formula "37") (term "0"))
      (rule "commute_and" (formula "36") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "36"))
      (rule "ifthenelse_negated" (formula "36") (term "0"))
      (rule "tryEmpty" (formula "47") (term "1"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,0") (ifseqformula "1"))
      (rule "emptyModality" (formula "48") (term "1"))
      (rule "andRight" (formula "48"))
      (branch
         (rule "andRight" (formula "48"))
         (branch
            (rule "andRight" (formula "48"))
            (branch
                (builtin "One Step Simplification" (formula "48"))
               (rule "replaceKnownSelect_taclet01_4" (formula "48") (term "0"))
               (rule "replaceKnownAuxiliaryConstant_taclet01_5" (formula "48") (term "0"))
               (rule "close" (formula "48") (ifseqformula "44"))
            )
            (branch
                (builtin "One Step Simplification" (formula "48"))
               (rule "polySimp_homoEq" (formula "6") (term "1"))
               (rule "polySimp_homoEq" (formula "29") (term "1"))
               (rule "polySimp_homoEq" (formula "17") (term "1"))
               (rule "polySimp_homoEq" (formula "16") (term "1"))
               (rule "polySimp_homoEq" (formula "28") (term "1"))
               (rule "polySimp_homoEq" (formula "41") (term "1"))
               (rule "polySimp_homoEq" (formula "7") (term "1"))
               (rule "polySimp_homoEq" (formula "25") (term "1"))
               (rule "polySimp_homoEq" (formula "42") (term "1"))
               (rule "polySimp_homoEq" (formula "29") (term "0"))
               (rule "polySimp_homoEq" (formula "27") (term "1"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,0,1"))
               (rule "polySimp_mulComm0" (formula "28") (term "1,0,1"))
               (rule "polySimp_mulComm0" (formula "25") (term "1,0,1"))
               (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
               (rule "polySimp_mulComm0" (formula "27") (term "1,0,1"))
               (rule "polySimp_addComm1" (formula "6") (term "0,1"))
               (rule "polySimp_addComm1" (formula "17") (term "0,1"))
               (rule "polySimp_addComm1" (formula "16") (term "0,1"))
               (rule "polySimp_addComm1" (formula "41") (term "0,1"))
               (rule "polySimp_addComm1" (formula "7") (term "0,1"))
               (rule "polySimp_addComm1" (formula "42") (term "0,1"))
               (rule "polySimp_rightDist" (formula "29") (term "1,0,1"))
               (rule "mul_literals" (formula "29") (term "0,1,0,1"))
               (rule "polySimp_rightDist" (formula "28") (term "1,0,1"))
               (rule "mul_literals" (formula "28") (term "0,1,0,1"))
               (rule "polySimp_rightDist" (formula "25") (term "1,0,1"))
               (rule "mul_literals" (formula "25") (term "0,1,0,1"))
               (rule "polySimp_rightDist" (formula "29") (term "1,0,0"))
               (rule "mul_literals" (formula "29") (term "0,1,0,0"))
               (rule "polySimp_rightDist" (formula "27") (term "1,0,1"))
               (rule "mul_literals" (formula "27") (term "0,1,0,1"))
               (rule "inEqSimp_geqRight" (formula "46"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "polySimp_addAssoc" (formula "30") (term "0,1"))
               (rule "polySimp_addComm1" (formula "30") (term "0,0,1"))
               (rule "add_literals" (formula "30") (term "0,0,0,1"))
               (rule "add_zero_left" (formula "30") (term "0,0,1"))
               (rule "polySimp_addAssoc" (formula "29") (term "0,1"))
               (rule "polySimp_addComm1" (formula "29") (term "0,0,1"))
               (rule "add_literals" (formula "29") (term "0,0,0,1"))
               (rule "add_zero_left" (formula "29") (term "0,0,1"))
               (rule "polySimp_addAssoc" (formula "26") (term "0,1"))
               (rule "add_literals" (formula "26") (term "0,0,1"))
               (rule "add_zero_left" (formula "26") (term "0,1"))
               (rule "inEqSimp_gtToGeq" (formula "35"))
               (rule "mul_literals" (formula "35") (term "1,0,0"))
               (rule "add_zero_right" (formula "35") (term "0,0"))
               (rule "inEqSimp_gtToGeq" (formula "15"))
               (rule "mul_literals" (formula "15") (term "1,0,0"))
               (rule "add_zero_right" (formula "15") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
               (rule "add_literals" (formula "30") (term "0,0,0"))
               (rule "add_zero_left" (formula "30") (term "0,0"))
               (rule "polySimp_addAssoc" (formula "28") (term "0,1"))
               (rule "add_literals" (formula "28") (term "0,0,1"))
               (rule "add_zero_left" (formula "28") (term "0,1"))
               (rule "polySimp_addAssoc" (formula "35") (term "0"))
               (rule "add_literals" (formula "35") (term "0,0"))
               (rule "add_zero_left" (formula "35") (term "0"))
               (rule "polySimp_sepPosMonomial" (formula "7") (term "1"))
               (rule "polySimp_mulComm0" (formula "7") (term "1,1"))
               (rule "polySimp_rightDist" (formula "7") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1"))
               (rule "mul_literals" (formula "7") (term "0,1,1"))
               (rule "polySimp_elimOne" (formula "7") (term "1,1,1"))
               (rule "polySimp_sepPosMonomial" (formula "18") (term "1"))
               (rule "polySimp_mulComm0" (formula "18") (term "1,1"))
               (rule "polySimp_rightDist" (formula "18") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1"))
               (rule "mul_literals" (formula "18") (term "0,1,1"))
               (rule "polySimp_elimOne" (formula "18") (term "1,1,1"))
               (rule "polySimp_sepPosMonomial" (formula "17") (term "1"))
               (rule "polySimp_mulComm0" (formula "17") (term "1,1"))
               (rule "polySimp_rightDist" (formula "17") (term "1,1"))
               (rule "mul_literals" (formula "17") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "17") (term "1,1,1"))
               (rule "polySimp_sepPosMonomial" (formula "42") (term "1"))
               (rule "polySimp_mulComm0" (formula "42") (term "1,1"))
               (rule "polySimp_rightDist" (formula "42") (term "1,1"))
               (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1"))
               (rule "mul_literals" (formula "42") (term "0,1,1"))
               (rule "polySimp_elimOne" (formula "42") (term "1,1,1"))
               (rule "polySimp_sepPosMonomial" (formula "8") (term "1"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,1"))
               (rule "polySimp_rightDist" (formula "8") (term "1,1"))
               (rule "mul_literals" (formula "8") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "8") (term "1,1,1"))
               (rule "polySimp_sepPosMonomial" (formula "43") (term "1"))
               (rule "polySimp_mulComm0" (formula "43") (term "1,1"))
               (rule "polySimp_rightDist" (formula "43") (term "1,1"))
               (rule "mul_literals" (formula "43") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "43") (term "1,1,1"))
               (rule "polySimp_sepNegMonomial" (formula "30") (term "1"))
               (rule "polySimp_mulLiterals" (formula "30") (term "0,1"))
               (rule "polySimp_elimOne" (formula "30") (term "0,1"))
               (rule "polySimp_sepNegMonomial" (formula "29") (term "1"))
               (rule "polySimp_mulLiterals" (formula "29") (term "0,1"))
               (rule "polySimp_elimOne" (formula "29") (term "0,1"))
               (rule "polySimp_invertEq" (formula "26") (term "1"))
               (rule "polySimp_mulLiterals" (formula "26") (term "0,1"))
               (rule "mul_literals" (formula "26") (term "1,1"))
               (rule "polySimp_elimOne" (formula "26") (term "0,1"))
               (rule "polySimp_invertEq" (formula "30") (term "0"))
               (rule "polySimp_mulLiterals" (formula "30") (term "0,0"))
               (rule "mul_literals" (formula "30") (term "1,0"))
               (rule "polySimp_elimOne" (formula "30") (term "0,0"))
               (rule "polySimp_invertEq" (formula "28") (term "1"))
               (rule "polySimp_mulLiterals" (formula "28") (term "0,1"))
               (rule "mul_literals" (formula "28") (term "1,1"))
               (rule "polySimp_elimOne" (formula "28") (term "0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "inEqSimp_sepPosMonomial1" (formula "15"))
               (rule "mul_literals" (formula "15") (term "1"))
               (rule "inEqSimp_contradEq7" (formula "26") (term "1") (ifseqformula "15"))
               (rule "mul_literals" (formula "26") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "26") (term "0,0,1"))
               (rule "leq_literals" (formula "26") (term "0,1"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "notLeft" (formula "26"))
               (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "46"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "applyEqReverse" (formula "42") (term "1,1,1") (ifseqformula "25"))
               (rule "applyEqReverse" (formula "41") (term "1,1,1") (ifseqformula "25"))
               (rule "applyEqReverse" (formula "42") (term "0,1,0") (ifseqformula "25"))
               (rule "applyEqReverse" (formula "29") (term "1,1") (ifseqformula "25"))
               (rule "applyEqReverse" (formula "40") (term "0,1") (ifseqformula "25"))
               (rule "applyEqReverse" (formula "38") (term "0,1") (ifseqformula "25"))
               (rule "applyEqReverse" (formula "28") (term "1,1") (ifseqformula "25"))
               (rule "hideAuxiliaryEq" (formula "25"))
               (rule "eqSymm" (formula "28") (term "1"))
               (rule "eqSymm" (formula "27") (term "1"))
               (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "45"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "applyEqReverse" (formula "39") (term "1,1,0") (ifseqformula "24"))
               (rule "applyEqReverse" (formula "26") (term "1,0") (ifseqformula "24"))
               (rule "applyEqReverse" (formula "25") (term "1,1") (ifseqformula "24"))
               (rule "applyEqReverse" (formula "38") (term "1,1") (ifseqformula "24"))
               (rule "hideAuxiliaryEq" (formula "24"))
               (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "44"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "replace_known_right" (formula "34") (term "0,0") (ifseqformula "44"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "applyEqReverse" (formula "33") (term "0,0,0") (ifseqformula "34"))
               (rule "applyEqReverse" (formula "35") (term "1,1,0") (ifseqformula "34"))
               (rule "applyEqReverse" (formula "37") (term "0,0,0") (ifseqformula "34"))
               (rule "applyEqReverse" (formula "39") (term "0,0,0") (ifseqformula "34"))
               (rule "applyEqReverse" (formula "35") (term "0,0,0") (ifseqformula "34"))
               (rule "applyEqReverse" (formula "33") (term "1,1,0") (ifseqformula "34"))
               (rule "applyEqReverse" (formula "33") (term "1,2,0") (ifseqformula "34"))
               (rule "applyEqReverse" (formula "35") (term "1,2,0") (ifseqformula "34"))
               (rule "applyEqReverse" (formula "36") (term "0,0,0,0") (ifseqformula "34"))
               (rule "hideAuxiliaryEq" (formula "34"))
               (rule "replace_known_right" (formula "24") (term "0") (ifseqformula "43"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "replace_known_right" (formula "26") (term "0") (ifseqformula "43"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "24"))
                (builtin "One Step Simplification" (formula "25"))
               (rule "true_left" (formula "25"))
               (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "25"))
                (builtin "One Step Simplification" (formula "26"))
               (rule "true_left" (formula "26"))
               (rule "replace_known_right" (formula "33") (term "1,0") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "33"))
               (rule "replace_known_right" (formula "34") (term "1,0") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "34"))
               (rule "replace_known_right" (formula "36") (term "1,0") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "36"))
               (rule "replace_known_right" (formula "35") (term "0,0") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "35"))
               (rule "replace_known_right" (formula "37") (term "0,0") (ifseqformula "41"))
                (builtin "One Step Simplification" (formula "37"))
               (rule "polySimp_homoEq" (formula "36") (term "1"))
               (rule "polySimp_homoEq" (formula "37") (term "1"))
               (rule "polySimp_addComm1" (formula "36") (term "0,1"))
               (rule "polySimp_addComm1" (formula "37") (term "0,1"))
               (rule "inEqSimp_commuteLeq" (formula "24"))
               (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
               (rule "inEqSimp_commuteGeq" (formula "35") (term "0"))
               (rule "applyEq" (formula "35") (term "0,1") (ifseqformula "25"))
               (rule "applyEq" (formula "33") (term "0,1") (ifseqformula "25"))
               (rule "applyEq" (formula "36") (term "1,0,1") (ifseqformula "25"))
               (rule "applyEq" (formula "37") (term "0,0") (ifseqformula "25"))
               (rule "applyEq" (formula "37") (term "1,0,1") (ifseqformula "25"))
               (rule "polySimp_sepPosMonomial" (formula "36") (term "1"))
               (rule "polySimp_mulComm0" (formula "36") (term "1,1"))
               (rule "polySimp_rightDist" (formula "36") (term "1,1"))
               (rule "mul_literals" (formula "36") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "36") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "36") (term "1,1,1"))
               (rule "polySimp_sepPosMonomial" (formula "37") (term "1"))
               (rule "polySimp_mulComm0" (formula "37") (term "1,1"))
               (rule "polySimp_rightDist" (formula "37") (term "1,1"))
               (rule "mul_literals" (formula "37") (term "0,1,1"))
               (rule "polySimp_mulLiterals" (formula "37") (term "1,1,1"))
               (rule "polySimp_elimOne" (formula "37") (term "1,1,1"))
               (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "15"))
               (rule "leq_literals" (formula "30") (term "0"))
                (builtin "One Step Simplification" (formula "30"))
               (rule "true_left" (formula "30"))
               (rule "commute_or" (formula "34"))
               (rule "Class_invariant_axiom_for_case_study_SortedListNode" (formula "42") (ifseqformula "41"))
               (rule "closeTrue" (formula "42"))
            )
         )
         (branch
             (builtin "One Step Simplification" (formula "48"))
            (rule "closeTrue" (formula "48"))
         )
      )
      (branch
          (builtin "One Step Simplification" (formula "48"))
         (rule "allRight" (formula "48") (inst "sk=f_0"))
         (rule "allRight" (formula "48") (inst "sk=o_0"))
         (rule "orRight" (formula "48"))
         (rule "orRight" (formula "48"))
         (rule "eqSymm" (formula "50"))
         (rule "polySimp_homoEq" (formula "7") (term "1"))
         (rule "polySimp_homoEq" (formula "42") (term "1"))
         (rule "polySimp_homoEq" (formula "29") (term "0"))
         (rule "polySimp_homoEq" (formula "16") (term "1"))
         (rule "polySimp_homoEq" (formula "17") (term "1"))
         (rule "polySimp_homoEq" (formula "25") (term "1"))
         (rule "polySimp_homoEq" (formula "6") (term "1"))
         (rule "polySimp_homoEq" (formula "41") (term "1"))
         (rule "polySimp_homoEq" (formula "28") (term "1"))
         (rule "polySimp_homoEq" (formula "27") (term "1"))
         (rule "polySimp_homoEq" (formula "29") (term "1"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,0,0"))
         (rule "polySimp_mulComm0" (formula "25") (term "1,0,1"))
         (rule "polySimp_mulComm0" (formula "28") (term "1,0,1"))
         (rule "polySimp_mulComm0" (formula "27") (term "1,0,1"))
         (rule "polySimp_mulComm0" (formula "29") (term "1,0,1"))
         (rule "polySimp_addComm1" (formula "7") (term "0,1"))
         (rule "polySimp_addComm1" (formula "42") (term "0,1"))
         (rule "polySimp_addComm1" (formula "16") (term "0,1"))
         (rule "polySimp_addComm1" (formula "17") (term "0,1"))
         (rule "polySimp_addComm1" (formula "6") (term "0,1"))
         (rule "polySimp_addComm1" (formula "41") (term "0,1"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0,0"))
         (rule "mul_literals" (formula "29") (term "0,1,0,0"))
         (rule "polySimp_rightDist" (formula "25") (term "1,0,1"))
         (rule "mul_literals" (formula "25") (term "0,1,0,1"))
         (rule "polySimp_rightDist" (formula "28") (term "1,0,1"))
         (rule "mul_literals" (formula "28") (term "0,1,0,1"))
         (rule "polySimp_rightDist" (formula "27") (term "1,0,1"))
         (rule "mul_literals" (formula "27") (term "0,1,0,1"))
         (rule "polySimp_rightDist" (formula "29") (term "1,0,1"))
         (rule "mul_literals" (formula "29") (term "0,1,0,1"))
         (rule "inEqSimp_geqRight" (formula "46"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addAssoc" (formula "30") (term "0,0"))
         (rule "add_literals" (formula "30") (term "0,0,0"))
         (rule "add_zero_left" (formula "30") (term "0,0"))
         (rule "inEqSimp_gtToGeq" (formula "35"))
         (rule "mul_literals" (formula "35") (term "1,0,0"))
         (rule "add_zero_right" (formula "35") (term "0,0"))
         (rule "inEqSimp_gtToGeq" (formula "15"))
         (rule "times_zero_1" (formula "15") (term "1,0,0"))
         (rule "add_zero_right" (formula "15") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "26") (term "0,1"))
         (rule "add_literals" (formula "26") (term "0,0,1"))
         (rule "add_zero_left" (formula "26") (term "0,1"))
         (rule "polySimp_addAssoc" (formula "29") (term "0,1"))
         (rule "polySimp_addComm1" (formula "29") (term "0,0,1"))
         (rule "add_literals" (formula "29") (term "0,0,0,1"))
         (rule "add_zero_left" (formula "29") (term "0,0,1"))
         (rule "polySimp_addAssoc" (formula "28") (term "0,1"))
         (rule "add_literals" (formula "28") (term "0,0,1"))
         (rule "add_zero_left" (formula "28") (term "0,1"))
         (rule "polySimp_addAssoc" (formula "30") (term "0,1"))
         (rule "polySimp_addComm1" (formula "30") (term "0,0,1"))
         (rule "add_literals" (formula "30") (term "0,0,0,1"))
         (rule "add_zero_left" (formula "30") (term "0,0,1"))
         (rule "polySimp_addAssoc" (formula "35") (term "0"))
         (rule "add_literals" (formula "35") (term "0,0"))
         (rule "add_zero_left" (formula "35") (term "0"))
         (rule "polySimp_sepPosMonomial" (formula "8") (term "1"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,1"))
         (rule "polySimp_rightDist" (formula "8") (term "1,1"))
         (rule "mul_literals" (formula "8") (term "0,1,1"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,1"))
         (rule "polySimp_sepPosMonomial" (formula "43") (term "1"))
         (rule "polySimp_mulComm0" (formula "43") (term "1,1"))
         (rule "polySimp_rightDist" (formula "43") (term "1,1"))
         (rule "mul_literals" (formula "43") (term "0,1,1"))
         (rule "polySimp_mulLiterals" (formula "43") (term "1,1,1"))
         (rule "polySimp_elimOne" (formula "43") (term "1,1,1"))
         (rule "polySimp_sepPosMonomial" (formula "17") (term "1"))
         (rule "polySimp_mulComm0" (formula "17") (term "1,1"))
         (rule "polySimp_rightDist" (formula "17") (term "1,1"))
         (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1"))
         (rule "mul_literals" (formula "17") (term "0,1,1"))
         (rule "polySimp_elimOne" (formula "17") (term "1,1,1"))
         (rule "polySimp_sepPosMonomial" (formula "18") (term "1"))
         (rule "polySimp_mulComm0" (formula "18") (term "1,1"))
         (rule "polySimp_rightDist" (formula "18") (term "1,1"))
         (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1"))
         (rule "mul_literals" (formula "18") (term "0,1,1"))
         (rule "polySimp_elimOne" (formula "18") (term "1,1,1"))
         (rule "polySimp_sepPosMonomial" (formula "7") (term "1"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,1"))
         (rule "polySimp_rightDist" (formula "7") (term "1,1"))
         (rule "mul_literals" (formula "7") (term "0,1,1"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,1"))
         (rule "polySimp_sepPosMonomial" (formula "42") (term "1"))
         (rule "polySimp_mulComm0" (formula "42") (term "1,1"))
         (rule "polySimp_rightDist" (formula "42") (term "1,1"))
         (rule "mul_literals" (formula "42") (term "0,1,1"))
         (rule "polySimp_mulLiterals" (formula "42") (term "1,1,1"))
         (rule "polySimp_elimOne" (formula "42") (term "1,1,1"))
         (rule "polySimp_invertEq" (formula "30") (term "0"))
         (rule "polySimp_mulLiterals" (formula "30") (term "0,0"))
         (rule "mul_literals" (formula "30") (term "1,0"))
         (rule "polySimp_elimOne" (formula "30") (term "0,0"))
         (rule "polySimp_invertEq" (formula "26") (term "1"))
         (rule "polySimp_mulLiterals" (formula "26") (term "0,1"))
         (rule "mul_literals" (formula "26") (term "1,1"))
         (rule "polySimp_elimOne" (formula "26") (term "0,1"))
         (rule "polySimp_sepNegMonomial" (formula "29") (term "1"))
         (rule "polySimp_mulLiterals" (formula "29") (term "0,1"))
         (rule "polySimp_elimOne" (formula "29") (term "0,1"))
         (rule "polySimp_invertEq" (formula "28") (term "1"))
         (rule "polySimp_mulLiterals" (formula "28") (term "0,1"))
         (rule "mul_literals" (formula "28") (term "1,1"))
         (rule "polySimp_elimOne" (formula "28") (term "0,1"))
         (rule "polySimp_sepNegMonomial" (formula "30") (term "1"))
         (rule "polySimp_mulLiterals" (formula "30") (term "0,1"))
         (rule "polySimp_elimOne" (formula "30") (term "0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "15"))
         (rule "mul_literals" (formula "15") (term "1"))
         (rule "inEqSimp_contradEq7" (formula "30") (term "0") (ifseqformula "15"))
         (rule "mul_literals" (formula "30") (term "1,0,0,0"))
         (rule "add_zero_right" (formula "30") (term "0,0,0"))
         (rule "leq_literals" (formula "30") (term "0,0"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "applyEqReverse" (formula "29") (term "1,1") (ifseqformula "30"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "true_left" (formula "29"))
         (rule "applyEqReverse" (formula "42") (term "1,1,1") (ifseqformula "29"))
         (rule "applyEqReverse" (formula "42") (term "0,1,0") (ifseqformula "29"))
         (rule "applyEqReverse" (formula "25") (term "1") (ifseqformula "29"))
         (rule "applyEqReverse" (formula "41") (term "1,1,1") (ifseqformula "29"))
         (rule "applyEqReverse" (formula "40") (term "0,1") (ifseqformula "29"))
         (rule "applyEqReverse" (formula "38") (term "0,1") (ifseqformula "29"))
         (rule "hideAuxiliaryEq" (formula "29"))
         (rule "polySimp_homoEq" (formula "41") (term "1"))
         (rule "polySimp_homoEq" (formula "40") (term "1"))
         (rule "polySimp_addComm1" (formula "41") (term "0,1"))
         (rule "polySimp_addComm1" (formula "40") (term "0,1"))
         (rule "polySimp_sepPosMonomial" (formula "41") (term "1"))
         (rule "polySimp_mulComm0" (formula "41") (term "1,1"))
         (rule "polySimp_rightDist" (formula "41") (term "1,1"))
         (rule "mul_literals" (formula "41") (term "0,1,1"))
         (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1"))
         (rule "polySimp_elimOne" (formula "41") (term "1,1,1"))
         (rule "polySimp_sepPosMonomial" (formula "40") (term "1"))
         (rule "polySimp_mulComm0" (formula "40") (term "1,1"))
         (rule "polySimp_rightDist" (formula "40") (term "1,1"))
         (rule "mul_literals" (formula "40") (term "0,1,1"))
         (rule "polySimp_mulLiterals" (formula "40") (term "1,1,1"))
         (rule "polySimp_elimOne" (formula "40") (term "1,1,1"))
         (rule "inEqSimp_contradEq7" (formula "26") (term "1") (ifseqformula "15"))
         (rule "mul_literals" (formula "26") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "26") (term "0,0,1"))
         (rule "leq_literals" (formula "26") (term "0,1"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "notLeft" (formula "26"))
         (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "44"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "44"))
          (builtin "One Step Simplification" (formula "29"))
         (rule "replace_known_right" (formula "34") (term "0,0") (ifseqformula "44"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "applyEqReverse" (formula "33") (term "1,2,0") (ifseqformula "34"))
         (rule "applyEqReverse" (formula "35") (term "0,0,0") (ifseqformula "34"))
         (rule "applyEqReverse" (formula "39") (term "0,0,0") (ifseqformula "34"))
         (rule "applyEqReverse" (formula "33") (term "1,1,0") (ifseqformula "34"))
         (rule "applyEqReverse" (formula "37") (term "0,0,0") (ifseqformula "34"))
         (rule "applyEqReverse" (formula "36") (term "0,0,0,0") (ifseqformula "34"))
         (rule "applyEqReverse" (formula "35") (term "1,1,0") (ifseqformula "34"))
         (rule "applyEqReverse" (formula "33") (term "0,0,0") (ifseqformula "34"))
         (rule "applyEqReverse" (formula "35") (term "1,2,0") (ifseqformula "34"))
         (rule "hideAuxiliaryEq" (formula "34"))
         (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "43"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "applyEqReverse" (formula "27") (term "1,0") (ifseqformula "24"))
         (rule "applyEqReverse" (formula "37") (term "1,1,0") (ifseqformula "24"))
         (rule "applyEqReverse" (formula "36") (term "1,1") (ifseqformula "24"))
         (rule "applyEqReverse" (formula "26") (term "1,1") (ifseqformula "24"))
         (rule "hideAuxiliaryEq" (formula "24"))
         (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "42"))
          (builtin "One Step Simplification" (formula "25"))
         (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "25"))
          (builtin "One Step Simplification" (formula "26"))
         (rule "true_left" (formula "26"))
         (rule "replace_known_right" (formula "37") (term "0,0") (ifseqformula "41"))
          (builtin "One Step Simplification" (formula "37"))
         (rule "replace_known_right" (formula "33") (term "1,0") (ifseqformula "41"))
          (builtin "One Step Simplification" (formula "33"))
         (rule "replace_known_right" (formula "36") (term "1,0") (ifseqformula "41"))
          (builtin "One Step Simplification" (formula "36"))
         (rule "replace_known_right" (formula "35") (term "0,0") (ifseqformula "41"))
          (builtin "One Step Simplification" (formula "35"))
         (rule "replace_known_right" (formula "34") (term "1,0") (ifseqformula "41"))
          (builtin "One Step Simplification" (formula "34"))
         (rule "inEqSimp_commuteLeq" (formula "25"))
         (rule "inEqSimp_commuteGeq" (formula "35") (term "0"))
         (rule "inEqSimp_commuteGeq" (formula "34") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "15"))
         (rule "leq_literals" (formula "30") (term "0"))
          (builtin "One Step Simplification" (formula "30"))
         (rule "true_left" (formula "30"))
         (rule "pullOutSelect" (formula "44") (term "0") (inst "selectSK=f_0_0"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "23"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "44")))
         (rule "eqSymm" (formula "45"))
         (rule "elementOfInfiniteUnion" (formula "1") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "commute_and_2" (formula "43"))
         (rule "commute_or" (formula "35"))
         (rule "cut_direct" (formula "17") (term "0,0"))
         (branch "CUT: self.tail = null TRUE"
             (builtin "One Step Simplification" (formula "18"))
            (rule "true_left" (formula "18"))
            (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "true_left" (formula "10"))
            (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "replace_known_left" (formula "7") (term "0,0") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "replace_known_left" (formula "34") (term "0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "true_left" (formula "34"))
            (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "true_left" (formula "30"))
            (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "true_left" (formula "30"))
            (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "true_left" (formula "16"))
            (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "true_left" (formula "14"))
            (rule "replace_known_left" (formula "13") (term "0,0") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "true_left" (formula "13"))
            (rule "applyEq" (formula "11") (term "0") (ifseqformula "7"))
            (rule "qeq_literals" (formula "11"))
            (rule "true_left" (formula "11"))
            (rule "applyEq" (formula "9") (term "1,0") (ifseqformula "11"))
            (rule "applyEq" (formula "24") (term "0,1") (ifseqformula "7"))
            (rule "polySimp_homoEq" (formula "24") (term "1"))
            (rule "mul_literals" (formula "24") (term "1,0,1"))
            (rule "polySimp_addComm1" (formula "24") (term "0,1"))
            (rule "add_literals" (formula "24") (term "0,0,1"))
            (rule "add_zero_left" (formula "24") (term "0,1"))
            (rule "applyEq" (formula "10") (term "1") (ifseqformula "11"))
            (rule "applyEq" (formula "26") (term "1,1") (ifseqformula "7"))
            (rule "add_literals" (formula "26") (term "1"))
            (rule "applyEq" (formula "15") (term "1") (ifseqformula "7"))
            (rule "commute_and" (formula "30") (term "0"))
            (rule "commute_and_2" (formula "1") (term "0,0"))
            (rule "commute_and_2" (formula "30"))
            (rule "cut_direct" (formula "31") (term "0,0"))
            (branch "CUT: o_0 = null TRUE"
               (rule "typeEqDerived" (formula "31") (term "0,0,0") (ifseqformula "1"))
               (rule "typeEqDerived" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "32"))
                (builtin "One Step Simplification" (formula "31"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "31")) (ifInst ""  (formula "33")))
               (rule "closeFalse" (formula "2"))
            )
            (branch "CUT: o_0 = null FALSE"
                (builtin "One Step Simplification" (formula "32"))
               (rule "notRight" (formula "32"))
               (rule "commute_and_2" (formula "2") (term "0,0,0"))
               (rule "commute_and_2" (formula "2") (term "0,0"))
               (rule "commute_and" (formula "2") (term "0,0,0,0"))
               (rule "commute_and_2" (formula "2") (term "0,0,0"))
               (rule "ifthenelse_split" (formula "22") (term "0"))
               (branch " self.tail.tail@anon_heap___insertTail_trampoline«anonHeapFunction» = null TRUE"
                  (rule "applyEqReverse" (formula "26") (term "0,1") (ifseqformula "23"))
                  (rule "hideAuxiliaryEq" (formula "23"))
                  (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "applyEqReverse" (formula "24") (term "1,1") (ifseqformula "23"))
                  (rule "hideAuxiliaryEq" (formula "23"))
                  (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "true_left" (formula "23"))
                  (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "true_left" (formula "23"))
                  (rule "ifthenelse_split" (formula "2") (term "0"))
                  (branch " ¬f_0 = java.lang.Object::<created> ∧ case_study.SortedListNode::instance(o_0) = TRUE ∧ ¬(case_study.SortedListNode)(o_0) = null ∧ (case_study.SortedListNode)(o_0).<created> = TRUE TRUE"
                     (rule "andLeft" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "notLeft" (formula "3"))
                     (rule "andLeft" (formula "2"))
                     (rule "notLeft" (formula "2"))
                     (rule "applyEqReverse" (formula "34") (term "1") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "eqSymm" (formula "33"))
                     (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "2")) (ifInst ""  (formula "28")))
                     (rule "closeTrue" (formula "31"))
                  )
                  (branch " ¬f_0 = java.lang.Object::<created> ∧ case_study.SortedListNode::instance(o_0) = TRUE ∧ ¬(case_study.SortedListNode)(o_0) = null ∧ (case_study.SortedListNode)(o_0).<created> = TRUE FALSE"
                     (rule "close" (formula "31") (ifseqformula "2"))
                  )
               )
               (branch " self.tail.tail@anon_heap___insertTail_trampoline«anonHeapFunction» = null FALSE"
                  (rule "applyEqReverse" (formula "25") (term "0,1") (ifseqformula "22"))
                  (rule "hideAuxiliaryEq" (formula "22"))
                  (rule "replace_known_right" (formula "22") (term "0,0") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "applyEqReverse" (formula "23") (term "1,1") (ifseqformula "22"))
                  (rule "hideAuxiliaryEq" (formula "22"))
                  (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "replace_known_right" (formula "23") (term "0") (ifseqformula "27"))
                   (builtin "One Step Simplification" (formula "23"))
                  (rule "inEqSimp_commuteLeq" (formula "22"))
                  (rule "ifthenelse_split" (formula "2") (term "0"))
                  (branch " ¬f_0 = java.lang.Object::<created> ∧ case_study.SortedListNode::instance(o_0) = TRUE ∧ ¬(case_study.SortedListNode)(o_0) = null ∧ (case_study.SortedListNode)(o_0).<created> = TRUE TRUE"
                     (rule "andLeft" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "notLeft" (formula "4"))
                     (rule "notLeft" (formula "2"))
                     (rule "applyEqReverse" (formula "36") (term "1") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "eqSymm" (formula "35"))
                     (rule "replace_known_right" (formula "33") (term "0,1,0") (ifseqformula "29"))
                      (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
                     (rule "closeTrue" (formula "33"))
                  )
                  (branch " ¬f_0 = java.lang.Object::<created> ∧ case_study.SortedListNode::instance(o_0) = TRUE ∧ ¬(case_study.SortedListNode)(o_0) = null ∧ (case_study.SortedListNode)(o_0).<created> = TRUE FALSE"
                     (rule "close" (formula "33") (ifseqformula "2"))
                  )
               )
            )
         )
         (branch "CUT: self.tail = null FALSE"
             (builtin "One Step Simplification" (formula "17"))
            (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "41"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "41"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "41"))
             (builtin "One Step Simplification" (formula "13"))
            (rule "replace_known_right" (formula "7") (term "0,0") (ifseqformula "41"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "7"))
             (builtin "One Step Simplification" (formula "8"))
            (rule "true_left" (formula "8"))
            (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "replace_known_right" (formula "16") (term "0,0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "replace_known_right" (formula "18") (term "0,0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "17"))
            (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "7"))
            (rule "polySimp_homoEq" (formula "18") (term "0"))
            (rule "polySimp_mulComm0" (formula "18") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "18") (term "1,0,0"))
            (rule "mul_literals" (formula "18") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "18") (term "0,0"))
            (rule "add_literals" (formula "18") (term "0,0,0"))
            (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "7"))
            (rule "polySimp_homoEq" (formula "16") (term "0"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0,0"))
            (rule "mul_literals" (formula "16") (term "0,1,0,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,0"))
            (rule "add_literals" (formula "16") (term "0,0,0"))
            (rule "applyEq" (formula "14") (term "0,1") (ifseqformula "7"))
            (rule "polySimp_homoEq" (formula "14") (term "1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0,1"))
            (rule "mul_literals" (formula "14") (term "0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "14") (term "0,1"))
            (rule "add_literals" (formula "14") (term "0,0,1"))
            (rule "applyEq" (formula "16") (term "1,1,1") (ifseqformula "7"))
            (rule "polySimp_addAssoc" (formula "16") (term "1,1"))
            (rule "add_literals" (formula "16") (term "0,1,1"))
            (rule "applyEq" (formula "15") (term "1,1,1") (ifseqformula "7"))
            (rule "polySimp_addAssoc" (formula "15") (term "1,1"))
            (rule "add_literals" (formula "15") (term "0,1,1"))
            (rule "polySimp_sepNegMonomial" (formula "18") (term "0"))
            (rule "polySimp_mulLiterals" (formula "18") (term "0,0"))
            (rule "polySimp_elimOne" (formula "18") (term "0,0"))
            (rule "polySimp_sepNegMonomial" (formula "16") (term "0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "0,0"))
            (rule "polySimp_elimOne" (formula "16") (term "0,0"))
            (rule "polySimp_sepNegMonomial" (formula "14") (term "1"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0,1"))
            (rule "polySimp_elimOne" (formula "14") (term "0,1"))
            (rule "commute_and" (formula "41") (term "0"))
            (rule "commute_and_2" (formula "1") (term "0,0"))
            (rule "commute_and_2" (formula "41"))
            (rule "cut_direct" (formula "42") (term "0,0"))
            (branch "CUT: o_0 = null TRUE"
               (rule "typeEqDerived" (formula "42") (term "0,0,0") (ifseqformula "1"))
               (rule "typeEqDerived" (formula "2") (term "0,1,0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "43"))
                (builtin "One Step Simplification" (formula "42"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "42")) (ifInst ""  (formula "44")))
               (rule "closeFalse" (formula "2"))
            )
            (branch "CUT: o_0 = null FALSE"
                (builtin "One Step Simplification" (formula "43"))
               (rule "notRight" (formula "43"))
               (rule "commute_and_2" (formula "2") (term "0,0,0"))
               (rule "commute_and_2" (formula "2") (term "0,0"))
               (rule "commute_and" (formula "2") (term "0,0,0,0"))
               (rule "commute_and_2" (formula "2") (term "0,0,0"))
               (rule "ifthenelse_split" (formula "29") (term "0"))
               (branch " self.tail.tail@anon_heap___insertTail_trampoline«anonHeapFunction» = null TRUE"
                  (rule "applyEqReverse" (formula "35") (term "1,1,1") (ifseqformula "30"))
                  (rule "applyEqReverse" (formula "36") (term "1,1,1") (ifseqformula "30"))
                  (rule "hideAuxiliaryEq" (formula "30"))
                  (rule "replace_known_left" (formula "30") (term "0,0") (ifseqformula "29"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "applyEqReverse" (formula "32") (term "1,1") (ifseqformula "30"))
                  (rule "applyEqReverse" (formula "33") (term "1,1") (ifseqformula "30"))
                  (rule "hideAuxiliaryEq" (formula "30"))
                  (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "29"))
                   (builtin "One Step Simplification" (formula "33"))
                  (rule "true_left" (formula "33"))
                  (rule "replace_known_left" (formula "30") (term "0,0") (ifseqformula "29"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "29"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "true_left" (formula "31"))
                  (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "30"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "true_left" (formula "31"))
                  (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "30"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "true_left" (formula "31"))
                  (rule "applyEq" (formula "15") (term "0,1") (ifseqformula "30"))
                  (rule "equal_literals" (formula "15") (term "1"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "notLeft" (formula "15"))
                  (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "33"))
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "33"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "17"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "true_left" (formula "18"))
                  (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "15"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "applyEq" (formula "14") (term "0") (ifseqformula "27"))
                  (rule "qeq_literals" (formula "14"))
                  (rule "true_left" (formula "14"))
                  (rule "applyEq" (formula "8") (term "1,1") (ifseqformula "26"))
                  (rule "add_literals" (formula "8") (term "1"))
                  (rule "applyEq" (formula "19") (term "1") (ifseqformula "26"))
                  (rule "applyEq" (formula "28") (term "1,1") (ifseqformula "26"))
                  (rule "add_literals" (formula "28") (term "1"))
                  (rule "applyEq" (formula "14") (term "1,1") (ifseqformula "26"))
                  (rule "add_literals" (formula "14") (term "1"))
                  (rule "ifthenelse_split" (formula "2") (term "0"))
                  (branch " ¬f_0 = java.lang.Object::<created> ∧ case_study.SortedListNode::instance(o_0) = TRUE ∧ ¬(case_study.SortedListNode)(o_0) = null ∧ (case_study.SortedListNode)(o_0).<created> = TRUE TRUE"
                     (rule "andLeft" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "notLeft" (formula "3"))
                     (rule "andLeft" (formula "2"))
                     (rule "notLeft" (formula "2"))
                     (rule "applyEqReverse" (formula "40") (term "1") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "eqSymm" (formula "39"))
                     (rule "replace_known_left" (formula "37") (term "0,0") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "32")) (ifInst ""  (formula "3")))
                     (rule "closeTrue" (formula "37"))
                  )
                  (branch " ¬f_0 = java.lang.Object::<created> ∧ case_study.SortedListNode::instance(o_0) = TRUE ∧ ¬(case_study.SortedListNode)(o_0) = null ∧ (case_study.SortedListNode)(o_0).<created> = TRUE FALSE"
                     (rule "close" (formula "37") (ifseqformula "2"))
                  )
               )
               (branch " self.tail.tail@anon_heap___insertTail_trampoline«anonHeapFunction» = null FALSE"
                  (rule "applyEqReverse" (formula "34") (term "1,1,1") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "35") (term "1,1,1") (ifseqformula "29"))
                  (rule "hideAuxiliaryEq" (formula "29"))
                  (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "38"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "applyEqReverse" (formula "31") (term "1,1") (ifseqformula "29"))
                  (rule "applyEqReverse" (formula "32") (term "1,1") (ifseqformula "29"))
                  (rule "hideAuxiliaryEq" (formula "29"))
                  (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "37"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "true_left" (formula "29"))
                  (rule "replace_known_right" (formula "31") (term "0") (ifseqformula "36"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "replace_known_right" (formula "29") (term "0") (ifseqformula "36"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "29"))
                   (builtin "One Step Simplification" (formula "30"))
                  (rule "true_left" (formula "30"))
                  (rule "replace_known_left" (formula "31") (term "1") (ifseqformula "30"))
                   (builtin "One Step Simplification" (formula "31"))
                  (rule "true_left" (formula "31"))
                  (rule "polySimp_homoEq" (formula "30"))
                  (rule "polySimp_addComm1" (formula "30") (term "0"))
                  (rule "inEqSimp_commuteLeq" (formula "29"))
                  (rule "polySimp_sepPosMonomial" (formula "30"))
                  (rule "polySimp_mulComm0" (formula "30") (term "1"))
                  (rule "polySimp_rightDist" (formula "30") (term "1"))
                  (rule "mul_literals" (formula "30") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "30") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "30") (term "1,1"))
                  (rule "ifthenelse_split" (formula "2") (term "0"))
                  (branch " ¬f_0 = java.lang.Object::<created> ∧ case_study.SortedListNode::instance(o_0) = TRUE ∧ ¬(case_study.SortedListNode)(o_0) = null ∧ (case_study.SortedListNode)(o_0).<created> = TRUE TRUE"
                     (rule "andLeft" (formula "2"))
                     (rule "andLeft" (formula "2"))
                     (rule "notLeft" (formula "3"))
                     (rule "andLeft" (formula "2"))
                     (rule "notLeft" (formula "2"))
                     (rule "applyEqReverse" (formula "44") (term "1") (ifseqformula "4"))
                     (rule "hideAuxiliaryEq" (formula "4"))
                     (rule "eqSymm" (formula "43"))
                     (rule "replace_known_left" (formula "41") (term "0,0") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "36")) (ifInst ""  (formula "3")))
                     (rule "closeTrue" (formula "41"))
                  )
                  (branch " ¬f_0 = java.lang.Object::<created> ∧ case_study.SortedListNode::instance(o_0) = TRUE ∧ ¬(case_study.SortedListNode)(o_0) = null ∧ (case_study.SortedListNode)(o_0).<created> = TRUE FALSE"
                     (rule "close" (formula "41") (ifseqformula "2"))
                  )
               )
            )
         )
      )
   )
   (branch "Exceptional Post (__insertTail_trampoline)"
       (builtin "One Step Simplification" (formula "20"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "23"))
      (rule "notLeft" (formula "21"))
      (rule "close" (formula "24") (ifseqformula "23"))
   )
   (branch "Pre (__insertTail_trampoline)"
       (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "1")))
      (rule "polySimp_homoEq" (formula "15") (term "1"))
      (rule "polySimp_homoEq" (formula "6") (term "1"))
      (rule "polySimp_homoEq" (formula "7") (term "1"))
      (rule "polySimp_homoEq" (formula "16") (term "1"))
      (rule "polySimp_addComm1" (formula "15") (term "0,1"))
      (rule "polySimp_addComm1" (formula "6") (term "0,1"))
      (rule "polySimp_addComm1" (formula "7") (term "0,1"))
      (rule "polySimp_addComm1" (formula "16") (term "0,1"))
      (rule "inEqSimp_geqRight" (formula "19"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "inEqSimp_gtToGeq" (formula "14"))
      (rule "times_zero_1" (formula "14") (term "1,0,0"))
      (rule "add_zero_right" (formula "14") (term "0,0"))
      (rule "inEqSimp_commuteGeq" (formula "21") (term "0"))
      (rule "polySimp_sepPosMonomial" (formula "16") (term "1"))
      (rule "polySimp_mulComm0" (formula "16") (term "1,1"))
      (rule "polySimp_rightDist" (formula "16") (term "1,1"))
      (rule "mul_literals" (formula "16") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1"))
      (rule "polySimp_elimOne" (formula "16") (term "1,1,1"))
      (rule "polySimp_sepPosMonomial" (formula "7") (term "1"))
      (rule "polySimp_mulComm0" (formula "7") (term "1,1"))
      (rule "polySimp_rightDist" (formula "7") (term "1,1"))
      (rule "mul_literals" (formula "7") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1"))
      (rule "polySimp_elimOne" (formula "7") (term "1,1,1"))
      (rule "polySimp_sepPosMonomial" (formula "8") (term "1"))
      (rule "polySimp_mulComm0" (formula "8") (term "1,1"))
      (rule "polySimp_rightDist" (formula "8") (term "1,1"))
      (rule "mul_literals" (formula "8") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "8") (term "1,1,1"))
      (rule "polySimp_elimOne" (formula "8") (term "1,1,1"))
      (rule "polySimp_sepPosMonomial" (formula "17") (term "1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,1"))
      (rule "polySimp_rightDist" (formula "17") (term "1,1"))
      (rule "mul_literals" (formula "17") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1"))
      (rule "polySimp_elimOne" (formula "17") (term "1,1,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "mul_literals" (formula "1") (term "0,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "14"))
      (rule "mul_literals" (formula "14") (term "1"))
      (rule "inEqSimp_subsumption0" (formula "21") (term "0") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq0" (formula "21") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0"))
      (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0"))
      (rule "mul_literals" (formula "21") (term "0,1,0,0,0"))
      (rule "polySimp_addAssoc" (formula "21") (term "0,0,0"))
      (rule "polySimp_addComm0" (formula "21") (term "0,0,0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,0"))
      (rule "add_literals" (formula "21") (term "1,1,0,0,0"))
      (rule "times_zero_1" (formula "21") (term "1,0,0,0"))
      (rule "add_zero_right" (formula "21") (term "0,0,0"))
      (rule "qeq_literals" (formula "21") (term "0,0"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "Class_invariant_axiom_for_case_study_SortedListNode" (formula "21") (ifseqformula "20"))
      (rule "closeTrue" (formula "21"))
   )
)
)
}
