\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:off",
        "Strings" : "Strings:on",
        "assertions" : "assertions:on",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:treatAsAxiom",
        "moreSeqRules" : "moreSeqRules:on",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:ban",
        "sequences" : "sequences:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 50000,
        "Timeout" : -1,
        "options" : { 
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_DELAYED",
            "DEP_OPTIONS_KEY" : "DEP_ON",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_SCOPE_INV_TACLET",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_COMPLETION",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_OFF",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_DEFAULT",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\javaSource "../../../property-checker-out/case_study";

\proofObligation "#Proof Obligation Settings
#Sat Oct 05 21:37:02 CEST 2024
contract=case_study.Node[case_study.Node\\:\\:insert(case_study.Order)].JML normal_behavior operation contract.0
name=case_study.Node[case_study.Node\\:\\:insert(case_study.Order)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "florian" ) (keyVersion "7ff2d9dc3ea43e071577b3f8d0e3a537f9213982"))

(autoModeTime "13032")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "heapAtPre,o,f"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "8"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "10"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "11"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "14") (term "1,0,0,1,0,1"))
(rule "eqSymm" (formula "14") (term "0,0,0,0,0,1"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "12"))
 (builtin "One Step Simplification" (formula "4"))
(rule "replace_known_right" (formula "6") (term "0,0") (ifseqformula "13"))
 (builtin "One Step Simplification" (formula "6"))
(rule "sortsDisjointModuloNull" (formula "11"))
(rule "replace_known_right" (formula "11") (term "1") (ifseqformula "12"))
 (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "13")))
(rule "false_right" (formula "11"))
(rule "assignment" (formula "13") (term "1"))
 (builtin "One Step Simplification" (formula "13"))
(rule "limit_java_lang_Object__inv_" (formula "7"))
(rule "replace_known_left" (formula "7") (term "1") (ifseqformula "8"))
 (builtin "One Step Simplification" (formula "7"))
(rule "limit_java_lang_Object__inv_free_" (formula "11"))
(rule "replace_known_left" (formula "11") (term "1") (ifseqformula "12"))
 (builtin "One Step Simplification" (formula "11"))
(rule "cnf_rightDist" (formula "6"))
 (builtin "One Step Simplification" (formula "6"))
(rule "commute_or" (formula "6"))
(rule "limit_java_lang_Object__inv_" (formula "8"))
(rule "replace_known_left" (formula "8") (term "1") (ifseqformula "9"))
 (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")))
(rule "true_left" (formula "8"))
(rule "limit_java_lang_Object__inv_free_" (formula "12"))
(rule "replace_known_left" (formula "12") (term "1") (ifseqformula "13"))
 (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "11")))
(rule "true_left" (formula "12"))
(rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_insert,savedHeapBefore_insert"))
 (builtin "One Step Simplification" (formula "15"))
(rule "ifElseUnfold" (formula "15") (term "1") (inst "#boolv=b"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "b"))
(rule "compound_less_equal_than_comparison_2" (formula "15") (term "1") (inst "#v1=i_1") (inst "#v0=i"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "i"))
 (builtin "Use Operation Contract" (formula "15") (newnames "heapBefore___getPrice_trampoline,result___getPrice_trampoline,exc_0") (contract "case_study.Order[case_study.Order::__getPrice_trampoline(boolean)].JML normal_behavior operation contract.0") (modality "diamond"))
(branch "Post (__getPrice_trampoline)"
    (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "10")) (ifInst ""  (formula "14")) (ifInst ""  (formula "14")))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "15"))
   (rule "andLeft" (formula "15"))
   (rule "eqSymm" (formula "15"))
   (rule "assignment" (formula "19") (term "1"))
    (builtin "One Step Simplification" (formula "19"))
   (rule "variableDeclarationAssign" (formula "19") (term "1"))
   (rule "variableDeclaration" (formula "19") (term "1") (newnames "i_1"))
   (rule "limit_java_lang_Object__inv_free_" (formula "14"))
   (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "15"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "limit_java_lang_Object__inv_" (formula "17"))
   (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "18"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "methodCallWithAssignmentUnfoldTarget" (formula "21") (term "1") (inst "#v0=o"))
   (rule "variableDeclaration" (formula "21") (term "1") (newnames "o"))
   (rule "assignment_read_attribute_this" (formula "21"))
    (builtin "One Step Simplification" (formula "21"))
    (builtin "Use Operation Contract" (formula "21") (newnames "heapBefore___getPrice_trampoline_0,result___getPrice_trampoline_0,exc_1") (contract "case_study.Order[case_study.Order::__getPrice_trampoline(boolean)].JML normal_behavior operation contract.0") (modality "diamond"))
   (branch "Post (__getPrice_trampoline)"
       (builtin "One Step Simplification" (formula "19"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "22"))
      (rule "notLeft" (formula "22"))
      (rule "andLeft" (formula "22"))
      (rule "notLeft" (formula "22"))
      (rule "eqSymm" (formula "21"))
      (rule "assignment" (formula "27") (term "1"))
       (builtin "One Step Simplification" (formula "27"))
      (rule "limit_java_lang_Object__inv_free_" (formula "20"))
      (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "21"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "limit_java_lang_Object__inv_" (formula "23"))
      (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "24"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "less_equal_than_comparison_simple" (formula "29") (term "1"))
       (builtin "One Step Simplification" (formula "29"))
      (rule "inEqSimp_commuteLeq" (formula "29") (term "0,0,1,0"))
      (rule "ifElseSplit" (formula "29"))
      (branch "if _newHead.__getPrice_trampoline(false) <= this.head.__getPrice_trampoline(false) true"
          (builtin "One Step Simplification" (formula "30"))
          (builtin "One Step Simplification" (formula "1"))
          (builtin "Use Operation Contract" (formula "30") (newnames "heapBefore___insertHead_trampoline,exc_2,heapAfter___insertHead_trampoline,anon_heap___insertHead_trampoline") (contract "case_study.Node[case_study.Node::__insertHead_trampoline(case_study.Order,boolean,boolean,boolean)].JML normal_behavior operation contract.0") (modality "diamond"))
         (branch "Post (__insertHead_trampoline)"
             (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "31")) (ifInst ""  (formula "30")) (ifInst ""  (formula "31")) (ifInst ""  (formula "31")) (ifInst ""  (formula "31")) (ifInst ""  (formula "30")))
             (builtin "One Step Simplification" (formula "32"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "29"))
            (rule "andLeft" (formula "29"))
            (rule "andLeft" (formula "31"))
            (rule "andLeft" (formula "30"))
            (rule "andLeft" (formula "32"))
            (rule "andLeft" (formula "31"))
            (rule "andLeft" (formula "34"))
            (rule "andLeft" (formula "35"))
            (rule "andLeft" (formula "36"))
            (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=java_lang_Object_packed_0"))
            (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "40")) (ifInst ""  (formula "3")))
            (rule "applyEqRigid" (formula "30") (term "1") (ifseqformula "31"))
            (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=case_study_Node_head_0"))
            (rule "simplifySelectOfAnonEQ" (formula "34") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "41")) (ifInst ""  (formula "3")))
            (rule "replaceKnownSelect_taclet0000_1" (formula "37") (term "1,1,1,1,1"))
            (rule "eqSymm" (formula "35"))
            (rule "hideAuxiliaryEq" (formula "35"))
            (rule "replaceKnownAuxiliaryConstant_taclet0000_2" (formula "34") (term "1"))
            (rule "replaceKnownAuxiliaryConstant_taclet0000_2" (formula "36") (term "1,1,1,1,1"))
            (rule "pullOutSelect" (formula "32") (term "0") (inst "selectSK=java_lang_Object_packed_1"))
            (rule "simplifySelectOfAnonEQ" (formula "32") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "40")) (ifInst ""  (formula "5")))
            (rule "applyEqRigid" (formula "32") (term "1") (ifseqformula "33"))
            (rule "pullOutSelect" (formula "36") (term "0") (inst "selectSK=case_study_Node_footprint_0"))
            (rule "simplifySelectOfAnonEQ" (formula "36") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "36") (ifInst ""  (formula "42")) (ifInst ""  (formula "3")))
            (rule "pullOutSelect" (formula "38") (term "1,0,1,1") (inst "selectSK=case_study_Order_product_0"))
            (rule "simplifySelectOfAnonEQ" (formula "38") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "38"))
            (rule "inEqSimp_commuteGeq" (formula "39") (term "1,1"))
            (rule "pullOutSelect" (formula "39") (term "0,0,0,1") (inst "selectSK=case_study_Node_tail_0"))
            (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "39") (ifInst ""  (formula "44")) (ifInst ""  (formula "3")))
            (rule "replaceKnownSelect_taclet0000_6" (formula "40") (term "0,0"))
            (rule "replaceKnownSelect_taclet0000_6" (formula "38") (term "1,1,1,0"))
            (rule "replaceKnownSelect_taclet0000_6" (formula "38") (term "1,1,2,0"))
            (rule "replaceKnownSelect_taclet0000_6" (formula "38") (term "1,0,0,0,0"))
            (rule "replaceKnownSelect_taclet0000_6" (formula "38") (term "1,0,0,0,1,0,0"))
            (rule "replaceKnownSelect_taclet0000_6" (formula "38") (term "1,1,0,0,1,1,0,0"))
            (rule "pullOutSelect" (formula "40") (term "1,1,1") (inst "selectSK=case_study_Product_price_0"))
            (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "40"))
            (rule "pullOutSelect" (formula "41") (term "0,1,1") (inst "selectSK=case_study_Product_price_1"))
            (rule "simplifySelectOfAnonEQ" (formula "41") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "41"))
            (rule "pullOutSelect" (formula "38") (term "1,1,0") (inst "selectSK=case_study_Node_head_1"))
            (rule "simplifySelectOfAnonEQ" (formula "38") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "38"))
            (rule "replaceKnownSelect_taclet0000_9" (formula "39") (term "1,2,0"))
            (rule "replaceKnownSelect_taclet0000_9" (formula "39") (term "0,0,0,0"))
            (rule "replaceKnownSelect_taclet0000_9" (formula "39") (term "0,0,0,1,0,0"))
            (rule "replaceKnownSelect_taclet0000_9" (formula "39") (term "1,0,0,1,1,0,0"))
            (rule "pullOutSelect" (formula "42") (term "1,2,0") (inst "selectSK=case_study_Order_product_1"))
            (rule "simplifySelectOfAnonEQ" (formula "42") (ifseqformula "28"))
             (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "47")) (ifInst ""  (formula "5")))
            (rule "replaceKnownSelect_taclet0000_10" (formula "43") (term "1,1,0"))
            (rule "replaceKnownSelect_taclet0000_10" (formula "43") (term "0,0,0,0"))
            (rule "replaceKnownSelect_taclet0000_10" (formula "43") (term "0,0,0,1,0,0"))
            (rule "replaceKnownSelect_taclet0000_10" (formula "43") (term "1,0,0,1,1,0,0"))
            (rule "commuteUnion" (formula "37") (term "1"))
            (rule "limit_java_lang_Object__inv_free_" (formula "34"))
            (rule "replace_known_left" (formula "34") (term "1") (ifseqformula "35"))
             (builtin "One Step Simplification" (formula "34"))
            (rule "limit_java_lang_Object__inv_" (formula "46"))
            (rule "replace_known_left" (formula "46") (term "1") (ifseqformula "47"))
             (builtin "One Step Simplification" (formula "46"))
            (rule "cnf_rightDist" (formula "45"))
             (builtin "One Step Simplification" (formula "45"))
            (rule "commute_or" (formula "45"))
            (rule "cnf_rightDist" (formula "42") (term "0,0"))
            (rule "commute_or" (formula "42") (term "0,0,0"))
            (rule "cnf_rightDist" (formula "39") (term "0,0"))
            (rule "commute_or" (formula "39") (term "0,0,0"))
            (rule "cnf_rightDist" (formula "40") (term "0,0"))
            (rule "commute_or" (formula "40") (term "0,0,0"))
            (rule "methodCallEmpty" (formula "51") (term "1"))
            (rule "cnf_rightDist" (formula "44") (term "0,0"))
            (rule "commute_or" (formula "44") (term "0,0,0"))
            (rule "tryEmpty" (formula "51") (term "1"))
            (rule "emptyModality" (formula "51") (term "1"))
            (rule "andRight" (formula "51"))
            (branch "Case 1"
               (rule "andRight" (formula "51"))
               (branch "Case 1"
                  (rule "andRight" (formula "51"))
                  (branch "Case 1"
                     (rule "orRight" (formula "51"))
                      (builtin "One Step Simplification" (formula "52"))
                      (builtin "One Step Simplification" (formula "51"))
                     (rule "replaceKnownSelect_taclet0000_1" (formula "52") (term "0"))
                     (rule "replaceKnownSelect_taclet0000_1" (formula "51") (term "1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0000_2" (formula "52") (term "0"))
                      (builtin "One Step Simplification" (formula "52"))
                     (rule "closeTrue" (formula "52"))
                  )
                  (branch "Case 2"
                     (rule "andRight" (formula "51"))
                     (branch "Case 1"
                         (builtin "One Step Simplification" (formula "51"))
                        (rule "replaceKnownSelect_taclet0000_4" (formula "51") (term "0"))
                        (rule "applyEq" (formula "32") (term "2,0") (ifseqformula "11"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "23"))
                        (rule "applyEq" (formula "30") (term "2,0") (ifseqformula "10"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "commuteUnion" (formula "51") (term "1"))
                        (rule "close" (formula "51") (ifseqformula "38"))
                     )
                     (branch "Case 2"
                        (rule "andRight" (formula "51"))
                        (branch "Case 1"
                           (rule "notRight" (formula "51"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "Case 2"
                           (rule "andRight" (formula "51"))
                           (branch "Case 1"
                              (rule "notRight" (formula "51"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "Case 2"
                              (rule "andRight" (formula "51"))
                              (branch "Case 1"
                                 (rule "orRight" (formula "51"))
                                 (rule "orRight" (formula "51"))
                                 (rule "andRight" (formula "53"))
                                 (branch
                                    (rule "notRight" (formula "53"))
                                    (rule "close" (formula "53") (ifseqformula "1"))
                                 )
                                 (branch "Case 2"
                                     (builtin "One Step Simplification" (formula "53"))
                                     (builtin "One Step Simplification" (formula "52"))
                                     (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "50")))
                                    (rule "false_right" (formula "51"))
                                    (rule "replaceKnownSelect_taclet0000_6" (formula "51") (term "0"))
                                    (rule "replaceKnownSelect_taclet0000_5" (formula "52") (term "1,0"))
                                    (rule "replaceKnownSelect_taclet0000_7" (formula "52") (term "0"))
                                    (rule "replaceKnownSelect_taclet0000_1" (formula "52") (term "1,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0000_2" (formula "52") (term "1,1,1"))
                                    (rule "replaceKnownSelect_taclet0000_8" (formula "52") (term "1"))
                                    (rule "replace_known_right" (formula "39") (term "0,0,0,0,0") (ifseqformula "51"))
                                     (builtin "One Step Simplification" (formula "39"))
                                    (rule "replace_known_right" (formula "45") (term "0") (ifseqformula "51"))
                                     (builtin "One Step Simplification" (formula "45"))
                                    (rule "inEqSimp_geqRight" (formula "52"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "8") (term "1,1") (ifseqformula "24"))
                                    (rule "applyEq" (formula "33") (term "2,0") (ifseqformula "12"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "applyEq" (formula "31") (term "2,0") (ifseqformula "11"))
                                     (builtin "One Step Simplification" (formula "31"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "46"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0"))
                                    (rule "add_literals" (formula "1") (term "0"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                              (branch "Case 2"
                                  (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "47")))
                                 (rule "closeTrue" (formula "51"))
                              )
                           )
                        )
                     )
                  )
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "51"))
                  (rule "closeTrue" (formula "51"))
               )
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "51"))
               (rule "allRight" (formula "51") (inst "sk=f_0"))
               (rule "allRight" (formula "51") (inst "sk=o_0"))
               (rule "orRight" (formula "51"))
               (rule "orRight" (formula "51"))
               (rule "eqSymm" (formula "53"))
               (rule "applyEq" (formula "32") (term "2,0") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "32"))
               (rule "applyEq" (formula "30") (term "2,0") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "30"))
               (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "23"))
               (rule "pullOutSelect" (formula "53") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")) (ifInst ""  (formula "53")))
               (rule "applyEqReverse" (formula "54") (term "0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "54"))
               (rule "closeTrue" (formula "54"))
            )
         )
         (branch "Exceptional Post (__insertHead_trampoline)"
             (builtin "One Step Simplification" (formula "32"))
             (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "31")) (ifInst ""  (formula "30")) (ifInst ""  (formula "31")) (ifInst ""  (formula "31")) (ifInst ""  (formula "31")) (ifInst ""  (formula "30")))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "29"))
            (rule "andLeft" (formula "30"))
            (rule "andLeft" (formula "29"))
            (rule "andLeft" (formula "31"))
            (rule "notLeft" (formula "29"))
            (rule "close" (formula "33") (ifseqformula "32"))
         )
         (branch "Pre (__insertHead_trampoline)"
             (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "29")) (ifInst ""  (formula "28")) (ifInst ""  (formula "29")) (ifInst ""  (formula "9")) (ifInst ""  (formula "2")) (ifInst ""  (formula "28")) (ifInst ""  (formula "5")))
            (rule "inEqSimp_commuteLeq" (formula "30") (term "1"))
            (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "23"))
            (rule "applyEq" (formula "30") (term "1,1,1,0") (ifseqformula "23"))
            (rule "applyEq" (formula "30") (term "1,1") (ifseqformula "17"))
            (rule "applyEq" (formula "30") (term "0,1") (ifseqformula "23"))
            (rule "replace_known_left" (formula "30") (term "1") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "orRight" (formula "30"))
            (rule "replace_known_right" (formula "31") (term "0,0") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "31")))
            (rule "closeFalse" (formula "7"))
         )
      )
      (branch "if _newHead.__getPrice_trampoline(false) <= this.head.__getPrice_trampoline(false) false"
          (builtin "One Step Simplification" (formula "30"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "elim_double_block_2" (formula "30") (term "1"))
          (builtin "Use Operation Contract" (formula "30") (newnames "heapBefore___insertTail_trampoline,exc_2,heapAfter___insertTail_trampoline,anon_heap___insertTail_trampoline") (contract "case_study.Node[case_study.Node::__insertTail_trampoline(case_study.Order,boolean,boolean,boolean)].JML normal_behavior operation contract.0") (modality "diamond"))
         (branch "Post (__insertTail_trampoline)"
             (builtin "One Step Simplification" (formula "32"))
             (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "31")) (ifInst ""  (formula "30")) (ifInst ""  (formula "31")) (ifInst ""  (formula "31")) (ifInst ""  (formula "31")) (ifInst ""  (formula "30")))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "29"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "29"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "31"))
            (rule "andLeft" (formula "29"))
            (rule "andLeft" (formula "33"))
            (rule "andLeft" (formula "34"))
            (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=case_study_Node_head_0"))
            (rule "simplifySelectOfAnonEQ" (formula "31") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "40")) (ifInst ""  (formula "2")))
            (rule "replaceKnownSelect_taclet0100_0" (formula "34") (term "1,1,1,1,1"))
            (rule "eqSymm" (formula "32"))
            (rule "hideAuxiliaryEq" (formula "32"))
            (rule "replaceKnownAuxiliaryConstant_taclet0100_1" (formula "31") (term "1"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "replaceKnownAuxiliaryConstant_taclet0100_1" (formula "33") (term "1,1,1,1,1"))
            (rule "pullOutSelect" (formula "28") (term "0") (inst "selectSK=java_lang_Object_packed_0"))
            (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "40")) (ifInst ""  (formula "2")))
            (rule "applyEqRigid" (formula "28") (term "1") (ifseqformula "29"))
            (rule "pullOutSelect" (formula "33") (term "0") (inst "selectSK=case_study_Node_footprint_0"))
            (rule "simplifySelectOfAnonEQ" (formula "33") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "41")) (ifInst ""  (formula "2")))
            (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=java_lang_Object_packed_1"))
            (rule "simplifySelectOfAnonEQ" (formula "30") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "41")) (ifInst ""  (formula "4")))
            (rule "applyEqRigid" (formula "30") (term "1") (ifseqformula "31"))
            (rule "pullOutSelect" (formula "36") (term "1,0,1,1") (inst "selectSK=case_study_Order_product_0"))
            (rule "simplifySelectOfAnonEQ" (formula "36") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "36"))
            (rule "inEqSimp_commuteGeq" (formula "37") (term "1,1"))
            (rule "pullOutSelect" (formula "37") (term "0,0") (inst "selectSK=case_study_Node_tail_0"))
            (rule "simplifySelectOfAnonEQ" (formula "37") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "37") (ifInst ""  (formula "44")) (ifInst ""  (formula "2")))
            (rule "replaceKnownSelect_taclet0100_6" (formula "36") (term "1,1,1,0"))
            (rule "replaceKnownSelect_taclet0100_6" (formula "36") (term "1,1,2,0"))
            (rule "replaceKnownSelect_taclet0100_6" (formula "38") (term "0,0,0,1"))
            (rule "replaceKnownSelect_taclet0100_6" (formula "36") (term "1,0,0,0,0"))
            (rule "replaceKnownSelect_taclet0100_6" (formula "36") (term "1,0,0,0,1,0,0"))
            (rule "replaceKnownSelect_taclet0100_6" (formula "36") (term "1,1,0,0,1,1,0,0"))
            (rule "pullOutSelect" (formula "38") (term "1,1,1") (inst "selectSK=case_study_Product_price_0"))
            (rule "simplifySelectOfAnonEQ" (formula "38") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "38"))
            (rule "pullOutSelect" (formula "39") (term "0,1,1") (inst "selectSK=case_study_Product_price_1"))
            (rule "simplifySelectOfAnonEQ" (formula "39") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "39"))
            (rule "pullOutSelect" (formula "36") (term "1,1,0") (inst "selectSK=case_study_Node_head_1"))
            (rule "simplifySelectOfAnonEQ" (formula "36") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "36"))
            (rule "replaceKnownSelect_taclet0100_9" (formula "37") (term "1,2,0"))
            (rule "replaceKnownSelect_taclet0100_9" (formula "37") (term "0,0,0,0"))
            (rule "replaceKnownSelect_taclet0100_9" (formula "37") (term "0,0,0,1,0,0"))
            (rule "replaceKnownSelect_taclet0100_9" (formula "37") (term "1,0,0,1,1,0,0"))
            (rule "pullOutSelect" (formula "40") (term "0,0,0,0") (inst "selectSK=case_study_Order_product_1"))
            (rule "simplifySelectOfAnonEQ" (formula "40") (ifseqformula "27"))
             (builtin "One Step Simplification" (formula "40") (ifInst ""  (formula "46")))
            (rule "replaceKnownSelect_taclet0100_10" (formula "41") (term "1,1,0"))
            (rule "replaceKnownSelect_taclet0100_10" (formula "41") (term "1,2,0"))
            (rule "replaceKnownSelect_taclet0100_10" (formula "41") (term "0,0,0,1,0,0"))
            (rule "replaceKnownSelect_taclet0100_10" (formula "41") (term "1,0,0,1,1,0,0"))
            (rule "commuteUnion" (formula "35") (term "1"))
            (rule "commute_or" (formula "33"))
            (rule "limit_java_lang_Object__inv_free_" (formula "32"))
            (rule "replace_known_left" (formula "32") (term "1") (ifseqformula "33"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "limit_java_lang_Object__inv_" (formula "44"))
            (rule "replace_known_left" (formula "44") (term "1") (ifseqformula "45"))
             (builtin "One Step Simplification" (formula "44"))
            (rule "cnf_rightDist" (formula "43"))
             (builtin "One Step Simplification" (formula "43"))
            (rule "commute_or" (formula "43"))
            (rule "commute_or" (formula "41") (term "0,0"))
            (rule "cnf_rightDist" (formula "40") (term "0,0"))
            (rule "commute_or" (formula "40") (term "0,0,0"))
            (rule "cnf_rightDist" (formula "37") (term "0,0"))
            (rule "commute_or" (formula "37") (term "0,0,0"))
            (rule "cnf_rightDist" (formula "38") (term "0,0"))
            (rule "commute_or" (formula "38") (term "0,0,0"))
            (rule "methodCallEmpty" (formula "51") (term "1"))
            (rule "cnf_rightDist" (formula "42") (term "0,0"))
            (rule "commute_or" (formula "42") (term "0,0,0"))
            (rule "tryEmpty" (formula "51") (term "1"))
            (rule "emptyModality" (formula "51") (term "1"))
            (rule "andRight" (formula "51"))
            (branch "Case 1"
               (rule "andRight" (formula "51"))
               (branch "Case 1"
                  (rule "andRight" (formula "51"))
                  (branch "Case 1"
                     (rule "orRight" (formula "51"))
                      (builtin "One Step Simplification" (formula "52"))
                      (builtin "One Step Simplification" (formula "51"))
                     (rule "replaceKnownSelect_taclet0100_0" (formula "52") (term "0"))
                     (rule "replaceKnownSelect_taclet0100_0" (formula "51") (term "1"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0100_1" (formula "52") (term "0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0100_1" (formula "51") (term "1"))
                      (builtin "One Step Simplification" (formula "51"))
                     (rule "closeTrue" (formula "51"))
                  )
                  (branch "Case 2"
                     (rule "andRight" (formula "51"))
                     (branch "Case 1"
                         (builtin "One Step Simplification" (formula "51"))
                        (rule "replaceKnownSelect_taclet0100_3" (formula "51") (term "0"))
                        (rule "inEqSimp_geqRight" (formula "47"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "applyEq" (formula "29") (term "2,0") (ifseqformula "10"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "applyEq" (formula "31") (term "2,0") (ifseqformula "11"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "23"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "commuteUnion" (formula "51") (term "1"))
                        (rule "close" (formula "51") (ifseqformula "37"))
                     )
                     (branch "Case 2"
                        (rule "andRight" (formula "51"))
                        (branch "Case 1"
                           (rule "notRight" (formula "51"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "51")))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "Case 2"
                           (rule "andRight" (formula "51"))
                           (branch "Case 1"
                              (rule "notRight" (formula "51"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "50")))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "Case 2"
                              (rule "andRight" (formula "51"))
                              (branch "Case 1"
                                 (rule "orRight" (formula "51"))
                                 (rule "orRight" (formula "51"))
                                 (rule "andRight" (formula "53"))
                                 (branch
                                    (rule "notRight" (formula "53"))
                                    (rule "close" (formula "53") (ifseqformula "1"))
                                 )
                                 (branch "Case 2"
                                     (builtin "One Step Simplification" (formula "53"))
                                     (builtin "One Step Simplification" (formula "52"))
                                     (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "50")))
                                    (rule "false_right" (formula "51"))
                                    (rule "replaceKnownSelect_taclet0100_6" (formula "51") (term "0"))
                                    (rule "replaceKnownSelect_taclet0100_5" (formula "52") (term "1,0"))
                                    (rule "replaceKnownSelect_taclet0100_7" (formula "52") (term "0"))
                                    (rule "replaceKnownSelect_taclet0100_0" (formula "52") (term "1,1,1"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet0100_1" (formula "52") (term "1,1,1"))
                                    (rule "replaceKnownSelect_taclet0100_8" (formula "52") (term "1"))
                                    (rule "replace_known_right" (formula "37") (term "0,0,0,0,0") (ifseqformula "51"))
                                     (builtin "One Step Simplification" (formula "37"))
                                    (rule "replace_known_right" (formula "43") (term "0") (ifseqformula "51"))
                                     (builtin "One Step Simplification" (formula "43"))
                                    (rule "inEqSimp_geqRight" (formula "47"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "inEqSimp_geqRight" (formula "52"))
                                    (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                    (rule "polySimp_addComm1" (formula "1") (term "0"))
                                    (rule "applyEq" (formula "8") (term "1,1") (ifseqformula "24"))
                                    (rule "applyEq" (formula "30") (term "2,0") (ifseqformula "11"))
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "applyEq" (formula "32") (term "2,0") (ifseqformula "12"))
                                     (builtin "One Step Simplification" (formula "32"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "2"))
                                    (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                    (rule "polySimp_rightDist" (formula "2") (term "1"))
                                    (rule "mul_literals" (formula "2") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                    (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                    (rule "polySimp_elimOne" (formula "1") (term "0"))
                                    (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "45"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "inEqSimp_homoInEq1" (formula "1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                                    (rule "add_literals" (formula "1") (term "1,1,0"))
                                    (rule "times_zero_1" (formula "1") (term "1,0"))
                                    (rule "add_zero_right" (formula "1") (term "0"))
                                    (rule "leq_literals" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                              (branch "Case 2"
                                  (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "45")))
                                 (rule "closeTrue" (formula "51"))
                              )
                           )
                        )
                     )
                  )
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "51"))
                  (rule "closeTrue" (formula "51"))
               )
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "51"))
               (rule "allRight" (formula "51") (inst "sk=f_0"))
               (rule "allRight" (formula "51") (inst "sk=o_0"))
               (rule "orRight" (formula "51"))
               (rule "orRight" (formula "51"))
               (rule "eqSymm" (formula "53"))
               (rule "inEqSimp_geqRight" (formula "47"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
               (rule "applyEq" (formula "29") (term "2,0") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "29"))
               (rule "applyEq" (formula "31") (term "2,0") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "31"))
               (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "23"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "polySimp_mulComm0" (formula "1") (term "1"))
               (rule "polySimp_rightDist" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
               (rule "polySimp_elimOne" (formula "1") (term "1,1"))
               (rule "pullOutSelect" (formula "53") (term "0") (inst "selectSK=f_0_0"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "29"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "52")) (ifInst ""  (formula "53")))
               (rule "applyEqReverse" (formula "54") (term "0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "54"))
               (rule "closeTrue" (formula "54"))
            )
         )
         (branch "Exceptional Post (__insertTail_trampoline)"
             (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "31")) (ifInst ""  (formula "30")) (ifInst ""  (formula "31")) (ifInst ""  (formula "31")) (ifInst ""  (formula "31")) (ifInst ""  (formula "30")))
             (builtin "One Step Simplification" (formula "32"))
            (rule "andLeft" (formula "27"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "28"))
            (rule "andLeft" (formula "30"))
            (rule "notLeft" (formula "28"))
            (rule "close" (formula "31") (ifseqformula "30"))
         )
         (branch "Pre (__insertTail_trampoline)"
             (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "29")) (ifInst ""  (formula "28")) (ifInst ""  (formula "29")) (ifInst ""  (formula "8")) (ifInst ""  (formula "1")) (ifInst ""  (formula "28")) (ifInst ""  (formula "4")))
            (rule "inEqSimp_geqRight" (formula "26"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "applyEq" (formula "30") (term "1,1") (ifseqformula "17"))
            (rule "applyEq" (formula "7") (term "1,1") (ifseqformula "23"))
            (rule "applyEq" (formula "30") (term "0,1") (ifseqformula "23"))
            (rule "applyEq" (formula "30") (term "1,1,1,0") (ifseqformula "23"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "inEqSimp_subsumption0" (formula "30") (term "1") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq0" (formula "30") (term "0,1"))
            (rule "polySimp_mulComm0" (formula "30") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "30") (term "1,0,0,1"))
            (rule "mul_literals" (formula "30") (term "0,1,0,0,1"))
            (rule "polySimp_addAssoc" (formula "30") (term "0,0,1"))
            (rule "polySimp_addComm0" (formula "30") (term "0,0,0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "30") (term "0,0,1"))
            (rule "add_literals" (formula "30") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "30") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "30") (term "0,0,1"))
            (rule "qeq_literals" (formula "30") (term "0,1"))
             (builtin "One Step Simplification" (formula "30"))
            (rule "orRight" (formula "30"))
            (rule "replace_known_right" (formula "31") (term "0,0") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "30"))
             (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "31")))
            (rule "closeFalse" (formula "7"))
         )
      )
   )
   (branch "Exceptional Post (__getPrice_trampoline)"
       (builtin "One Step Simplification" (formula "22"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "20"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "21"))
      (rule "notLeft" (formula "19"))
      (rule "close" (formula "23") (ifseqformula "22"))
   )
   (branch "Pre (__getPrice_trampoline)"
       (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "1")))
      (rule "Class_invariant_axiom_for_case_study_Order" (formula "18") (ifseqformula "19"))
      (rule "true_left" (formula "18"))
      (rule "Free_class_invariant_axiom_for_case_study_Order" (formula "15") (ifseqformula "18"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "inEqSimp_commuteGeq" (formula "21") (term "1,1,1"))
      (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "10"))
      (rule "ssubsortDirect" (formula "21") (term "0"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "andLeft" (formula "21"))
      (rule "andLeft" (formula "22"))
      (rule "notLeft" (formula "22"))
      (rule "replace_known_left" (formula "23") (term "0,1") (ifseqformula "21"))
       (builtin "One Step Simplification" (formula "23"))
      (rule "replace_known_right" (formula "19") (term "0,1") (ifseqformula "26"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "true_left" (formula "19"))
      (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "10"))
      (rule "ssubsortDirect" (formula "17") (term "0"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "10"))
      (rule "ssubsortDirect" (formula "15") (term "0"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "10"))
      (rule "ssubsortDirect" (formula "19") (term "0"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "notLeft" (formula "19"))
      (rule "replace_known_right" (formula "21") (term "0,0,1") (ifseqformula "24"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "10"))
      (rule "ssubsortDirect" (formula "21") (term "0"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "20"))
      (rule "times_zero_1" (formula "19") (term "0,0"))
      (rule "add_zero_left" (formula "19") (term "0"))
      (rule "Free_class_invariant_axiom_for_case_study_Node" (formula "12") (ifseqformula "28"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "12"))
      (rule "andLeft" (formula "12"))
      (rule "sortsDisjointModuloNull" (formula "16") (term "0,1"))
      (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "9"))
      (rule "ssubsortDirect" (formula "17") (term "0"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "notLeft" (formula "17"))
      (rule "replace_known_right" (formula "35") (term "0,0,0") (ifseqformula "30"))
       (builtin "One Step Simplification" (formula "35"))
      (rule "replace_known_right" (formula "16") (term "1,0,1") (ifseqformula "30"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "true_left" (formula "16"))
      (rule "applyEq" (formula "12") (term "0,0") (ifseqformula "9"))
      (rule "ssubsortDirect" (formula "12") (term "0"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "9"))
      (rule "ssubsortDirect" (formula "14") (term "0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "9"))
      (rule "ssubsortDirect" (formula "16") (term "0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "Class_invariant_axiom_for_case_study_Node" (formula "8") (ifseqformula "33"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "eqSymm" (formula "8"))
      (rule "disjointDefinition" (formula "9") (term "1"))
      (rule "commuteUnion" (formula "8") (term "0,0"))
      (rule "limit_java_lang_Object__inv_free_" (formula "24"))
      (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "25"))
       (builtin "One Step Simplification" (formula "24"))
      (rule "limit_java_lang_Object__inv_free_" (formula "22"))
      (rule "replace_known_left" (formula "22") (term "1") (ifseqformula "23"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "Class_invariant_axiom_for_case_study_Order" (formula "38") (term "0") (ifseqformula "33"))
       (builtin "One Step Simplification" (formula "38"))
      (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "33"))
      (rule "close" (formula "38") (ifseqformula "1"))
   )
   (branch "Null reference (o = null)"
       (builtin "One Step Simplification" (formula "21"))
      (rule "notRight" (formula "21"))
      (rule "applyEq" (formula "7") (term "1,1,1,1") (ifseqformula "1"))
      (rule "Free_class_invariant_axiom_for_case_study_Order" (formula "16") (ifseqformula "20"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "inEqSimp_commuteGeq" (formula "22") (term "1,1,1"))
      (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "11"))
      (rule "ssubsortDirect" (formula "20") (term "0"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "notLeft" (formula "20"))
      (rule "replace_known_right" (formula "21") (term "0,0,1,1") (ifseqformula "26"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "11"))
      (rule "ssubsortDirect" (formula "16") (term "0"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "11"))
      (rule "ssubsortDirect" (formula "18") (term "0"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "11"))
      (rule "ssubsortDirect" (formula "20") (term "0"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "notLeft" (formula "20"))
      (rule "replace_known_right" (formula "21") (term "0,0,1,1") (ifseqformula "25"))
       (builtin "One Step Simplification" (formula "21"))
      (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "11"))
      (rule "ssubsortDirect" (formula "20") (term "0"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "andLeft" (formula "20"))
      (rule "replace_known_left" (formula "22") (term "0,1") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "11"))
      (rule "ssubsortDirect" (formula "22") (term "0"))
       (builtin "One Step Simplification" (formula "22"))
      (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "21"))
      (rule "times_zero_1" (formula "20") (term "0,0"))
      (rule "add_zero_left" (formula "20") (term "0"))
      (rule "Free_class_invariant_axiom_for_case_study_Node" (formula "13") (ifseqformula "30"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "13"))
      (rule "andLeft" (formula "13"))
      (rule "replace_known_left" (formula "18") (term "0,1") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "notLeft" (formula "18"))
      (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "32"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "true_left" (formula "13"))
      (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "31"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "30"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "true_left" (formula "15"))
      (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "29"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "true_left" (formula "15"))
      (rule "applyEq" (formula "13") (term "1") (ifseqformula "1"))
      (rule "applyEq" (formula "28") (term "0") (ifseqformula "10"))
      (rule "ssubsortDirect" (formula "28"))
      (rule "closeTrue" (formula "28"))
   )
)
(branch "Exceptional Post (__getPrice_trampoline)"
    (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")) (ifInst ""  (formula "14")))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "15"))
   (rule "notLeft" (formula "13"))
   (rule "close" (formula "16") (ifseqformula "15"))
)
(branch "Pre (__getPrice_trampoline)"
    (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "13")) (ifInst ""  (formula "1")) (ifInst ""  (formula "4")))
   (rule "Class_invariant_axiom_for_case_study_Node" (formula "8") (ifseqformula "14"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "8"))
   (rule "eqSymm" (formula "8"))
   (rule "disjointDefinition" (formula "9") (term "1"))
   (rule "commuteUnion" (formula "8") (term "0,0"))
   (rule "Free_class_invariant_axiom_for_case_study_Node" (formula "14") (ifseqformula "16"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "14"))
   (rule "sortsDisjointModuloNull" (formula "18") (term "0,1"))
   (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "11"))
   (rule "ssubsortDirect" (formula "20") (term "0"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "11"))
   (rule "ssubsortDirect" (formula "14") (term "0"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "11"))
   (rule "ssubsortDirect" (formula "18") (term "0"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "notLeft" (formula "18"))
   (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "11"))
   (rule "ssubsortDirect" (formula "18") (term "0"))
    (builtin "One Step Simplification" (formula "18"))
   (rule "notLeft" (formula "18"))
   (rule "replace_known_right" (formula "20") (term "1") (ifseqformula "19"))
    (builtin "One Step Simplification" (formula "20"))
   (rule "false_right" (formula "20"))
   (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "11"))
   (rule "ssubsortDirect" (formula "16") (term "0"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "Class_invariant_axiom_for_case_study_Order" (formula "22") (ifseqformula "20"))
   (rule "closeTrue" (formula "22"))
)
(branch "Null reference (_newHead = null)"
    (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "13")))
   (rule "closeTrue" (formula "15"))
)
)
}
