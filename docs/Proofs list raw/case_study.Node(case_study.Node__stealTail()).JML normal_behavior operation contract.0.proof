\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:off",
        "Strings" : "Strings:on",
        "assertions" : "assertions:on",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:treatAsAxiom",
        "moreSeqRules" : "moreSeqRules:on",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:ban",
        "sequences" : "sequences:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 50000,
        "Timeout" : -1,
        "options" : { 
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_DELAYED",
            "DEP_OPTIONS_KEY" : "DEP_ON",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_SCOPE_INV_TACLET",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_COMPLETION",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_OFF",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_DEFAULT",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\javaSource "../../../property-checker-out/case_study";

\proofObligation "#Proof Obligation Settings
#Sat Oct 05 21:39:30 CEST 2024
contract=case_study.Node[case_study.Node\\:\\:stealTail()].JML normal_behavior operation contract.0
name=case_study.Node[case_study.Node\\:\\:stealTail()].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "florian" ) (keyVersion "7ff2d9dc3ea43e071577b3f8d0e3a537f9213982"))

(autoModeTime "35698")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "5"))
(rule "andLeft" (formula "5"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "10") (term "0,0,0,0,1"))
(rule "eqSymm" (formula "10") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "5") (term "0,0") (ifseqformula "9"))
 (builtin "One Step Simplification" (formula "5"))
(rule "elementOfSingleton" (formula "10") (term "0,0,0,0,1,0,1"))
(rule "assignment" (formula "10") (term "1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "limit_java_lang_Object__inv_free_" (formula "8"))
(rule "replace_known_left" (formula "8") (term "1") (ifseqformula "9"))
 (builtin "One Step Simplification" (formula "8"))
(rule "limit_java_lang_Object__inv_" (formula "6"))
(rule "replace_known_left" (formula "6") (term "1") (ifseqformula "7"))
 (builtin "One Step Simplification" (formula "6"))
(rule "cnf_rightDist" (formula "5"))
 (builtin "One Step Simplification" (formula "5"))
(rule "commute_or" (formula "5"))
(rule "limit_java_lang_Object__inv_free_" (formula "10"))
(rule "replace_known_left" (formula "10") (term "1") (ifseqformula "11"))
 (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "9")))
(rule "true_left" (formula "10"))
(rule "limit_java_lang_Object__inv_" (formula "7"))
(rule "replace_known_left" (formula "7") (term "0") (ifseqformula "6"))
 (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "8")))
(rule "true_left" (formula "7"))
(rule "methodBodyExpand" (formula "12") (term "1") (newnames "heapBefore_stealTail,savedHeapBefore_stealTail"))
 (builtin "One Step Simplification" (formula "12"))
 (builtin "Use Operation Contract" (formula "12") (newnames "heapBefore_havocPacked,exc_0,heapAfter_havocPacked,anon_heap_havocPacked") (contract "case_study.Node[java.lang.Object::havocPacked()].JML normal_behavior operation contract.0") (modality "diamond"))
(branch "Post (havocPacked)"
    (builtin "One Step Simplification" (formula "12"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "andLeft" (formula "12"))
    (builtin "JML assume" (formula "15"))
    (builtin "One Step Simplification" (formula "15"))
   (rule "impRight" (formula "15"))
   (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=java_lang_Object_packed_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "4")))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "0"))
   (rule "returnUnfold" (formula "16") (term "1") (inst "#v0=n"))
   (rule "variableDeclarationAssign" (formula "16") (term "1"))
   (rule "variableDeclaration" (formula "16") (term "1") (newnames "n"))
   (rule "assignment_read_attribute_this" (formula "16"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "pullOutSelect" (formula "16") (term "0,1,0") (inst "selectSK=case_study_Node_tail_0"))
   (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "4")))
   (rule "elementOfSingleton" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "hideAuxiliaryEq" (formula "1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "16") (term "0,1,0"))
   (rule "methodCallReturn" (formula "16") (term "1"))
   (rule "assignment" (formula "16") (term "1"))
    (builtin "One Step Simplification" (formula "16"))
   (rule "methodCallEmpty" (formula "16") (term "1"))
   (rule "tryEmpty" (formula "16") (term "1"))
   (rule "emptyModality" (formula "16") (term "1"))
   (rule "andRight" (formula "16"))
   (branch "Case 1"
      (rule "andRight" (formula "16"))
      (branch "Case 1"
         (rule "andRight" (formula "16"))
         (branch "Case 1"
             (builtin "One Step Simplification" (formula "16"))
            (rule "replaceKnownSelect_taclet0_2" (formula "16") (term "0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "16") (term "0"))
             (builtin "One Step Simplification" (formula "16"))
            (rule "closeTrue" (formula "16"))
         )
         (branch "Case 2"
            (rule "andRight" (formula "16"))
            (branch "Case 1"
               (rule "impRight" (formula "16"))
               (rule "notLeft" (formula "1"))
                (builtin "One Step Simplification" (formula "17") (userinteraction))
               (rule "Class_invariant_axiom_for_case_study_Node" (formula "8") (ifseqformula "16") (userinteraction))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "split_or_strong" (formula "10") (userinteraction))
               (branch "Case 1"
                   (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "10")))
                  (rule "closeTrue" (formula "17"))
               )
               (branch "Case 2"
                  (rule "unlimit_java_lang_Object__inv_" (formula "10") (userinteraction))
                   (builtin "Use Dependency Contract" (formula "20") (ifInst ""  (formula "10")) (ifInst ""  (formula "15")) (contract "case_study.Node[java.lang.Object::<inv>()].JML accessible clause.0") (userinteraction))
                  (rule "impLeft" (formula "17") (userinteraction))
                  (branch "Case 1"
                     (rule "andRight" (formula "17"))
                     (branch "Case 1"
                        (rule "andRight" (formula "17"))
                        (branch "Case 1"
                           (rule "andRight" (formula "17"))
                           (branch "Case 1"
                              (rule "andRight" (formula "17"))
                              (branch "Case 1"
                                 (rule "notRight" (formula "17"))
                                 (rule "close" (formula "18") (ifseqformula "1"))
                              )
                              (branch "Case 2"
                                  (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "18")))
                                 (rule "referencedObjectIsCreatedRight" (formula "17") (ifseqformula "18"))
                                 (rule "close" (formula "17") (ifseqformula "2"))
                              )
                           )
                           (branch "Case 2"
                              (rule "andRight" (formula "17"))
                              (branch
                                 (rule "close" (formula "17") (ifseqformula "2"))
                              )
                              (branch "Case 2"
                                  (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "18")))
                                 (rule "wellFormedAnonEQ" (formula "17") (ifseqformula "15"))
                                 (rule "false_right" (formula "19"))
                                 (rule "eqSymm" (formula "8"))
                                 (rule "replace_known_right" (formula "8") (term "0,1,0") (ifseqformula "18"))
                                  (builtin "One Step Simplification" (formula "8"))
                                 (rule "replace_known_right" (formula "9") (term "0,0") (ifseqformula "18"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "18"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "14")))
                                 (rule "closeTrue" (formula "17"))
                              )
                           )
                        )
                        (branch
                           (rule "close" (formula "17") (ifseqformula "10"))
                        )
                     )
                     (branch "Case 2"
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "18")))
                        (rule "false_right" (formula "19"))
                        (rule "eqSymm" (formula "8"))
                        (rule "replace_known_right" (formula "8") (term "0,1,0") (ifseqformula "18"))
                         (builtin "One Step Simplification" (formula "8"))
                        (rule "replace_known_right" (formula "9") (term "0,0") (ifseqformula "18"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "18"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "disjointDefinition" (formula "17"))
                        (rule "disjointDefinition" (formula "9"))
                        (rule "disjointWithSingleton2" (formula "17"))
                        (rule "disjointAllFields" (formula "17") (term "0") (ifseqformula "9"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "closeTrue" (formula "17"))
                     )
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "18")))
                     (rule "false_right" (formula "19"))
                     (rule "eqSymm" (formula "8"))
                     (rule "replace_known_right" (formula "8") (term "0,1,0") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "10"))
                      (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "20")))
                     (rule "closeFalse" (formula "17"))
                  )
               )
            )
            (branch "Case 2"
               (rule "andRight" (formula "16"))
               (branch "Case 1"
                  (rule "orRight" (formula "16"))
                  (rule "orRight" (formula "16"))
                  (rule "andRight" (formula "18"))
                  (branch "Case 1"
                     (rule "notRight" (formula "18"))
                      (builtin "One Step Simplification" (formula "1"))
                      (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "1")))
                     (rule "closeTrue" (formula "18"))
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "18"))
                      (builtin "One Step Simplification" (formula "17"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "inEqSimp_geqRight" (formula "18"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "pullOutSelect" (formula "18") (term "0") (inst "selectSK=case_study_Node_tail_1"))
                     (rule "applyEq" (formula "2") (term "1,1,1,0") (ifseqformula "1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                     (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "ifthenelse_negated" (formula "1") (term "0"))
                     (rule "inEqSimp_homoInEq0" (formula "2"))
                     (rule "polySimp_addComm1" (formula "2") (term "0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                     (rule "polySimp_mulComm0" (formula "2") (term "1"))
                     (rule "polySimp_rightDist" (formula "2") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                     (rule "mul_literals" (formula "2") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                     (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=case_study_Product_price_0"))
                     (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "elementOfSingleton" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "inEqSimp_homoInEq1" (formula "3"))
                     (rule "polySimp_addComm1" (formula "3") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                     (rule "polySimp_mulComm0" (formula "3") (term "1"))
                     (rule "polySimp_rightDist" (formula "3") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                     (rule "mul_literals" (formula "3") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                     (rule "pullOutSelect" (formula "2") (term "1,1,0,0,1,0,0") (inst "selectSK=case_study_Node_head_0"))
                     (rule "applyEq" (formula "3") (term "1,1,1,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "2"))
                     (rule "applyEq" (formula "3") (term "1,1,2,0") (ifseqformula "2"))
                     (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "20")))
                     (rule "elementOfSingleton" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "ifthenelse_negated" (formula "2") (term "0"))
                     (rule "pullOutSelect" (formula "4") (term "1,1,0") (inst "selectSK=case_study_Node_head_1"))
                     (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "22")))
                     (rule "elementOfSingleton" (formula "4") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "ifthenelse_negated" (formula "4") (term "0"))
                     (rule "pullOutSelect" (formula "3") (term "1,0,0,1,0,0") (inst "selectSK=case_study_Order_product_0"))
                     (rule "applyEq" (formula "4") (term "0,0,0,0,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "4") (term "1,2,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "4") (term "1,1,0") (ifseqformula "3"))
                     (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "19"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "pullOutSelect" (formula "6") (term "0") (inst "selectSK=case_study_Product_price_1"))
                     (rule "simplifySelectOfAnonEQ" (formula "6") (ifseqformula "20"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "elementOfSingleton" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "pullOutSelect" (formula "6") (term "1,1,0") (inst "selectSK=case_study_Order_product_1"))
                     (rule "applyEq" (formula "7") (term "0,0,0,0,0") (ifseqformula "6"))
                     (rule "applyEq" (formula "7") (term "1,0,0,1,0,0") (ifseqformula "6"))
                     (rule "applyEq" (formula "7") (term "1,2,0") (ifseqformula "6"))
                     (rule "simplifySelectOfAnonEQ" (formula "6") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "elementOfSingleton" (formula "6") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "6"))
                     (rule "Class_invariant_axiom_for_case_study_Node" (formula "16") (ifseqformula "23"))
                     (rule "andLeft" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "eqSymm" (formula "16"))
                     (rule "replace_known_right" (formula "16") (term "0,1,0") (ifseqformula "26"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "replace_known_right" (formula "18") (term "0") (ifseqformula "26"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "replace_known_right" (formula "17") (term "0,0") (ifseqformula "26"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "disjointDefinition" (formula "17"))
                     (rule "commuteUnion_2" (formula "16") (term "0,0"))
                     (rule "commuteUnion" (formula "16") (term "0,0,0"))
                     (rule "Free_class_invariant_axiom_for_case_study_Node" (formula "21") (ifseqformula "25"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "andLeft" (formula "21"))
                     (rule "replace_known_right" (formula "27") (term "0,0,1") (ifseqformula "32"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "sortsDisjointModuloNull" (formula "25") (term "0,1"))
                     (rule "replace_known_right" (formula "25") (term "0,0,1") (ifseqformula "32"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "true_left" (formula "25"))
                     (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "19"))
                     (rule "ssubsortDirect" (formula "21") (term "0"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "19"))
                     (rule "ssubsortDirect" (formula "23") (term "0"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "19"))
                     (rule "ssubsortDirect" (formula "25") (term "0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "notLeft" (formula "25"))
                     (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "19"))
                     (rule "ssubsortDirect" (formula "25") (term "0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "Free_class_invariant_axiom_for_case_study_Order" (formula "22") (ifseqformula "29"))
                     (rule "andLeft" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "andLeft" (formula "22"))
                     (rule "inEqSimp_commuteGeq" (formula "28") (term "1,1,1"))
                     (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "21"))
                     (rule "ssubsortDirect" (formula "26") (term "0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "notLeft" (formula "26"))
                     (rule "replace_known_right" (formula "27") (term "0,0,1,1") (ifseqformula "35"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "21"))
                     (rule "ssubsortDirect" (formula "22") (term "0"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "21"))
                     (rule "ssubsortDirect" (formula "24") (term "0"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "21"))
                     (rule "ssubsortDirect" (formula "28") (term "0"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "andLeft" (formula "28"))
                     (rule "andLeft" (formula "29"))
                     (rule "notLeft" (formula "29"))
                     (rule "replace_known_left" (formula "27") (term "0,1") (ifseqformula "28"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "replace_known_right" (formula "26") (term "0,1") (ifseqformula "36"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "true_left" (formula "26"))
                     (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "21"))
                     (rule "ssubsortDirect" (formula "26") (term "0"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "inEqSimp_exactShadow3" (formula "27") (ifseqformula "26"))
                     (rule "times_zero_1" (formula "27") (term "0,0"))
                     (rule "add_zero_left" (formula "27") (term "0"))
                     (rule "Free_class_invariant_axiom_for_case_study_Customer" (formula "23") (ifseqformula "37"))
                     (rule "leq_literals" (formula "23") (term "1,0,1,1"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "qeq_literals" (formula "23") (term "0,1,1"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "andLeft" (formula "23"))
                     (rule "andLeft" (formula "23"))
                     (rule "andLeft" (formula "23"))
                     (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "22"))
                     (rule "ssubsortDirect" (formula "25") (term "0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "notLeft" (formula "25"))
                     (rule "applyEq" (formula "25") (term "0,0") (ifseqformula "22"))
                     (rule "ssubsortDirect" (formula "25") (term "0"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "andLeft" (formula "25"))
                     (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "22"))
                     (rule "ssubsortDirect" (formula "23") (term "0"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "inEqSimp_subsumption1" (formula "30") (ifseqformula "25"))
                     (rule "leq_literals" (formula "30") (term "0"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "true_left" (formula "30"))
                     (rule "Free_class_invariant_axiom_for_case_study_Product" (formula "28") (ifseqformula "39"))
                     (rule "leq_literals" (formula "28") (term "1,0,1,1"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "qeq_literals" (formula "28") (term "0,1,1"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "leq_literals" (formula "28") (term "1,0,1,1,0"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "qeq_literals" (formula "28") (term "0,1,1,0"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "andLeft" (formula "28"))
                     (rule "andLeft" (formula "28"))
                     (rule "andLeft" (formula "28"))
                     (rule "andLeft" (formula "28"))
                     (rule "applyEq" (formula "31") (term "0,0") (ifseqformula "27"))
                     (rule "ssubsortDirect" (formula "31") (term "0"))
                      (builtin "One Step Simplification" (formula "31"))
                     (rule "andLeft" (formula "31"))
                     (rule "applyEq" (formula "33") (term "0,0") (ifseqformula "27"))
                     (rule "ssubsortDirect" (formula "33") (term "0"))
                      (builtin "One Step Simplification" (formula "33"))
                     (rule "andLeft" (formula "33"))
                     (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "27"))
                     (rule "ssubsortDirect" (formula "28") (term "0"))
                      (builtin "One Step Simplification" (formula "28"))
                     (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "27"))
                     (rule "ssubsortDirect" (formula "30") (term "0"))
                      (builtin "One Step Simplification" (formula "30"))
                     (rule "notLeft" (formula "30"))
                     (rule "inEqSimp_exactShadow3" (formula "32") (ifseqformula "36"))
                     (rule "times_zero_1" (formula "32") (term "0,0"))
                     (rule "add_zero_left" (formula "32") (term "0"))
                     (rule "cnf_rightDist" (formula "39"))
                      (builtin "One Step Simplification" (formula "39"))
                     (rule "Free_class_invariant_axiom_for_java_lang_String" (formula "24") (ifseqformula "44"))
                     (rule "true_left" (formula "24"))
                     (rule "Free_class_invariant_axiom_for_java_lang_String" (formula "28") (ifseqformula "42"))
                     (rule "true_left" (formula "28"))
                     (rule "commute_or" (formula "37"))
                     (rule "ifthenelse_split" (formula "1") (term "0"))
                     (branch "self.tail.<created> = TRUE TRUE"
                        (rule "applyEqReverse" (formula "49") (term "0") (ifseqformula "2"))
                        (rule "applyEqReverse" (formula "6") (term "1,1,0") (ifseqformula "2"))
                        (rule "applyEqReverse" (formula "6") (term "1,0,0,0") (ifseqformula "2"))
                        (rule "applyEqReverse" (formula "6") (term "1,2,0") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "2"))
                        (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "2"))
                        (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "2"))
                        (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "2"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "replace_known_right" (formula "36") (term "0") (ifseqformula "47"))
                         (builtin "One Step Simplification" (formula "36"))
                        (rule "ifthenelse_split" (formula "4") (term "0"))
                        (branch "self.tail.tail.<created> = TRUE TRUE"
                           (rule "applyEqReverse" (formula "6") (term "1,1,0") (ifseqformula "5"))
                           (rule "applyEqReverse" (formula "6") (term "1,0,0,1,0,0") (ifseqformula "5"))
                           (rule "applyEqReverse" (formula "6") (term "1,2,0") (ifseqformula "5"))
                           (rule "applyEqReverse" (formula "6") (term "0,0,0,0,0") (ifseqformula "5"))
                           (rule "hideAuxiliaryEq" (formula "5"))
                           (rule "ifthenelse_split" (formula "2") (term "0"))
                           (branch " ¬self.tail.head = null ∧ ¬self.tail.head.<created> = TRUE TRUE"
                              (rule "andLeft" (formula "2"))
                              (rule "notLeft" (formula "3"))
                              (rule "notLeft" (formula "2"))
                              (rule "referencedObjectIsCreatedRight" (formula "41") (ifseqformula "40"))
                              (rule "close" (formula "41") (ifseqformula "9"))
                           )
                           (branch " ¬self.tail.head = null ∧ ¬self.tail.head.<created> = TRUE FALSE"
                              (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "2"))
                              (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "2"))
                              (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "2"))
                              (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "ifthenelse_split" (formula "4") (term "0"))
                              (branch " ¬self.tail.tail.head = null ∧ ¬self.tail.tail.head.<created> = TRUE TRUE"
                                 (rule "andLeft" (formula "4"))
                                 (rule "notLeft" (formula "4"))
                                 (rule "notLeft" (formula "4"))
                                 (rule "referencedObjectIsCreatedRight" (formula "39") (ifseqformula "40"))
                                 (rule "close" (formula "39") (ifseqformula "8"))
                              )
                              (branch " ¬self.tail.tail.head = null ∧ ¬self.tail.tail.head.<created> = TRUE FALSE"
                                 (rule "applyEqReverse" (formula "5") (term "0,0,0,0,0") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "5") (term "1,0,0,1,0,0") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "5") (term "1,1,0") (ifseqformula "4"))
                                 (rule "applyEqReverse" (formula "5") (term "1,2,0") (ifseqformula "4"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "ifthenelse_split" (formula "2") (term "0"))
                                 (branch " ¬self.tail.head.product = null ∧ ¬self.tail.head.product.<created> = TRUE TRUE"
                                    (rule "andLeft" (formula "2"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "39"))
                                    (rule "close" (formula "38") (ifseqformula "7"))
                                 )
                                 (branch " ¬self.tail.head.product = null ∧ ¬self.tail.head.product.<created> = TRUE FALSE"
                                    (rule "applyEqReverse" (formula "5") (term "1,1") (ifseqformula "2"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "inEqSimp_homoInEq0" (formula "4"))
                                    (rule "polySimp_addComm1" (formula "4") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "4"))
                                    (rule "polySimp_mulComm0" (formula "4") (term "1"))
                                    (rule "polySimp_rightDist" (formula "4") (term "1"))
                                    (rule "mul_literals" (formula "4") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "4") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "4") (term "1,1"))
                                    (rule "ifthenelse_split" (formula "3") (term "0"))
                                    (branch " ¬self.tail.tail.head.product = null ∧ ¬self.tail.tail.head.product.<created> = TRUE TRUE"
                                       (rule "andLeft" (formula "3"))
                                       (rule "notLeft" (formula "3"))
                                       (rule "notLeft" (formula "3"))
                                       (rule "referencedObjectIsCreatedRight" (formula "37") (ifseqformula "38"))
                                       (rule "close" (formula "37") (ifseqformula "6"))
                                    )
                                    (branch " ¬self.tail.tail.head.product = null ∧ ¬self.tail.tail.head.product.<created> = TRUE FALSE"
                                       (rule "applyEqReverse" (formula "4") (term "1,1") (ifseqformula "3"))
                                       (rule "hideAuxiliaryEq" (formula "3"))
                                       (rule "inEqSimp_homoInEq1" (formula "3"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1"))
                                       (rule "mul_literals" (formula "3") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                                       (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "32"))
                                       (rule "andLeft" (formula "3"))
                                       (rule "inEqSimp_homoInEq1" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                                       (rule "polySimp_rightDist" (formula "3") (term "1,0"))
                                       (rule "mul_literals" (formula "3") (term "0,1,0"))
                                       (rule "polySimp_addAssoc" (formula "3") (term "0"))
                                       (rule "polySimp_addComm0" (formula "3") (term "0,0"))
                                       (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
                                       (rule "add_literals" (formula "3") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "3") (term "1,0"))
                                       (rule "add_literals" (formula "3") (term "0"))
                                       (rule "leq_literals" (formula "3"))
                                       (rule "closeFalse" (formula "3"))
                                    )
                                 )
                              )
                           )
                        )
                        (branch "self.tail.tail.<created> = TRUE FALSE"
                           (rule "referencedObjectIsCreatedRight" (formula "40") (ifseqformula "48"))
                           (rule "close" (formula "40") (ifseqformula "9"))
                        )
                     )
                     (branch "self.tail.<created> = TRUE FALSE"
                        (rule "referencedObjectIsCreatedRight" (formula "41") (ifseqformula "48"))
                        (rule "close" (formula "41") (ifseqformula "10"))
                     )
                  )
               )
               (branch "Case 2"
                  (rule "andRight" (formula "16"))
                  (branch "Case 1"
                     (rule "notRight" (formula "16"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Case 2"
                     (rule "andRight" (formula "16"))
                     (branch "Case 1"
                        (rule "orRight" (formula "16"))
                        (rule "orRight" (formula "16"))
                        (rule "andRight" (formula "18"))
                        (branch "Case 1"
                           (rule "notRight" (formula "18"))
                            (builtin "One Step Simplification" (formula "1"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "1")))
                           (rule "closeTrue" (formula "18"))
                        )
                        (branch "Case 2"
                            (builtin "One Step Simplification" (formula "18"))
                            (builtin "One Step Simplification" (formula "17"))
                            (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
                           (rule "false_right" (formula "16"))
                           (rule "replaceKnownSelect_taclet0_2" (formula "16") (term "0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "16") (term "0"))
                           (rule "replaceKnownSelect_taclet0_2" (formula "17") (term "1,1,1,0"))
                           (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "17") (term "1,1,1,0"))
                           (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "16"))
                            (builtin "One Step Simplification" (formula "6"))
                           (rule "inEqSimp_geqRight" (formula "17"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1"))
                           (rule "polySimp_rightDist" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                           (rule "pullOutSelect" (formula "1") (term "1,1,0") (inst "selectSK=case_study_Node_head_0"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                           (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "ifthenelse_negated" (formula "1") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "2"))
                           (rule "polySimp_addComm1" (formula "2") (term "0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "pullOutSelect" (formula "2") (term "1,0") (inst "selectSK=case_study_Order_product_0"))
                           (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "16"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "elementOfSingleton" (formula "2") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "3"))
                           (rule "polySimp_addComm1" (formula "3") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "pullOutSelect" (formula "2") (term "1,1,0") (inst "selectSK=case_study_Node_head_1"))
                           (rule "applyEq" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "3") (term "1,2,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "3") (term "0,0,0,0,0") (ifseqformula "2"))
                           (rule "simplifySelectOfAnonEQ" (formula "2") (ifseqformula "17"))
                            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "19")) (ifInst ""  (formula "7")))
                           (rule "elementOfSingleton" (formula "2") (term "0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "applyEqReverse" (formula "3") (term "0,0,0,0,0") (ifseqformula "2"))
                           (rule "applyEqReverse" (formula "3") (term "1,0,0,1,0,0") (ifseqformula "2"))
                           (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "2"))
                           (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "2"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "pullOutSelect" (formula "3") (term "1,0") (inst "selectSK=case_study_Order_product_1"))
                           (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "17"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "pullOutSelect" (formula "4") (term "1,1") (inst "selectSK=case_study_Product_price_0"))
                           (rule "simplifySelectOfAnonEQ" (formula "4") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "elementOfSingleton" (formula "4") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=case_study_Product_price_1"))
                           (rule "simplifySelectOfAnonEQ" (formula "5") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "elementOfSingleton" (formula "5") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "Free_class_invariant_axiom_for_case_study_Node" (formula "17") (ifseqformula "21"))
                           (rule "andLeft" (formula "17"))
                           (rule "andLeft" (formula "17"))
                           (rule "andLeft" (formula "17"))
                           (rule "andLeft" (formula "17"))
                           (rule "andLeft" (formula "17"))
                           (rule "andLeft" (formula "17"))
                           (rule "replace_known_right" (formula "23") (term "0,0,1") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "sortsDisjointModuloNull" (formula "21") (term "0,1"))
                           (rule "replace_known_right" (formula "21") (term "0,0,1") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "true_left" (formula "21"))
                           (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "15"))
                           (rule "ssubsortDirect" (formula "21") (term "0"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "notLeft" (formula "21"))
                           (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "ifthenelse_negated" (formula "2") (term "0"))
                           (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "15"))
                           (rule "ssubsortDirect" (formula "19") (term "0"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "15"))
                           (rule "ssubsortDirect" (formula "17") (term "0"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "15"))
                           (rule "ssubsortDirect" (formula "21") (term "0"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "Class_invariant_axiom_for_case_study_Node" (formula "14") (ifseqformula "26"))
                           (rule "andLeft" (formula "14"))
                           (rule "andLeft" (formula "14"))
                           (rule "eqSymm" (formula "14"))
                           (rule "replace_known_right" (formula "14") (term "0,1,0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "disjointDefinition" (formula "15"))
                           (rule "commuteUnion" (formula "14") (term "0,0"))
                           (rule "Free_class_invariant_axiom_for_case_study_Order" (formula "20") (ifseqformula "27"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "inEqSimp_commuteGeq" (formula "26") (term "1,1,1"))
                           (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "19"))
                           (rule "ssubsortDirect" (formula "22") (term "0"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "19"))
                           (rule "ssubsortDirect" (formula "20") (term "0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "19"))
                           (rule "ssubsortDirect" (formula "26") (term "0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "andLeft" (formula "26"))
                           (rule "andLeft" (formula "27"))
                           (rule "notLeft" (formula "27"))
                           (rule "replace_known_left" (formula "28") (term "0,1") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "replace_known_right" (formula "24") (term "0,1") (ifseqformula "35"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "19"))
                           (rule "ssubsortDirect" (formula "24") (term "0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "notLeft" (formula "24"))
                           (rule "replace_known_right" (formula "26") (term "0,0,1") (ifseqformula "33"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "19"))
                           (rule "ssubsortDirect" (formula "26") (term "0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_exactShadow3" (formula "24") (ifseqformula "25"))
                           (rule "times_zero_1" (formula "24") (term "0,0"))
                           (rule "add_zero_left" (formula "24") (term "0"))
                           (rule "cnf_rightDist" (formula "30"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "Free_class_invariant_axiom_for_case_study_Customer" (formula "21") (ifseqformula "35"))
                           (rule "leq_literals" (formula "21") (term "1,0,1,1"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "qeq_literals" (formula "21") (term "0,1,1"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "andLeft" (formula "21"))
                           (rule "andLeft" (formula "21"))
                           (rule "andLeft" (formula "21"))
                           (rule "applyEq" (formula "24") (term "0,0") (ifseqformula "20"))
                           (rule "ssubsortDirect" (formula "24") (term "0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "andLeft" (formula "24"))
                           (rule "applyEq" (formula "23") (term "0,0") (ifseqformula "20"))
                           (rule "ssubsortDirect" (formula "23") (term "0"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "notLeft" (formula "23"))
                           (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "20"))
                           (rule "ssubsortDirect" (formula "21") (term "0"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "inEqSimp_subsumption1" (formula "27") (ifseqformula "23"))
                           (rule "leq_literals" (formula "27") (term "0"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "true_left" (formula "27"))
                           (rule "Free_class_invariant_axiom_for_case_study_Product" (formula "26") (ifseqformula "37"))
                           (rule "leq_literals" (formula "26") (term "1,0,1,1"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "leq_literals" (formula "26") (term "1,0,1,1,0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "qeq_literals" (formula "26") (term "0,1,1"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "qeq_literals" (formula "26") (term "0,1,1,0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "andLeft" (formula "26"))
                           (rule "andLeft" (formula "26"))
                           (rule "andLeft" (formula "26"))
                           (rule "andLeft" (formula "26"))
                           (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "25"))
                           (rule "ssubsortDirect" (formula "28") (term "0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "notLeft" (formula "28"))
                           (rule "applyEq" (formula "26") (term "0,0") (ifseqformula "25"))
                           (rule "ssubsortDirect" (formula "26") (term "0"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "applyEq" (formula "28") (term "0,0") (ifseqformula "25"))
                           (rule "ssubsortDirect" (formula "28") (term "0"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "andLeft" (formula "28"))
                           (rule "applyEq" (formula "30") (term "0,0") (ifseqformula "25"))
                           (rule "ssubsortDirect" (formula "30") (term "0"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "andLeft" (formula "30"))
                           (rule "inEqSimp_exactShadow3" (formula "30") (ifseqformula "34"))
                           (rule "mul_literals" (formula "30") (term "0,0"))
                           (rule "add_zero_left" (formula "30") (term "0"))
                           (rule "commute_or" (formula "37"))
                           (rule "Free_class_invariant_axiom_for_java_lang_String" (formula "27") (ifseqformula "41"))
                           (rule "true_left" (formula "27"))
                           (rule "Free_class_invariant_axiom_for_java_lang_String" (formula "22") (ifseqformula "41"))
                           (rule "true_left" (formula "22"))
                           (rule "associativeLawUnion" (formula "14") (term "0,0"))
                           (rule "ifthenelse_split" (formula "1") (term "0"))
                           (branch "self.tail.<created> = TRUE TRUE"
                              (rule "applyEqReverse" (formula "4") (term "1,2,0") (ifseqformula "2"))
                              (rule "applyEqReverse" (formula "4") (term "0,0,0,0,0") (ifseqformula "2"))
                              (rule "applyEqReverse" (formula "4") (term "1,1,0") (ifseqformula "2"))
                              (rule "applyEqReverse" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "2"))
                              (rule "hideAuxiliaryEq" (formula "2"))
                              (rule "ifthenelse_split" (formula "2") (term "0"))
                              (branch "self.head.<created> = TRUE TRUE"
                                 (rule "applyEqReverse" (formula "5") (term "1,2,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "5") (term "0,0,0,0,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "5") (term "1,0,0,1,0,0") (ifseqformula "3"))
                                 (rule "applyEqReverse" (formula "5") (term "1,1,0") (ifseqformula "3"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "replace_known_right" (formula "4") (term "0,0,0,0") (ifseqformula "41"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "ifthenelse_negated" (formula "4") (term "0"))
                                 (rule "ifthenelse_split" (formula "3") (term "0"))
                                 (branch " ¬self.tail.head = null ∧ ¬self.tail.head.<created> = TRUE TRUE"
                                    (rule "andLeft" (formula "3"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "referencedObjectIsCreatedRight" (formula "39") (ifseqformula "40"))
                                    (rule "close" (formula "39") (ifseqformula "8"))
                                 )
                                 (branch " ¬self.tail.head = null ∧ ¬self.tail.head.<created> = TRUE FALSE"
                                    (rule "applyEqReverse" (formula "5") (term "1,1,0") (ifseqformula "3"))
                                    (rule "applyEqReverse" (formula "5") (term "0,0,0,0,0") (ifseqformula "3"))
                                    (rule "applyEqReverse" (formula "5") (term "1,0,0,1,0,0") (ifseqformula "3"))
                                    (rule "applyEqReverse" (formula "5") (term "1,2,0") (ifseqformula "3"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "ifthenelse_split" (formula "3") (term "0"))
                                    (branch "self.head.product.<created> = TRUE TRUE"
                                       (rule "applyEqReverse" (formula "6") (term "1,1") (ifseqformula "4"))
                                       (rule "hideAuxiliaryEq" (formula "4"))
                                       (rule "inEqSimp_homoInEq0" (formula "5"))
                                       (rule "polySimp_addComm1" (formula "5") (term "0"))
                                       (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                                       (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                       (rule "polySimp_rightDist" (formula "5") (term "1"))
                                       (rule "mul_literals" (formula "5") (term "0,1"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                       (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                       (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "26"))
                                       (rule "polySimp_rightDist" (formula "5") (term "0,0"))
                                       (rule "mul_literals" (formula "5") (term "0,0,0"))
                                       (rule "polySimp_addComm1" (formula "5") (term "0"))
                                       (rule "add_literals" (formula "5") (term "0,0"))
                                       (rule "inEqSimp_sepNegMonomial1" (formula "5"))
                                       (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                                       (rule "polySimp_elimOne" (formula "5") (term "0"))
                                       (rule "ifthenelse_split" (formula "4") (term "0"))
                                       (branch " ¬self.tail.head.product = null ∧ ¬self.tail.head.product.<created> = TRUE TRUE"
                                          (rule "andLeft" (formula "4"))
                                          (rule "notLeft" (formula "4"))
                                          (rule "notLeft" (formula "4"))
                                          (rule "referencedObjectIsCreatedRight" (formula "39") (ifseqformula "40"))
                                          (rule "close" (formula "39") (ifseqformula "8"))
                                       )
                                       (branch " ¬self.tail.head.product = null ∧ ¬self.tail.head.product.<created> = TRUE FALSE"
                                          (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                                          (rule "applyEqReverse" (formula "6") (term "1,1") (ifseqformula "4"))
                                          (rule "hideAuxiliaryEq" (formula "4"))
                                          (rule "inEqSimp_homoInEq1" (formula "5"))
                                          (rule "polySimp_addComm1" (formula "5") (term "0"))
                                          (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "1"))
                                          (rule "polySimp_rightDist" (formula "5") (term "1"))
                                          (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                                          (rule "mul_literals" (formula "5") (term "0,1"))
                                          (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                                          (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "11"))
                                          (rule "andLeft" (formula "5"))
                                          (rule "inEqSimp_homoInEq1" (formula "5"))
                                          (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                                          (rule "polySimp_rightDist" (formula "5") (term "1,0"))
                                          (rule "mul_literals" (formula "5") (term "0,1,0"))
                                          (rule "polySimp_addAssoc" (formula "5") (term "0"))
                                          (rule "polySimp_addComm0" (formula "5") (term "0,0"))
                                          (rule "polySimp_pullOutFactor1b" (formula "5") (term "0"))
                                          (rule "add_literals" (formula "5") (term "1,1,0"))
                                          (rule "times_zero_1" (formula "5") (term "1,0"))
                                          (rule "add_literals" (formula "5") (term "0"))
                                          (rule "leq_literals" (formula "5"))
                                          (rule "closeFalse" (formula "5"))
                                       )
                                    )
                                    (branch "self.head.product.<created> = TRUE FALSE"
                                       (rule "referencedObjectIsCreatedRight" (formula "38") (ifseqformula "42"))
                                       (rule "close" (formula "38") (ifseqformula "7"))
                                    )
                                 )
                              )
                              (branch "self.head.<created> = TRUE FALSE"
                                 (rule "referencedObjectIsCreatedRight" (formula "39") (ifseqformula "44"))
                                 (rule "close" (formula "39") (ifseqformula "8"))
                              )
                           )
                           (branch "self.tail.<created> = TRUE FALSE"
                              (rule "referencedObjectIsCreatedRight" (formula "39") (ifseqformula "46"))
                              (rule "close" (formula "39") (ifseqformula "8"))
                           )
                        )
                     )
                     (branch "Case 2"
                         (builtin "One Step Simplification" (formula "16") (userinteraction))
                         (builtin "Use Dependency Contract" (formula "16") (ifInst ""  (formula "8")) (ifInst ""  (formula "13")) (contract "case_study.Node[java.lang.Object::<inv>()].JML accessible clause.0") (userinteraction))
                        (rule "impLeft" (formula "15") (userinteraction))
                        (branch "Case 1"
                           (rule "hide_right" (formula "17") (userinteraction))
                           (rule "andRight" (formula "15"))
                           (branch "Case 1"
                              (rule "andRight" (formula "15"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "15"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "15"))
                                    (branch "Case 1"
                                       (rule "notRight" (formula "15"))
                                       (rule "close" (formula "16") (ifseqformula "1"))
                                    )
                                    (branch
                                       (rule "close" (formula "15") (ifseqformula "3"))
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "andRight" (formula "15"))
                                    (branch
                                       (rule "close" (formula "15") (ifseqformula "2"))
                                    )
                                    (branch "Case 2"
                                       (rule "wellFormedAnonEQ" (formula "15") (ifseqformula "13"))
                                       (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "12"))
                                        (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "2")))
                                       (rule "closeTrue" (formula "15"))
                                    )
                                 )
                              )
                              (branch
                                 (rule "close" (formula "15") (ifseqformula "8"))
                              )
                           )
                           (branch "Case 2"
                              (rule "disjointDefinition" (formula "15"))
                              (rule "disjointWithSingleton2" (formula "15"))
                              (rule "notRight" (formula "15"))
                              (rule "Class_invariant_axiom_for_case_study_Node" (formula "9") (ifseqformula "16"))
                              (rule "andLeft" (formula "9"))
                              (rule "andLeft" (formula "9"))
                              (rule "eqSymm" (formula "9"))
                              (rule "disjointDefinition" (formula "10") (term "1"))
                              (rule "elementOfUnionEQ" (formula "1") (ifseqformula "9"))
                              (rule "elementOfUnion" (formula "1") (term "0"))
                              (rule "elementOfSingleton" (formula "1") (term "1,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "1") (term "0"))
                              (rule "elementOfSingleton" (formula "1") (term "0,0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "commuteUnion" (formula "9") (term "0,0"))
                              (rule "Free_class_invariant_axiom_for_case_study_Node" (formula "14") (ifseqformula "18"))
                              (rule "andLeft" (formula "14"))
                              (rule "andLeft" (formula "14"))
                              (rule "andLeft" (formula "14"))
                              (rule "andLeft" (formula "14"))
                              (rule "andLeft" (formula "14"))
                              (rule "andLeft" (formula "14"))
                              (rule "sortsDisjointModuloNull" (formula "18") (term "0,1"))
                              (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "12"))
                              (rule "ssubsortDirect" (formula "20") (term "0"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "applyEq" (formula "14") (term "0,0") (ifseqformula "12"))
                              (rule "ssubsortDirect" (formula "14") (term "0"))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "12"))
                              (rule "ssubsortDirect" (formula "16") (term "0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "12"))
                              (rule "ssubsortDirect" (formula "18") (term "0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "notLeft" (formula "18"))
                              (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "12"))
                              (rule "ssubsortDirect" (formula "18") (term "0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "notLeft" (formula "18"))
                              (rule "replace_known_right" (formula "23") (term "1") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "23"))
                              (rule "false_right" (formula "23"))
                              (rule "Free_class_invariant_axiom_for_case_study_Order" (formula "15") (ifseqformula "22"))
                              (rule "andLeft" (formula "15"))
                              (rule "andLeft" (formula "15"))
                              (rule "andLeft" (formula "15"))
                              (rule "andLeft" (formula "15"))
                              (rule "andLeft" (formula "15"))
                              (rule "andLeft" (formula "15"))
                              (rule "andLeft" (formula "15"))
                              (rule "inEqSimp_commuteGeq" (formula "21") (term "1,1,1"))
                              (rule "applyEq" (formula "15") (term "0,0") (ifseqformula "14"))
                              (rule "ssubsortDirect" (formula "15") (term "0"))
                               (builtin "One Step Simplification" (formula "15"))
                              (rule "applyEq" (formula "17") (term "0,0") (ifseqformula "14"))
                              (rule "ssubsortDirect" (formula "17") (term "0"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "14"))
                              (rule "ssubsortDirect" (formula "19") (term "0"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "notLeft" (formula "19"))
                              (rule "replace_known_right" (formula "20") (term "0,0,1,1") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "14"))
                              (rule "ssubsortDirect" (formula "19") (term "0"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "notLeft" (formula "19"))
                              (rule "replace_known_right" (formula "20") (term "0,0,1,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "14"))
                              (rule "ssubsortDirect" (formula "20") (term "0"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "replace_known_left" (formula "19") (term "0,1") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "14"))
                              (rule "ssubsortDirect" (formula "19") (term "0"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "19"))
                              (rule "times_zero_1" (formula "20") (term "0,0"))
                              (rule "add_zero_left" (formula "20") (term "0"))
                              (rule "cnf_rightDist" (formula "25"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "Free_class_invariant_axiom_for_case_study_Product" (formula "18") (ifseqformula "29"))
                              (rule "leq_literals" (formula "18") (term "1,0,1,1"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "qeq_literals" (formula "18") (term "0,0,1,1,0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "qeq_literals" (formula "18") (term "0,1,1"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "leq_literals" (formula "18") (term "0,1,1,0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "applyEq" (formula "21") (term "0,0") (ifseqformula "17"))
                              (rule "ssubsortDirect" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "applyEq" (formula "20") (term "0,0") (ifseqformula "17"))
                              (rule "ssubsortDirect" (formula "20") (term "0"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "notLeft" (formula "20"))
                              (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "17"))
                              (rule "ssubsortDirect" (formula "18") (term "0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "applyEq" (formula "22") (term "0,0") (ifseqformula "17"))
                              (rule "ssubsortDirect" (formula "22") (term "0"))
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "andLeft" (formula "22"))
                              (rule "inEqSimp_exactShadow3" (formula "22") (ifseqformula "27"))
                              (rule "times_zero_1" (formula "22") (term "0,0"))
                              (rule "add_zero_left" (formula "22") (term "0"))
                              (rule "Free_class_invariant_axiom_for_case_study_Customer" (formula "16") (ifseqformula "36"))
                              (rule "leq_literals" (formula "16") (term "1,0,1,1"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "qeq_literals" (formula "16") (term "0,1,1"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "andLeft" (formula "16"))
                              (rule "andLeft" (formula "16"))
                              (rule "andLeft" (formula "16"))
                              (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "15"))
                              (rule "ssubsortDirect" (formula "18") (term "0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "notLeft" (formula "18"))
                              (rule "applyEq" (formula "18") (term "0,0") (ifseqformula "15"))
                              (rule "ssubsortDirect" (formula "18") (term "0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "applyEq" (formula "16") (term "0,0") (ifseqformula "15"))
                              (rule "ssubsortDirect" (formula "16") (term "0"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "inEqSimp_subsumption1" (formula "28") (ifseqformula "18"))
                              (rule "leq_literals" (formula "28") (term "0"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "true_left" (formula "28"))
                              (rule "commute_or" (formula "32"))
                              (rule "Free_class_invariant_axiom_for_java_lang_String" (formula "17") (ifseqformula "36"))
                              (rule "true_left" (formula "17"))
                              (rule "Free_class_invariant_axiom_for_java_lang_String" (formula "21") (ifseqformula "36"))
                              (rule "true_left" (formula "21"))
                              (rule "associativeLawUnion" (formula "9") (term "0,0"))
                              (rule "ifthenelse_split" (formula "1") (term "2"))
                              (branch "self.tail = null TRUE"
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "closeFalse" (formula "2"))
                              )
                              (branch "self.tail = null FALSE"
                                 (rule "replace_known_right" (formula "9") (term "0,1,0") (ifseqformula "34"))
                                  (builtin "One Step Simplification" (formula "9"))
                                 (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "34"))
                                  (builtin "One Step Simplification" (formula "11"))
                                 (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "34"))
                                  (builtin "One Step Simplification" (formula "7"))
                                 (rule "replace_known_right" (formula "10") (term "0,0") (ifseqformula "34"))
                                  (builtin "One Step Simplification" (formula "10"))
                                 (rule "disjointAllFields" (formula "1") (ifseqformula "10"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                        )
                        (branch "Case 2"
                           (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "8"))
                            (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "17")))
                           (rule "closeFalse" (formula "15"))
                        )
                     )
                  )
               )
            )
         )
      )
      (branch "Case 2"
          (builtin "One Step Simplification" (formula "16"))
         (rule "closeTrue" (formula "16"))
      )
   )
   (branch "Case 2"
       (builtin "One Step Simplification" (formula "16"))
      (rule "allRight" (formula "16") (inst "sk=f_0"))
      (rule "allRight" (formula "16") (inst "sk=o_0"))
      (rule "orRight" (formula "16"))
      (rule "orRight" (formula "16"))
      (rule "eqSymm" (formula "18"))
      (rule "pullOutSelect" (formula "18") (term "0") (inst "selectSK=f_0_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
      (rule "eqSymm" (formula "19"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
      (rule "replace_known_right" (formula "1") (term "0,0,0") (ifseqformula "17"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
      (rule "closeFalse" (formula "1"))
   )
)
(branch "Exceptional Post (havocPacked)"
    (builtin "One Step Simplification" (formula "12"))
    (builtin "One Step Simplification" (formula "14"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "13"))
   (rule "notLeft" (formula "13"))
   (rule "close" (formula "15") (ifseqformula "14"))
)
(branch "Pre (havocPacked)"
    (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "1")))
   (rule "closeTrue" (formula "12"))
)
)
}
