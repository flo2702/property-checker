\profile "Java Profile";

\settings // Proof-Settings-Config-File
{ 
    "Choice" : { 
        "JavaCard" : "JavaCard:off",
        "Strings" : "Strings:on",
        "assertions" : "assertions:on",
        "bigint" : "bigint:on",
        "floatRules" : "floatRules:strictfpOnly",
        "initialisation" : "initialisation:disableStaticInitialisation",
        "intRules" : "intRules:arithmeticSemanticsIgnoringOF",
        "integerSimplificationRules" : "integerSimplificationRules:full",
        "javaLoopTreatment" : "javaLoopTreatment:efficient",
        "mergeGenerateIsWeakeningGoal" : "mergeGenerateIsWeakeningGoal:off",
        "methodExpansion" : "methodExpansion:modularOnly",
        "modelFields" : "modelFields:treatAsAxiom",
        "moreSeqRules" : "moreSeqRules:on",
        "permissions" : "permissions:off",
        "programRules" : "programRules:Java",
        "reach" : "reach:on",
        "runtimeExceptions" : "runtimeExceptions:ban",
        "sequences" : "sequences:on",
        "wdChecks" : "wdChecks:off",
        "wdOperator" : "wdOperator:L"
     },
    "Labels" : { 
        "UseOriginLabels" : true
     },
    "NewSMT" : { 
        
     },
    "SMTSettings" : { 
        "SelectedTaclets" : [ 
            
         ],
        "UseBuiltUniqueness" : false,
        "explicitTypeHierarchy" : false,
        "instantiateHierarchyAssumptions" : true,
        "integersMaximum" : 2147483645,
        "integersMinimum" : -2147483645,
        "invariantForall" : false,
        "maxGenericSorts" : 2,
        "useConstantsForBigOrSmallIntegers" : true,
        "useUninterpretedMultiplication" : true
     },
    "Strategy" : { 
        "ActiveStrategy" : "JavaCardDLStrategy",
        "MaximumNumberOfAutomaticApplications" : 50000,
        "Timeout" : -1,
        "options" : { 
            "AUTO_INDUCTION_OPTIONS_KEY" : "AUTO_INDUCTION_OFF",
            "BLOCK_OPTIONS_KEY" : "BLOCK_CONTRACT_INTERNAL",
            "CLASS_AXIOM_OPTIONS_KEY" : "CLASS_AXIOM_DELAYED",
            "DEP_OPTIONS_KEY" : "DEP_ON",
            "INF_FLOW_CHECK_PROPERTY" : "INF_FLOW_CHECK_FALSE",
            "LOOP_OPTIONS_KEY" : "LOOP_SCOPE_INV_TACLET",
            "METHOD_OPTIONS_KEY" : "METHOD_CONTRACT",
            "MPS_OPTIONS_KEY" : "MPS_MERGE",
            "NON_LIN_ARITH_OPTIONS_KEY" : "NON_LIN_ARITH_COMPLETION",
            "OSS_OPTIONS_KEY" : "OSS_ON",
            "QUANTIFIERS_OPTIONS_KEY" : "QUANTIFIERS_NON_SPLITTING_WITH_PROGS",
            "QUERYAXIOM_OPTIONS_KEY" : "QUERYAXIOM_ON",
            "QUERY_NEW_OPTIONS_KEY" : "QUERY_OFF",
            "SPLITTING_OPTIONS_KEY" : "SPLITTING_DELAYED",
            "STOPMODE_OPTIONS_KEY" : "STOPMODE_DEFAULT",
            "SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER",
            "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY" : "SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF",
            "USER_TACLETS_OPTIONS_KEY1" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY2" : "USER_TACLETS_OFF",
            "USER_TACLETS_OPTIONS_KEY3" : "USER_TACLETS_OFF",
            "VBT_PHASE" : "VBT_SYM_EX"
         }
     }
 } 

\javaSource "../../../property-checker-out/case_study";

\proofObligation "#Proof Obligation Settings
#Sat Oct 05 20:18:25 CEST 2024
contract=case_study.SortedList[java.lang.Object\\:\\:<inv>()].JML accessible clause.0
name=case_study.SortedList[java.lang.Object\\:\\:<inv>()].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "florian" ) (keyVersion "7ff2d9dc3ea43e071577b3f8d0e3a537f9213982"))

(autoModeTime "12695")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "self,anon_heap"))
 (builtin "One Step Simplification" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "replace_known_left" (formula "8") (term "0") (ifseqformula "6"))
 (builtin "One Step Simplification" (formula "8"))
(rule "Class_invariant_axiom_for_case_study_SortedList" (formula "8") (ifseqformula "7"))
(rule "eqSymm" (formula "8") (term "0,0"))
(rule "disjointDefinition" (formula "8") (term "1,1"))
(rule "pullOutSelect" (formula "8") (term "0,0,0,1,0") (inst "selectSK=case_study_SortedList_first_0"))
(rule "applyEq" (formula "9") (term "1,1,0,1,1") (ifseqformula "1"))
(rule "applyEq" (formula "9") (term "1,2,1,0,0,0") (ifseqformula "1"))
(rule "applyEq" (formula "9") (term "1,1,1,0") (ifseqformula "1"))
(rule "applyEq" (formula "9") (term "0,0,1,0,0,0") (ifseqformula "1"))
(rule "applyEq" (formula "9") (term "0,0,0,1") (ifseqformula "1"))
(rule "simplifySelectOfAnon" (formula "1"))
 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")) (ifInst ""  (formula "4")))
(rule "elementOfSetMinus" (formula "1") (term "0,0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "ifthenelse_negated" (formula "1") (term "0"))
(rule "pullOutSelect" (formula "9") (term "1,0,0") (inst "selectSK=case_study_SortedList_footprint_0"))
(rule "simplifySelectOfAnon" (formula "1"))
 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")) (ifInst ""  (formula "5")))
(rule "elementOfSetMinus" (formula "1") (term "0,0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "ifthenelse_negated" (formula "1") (term "0"))
(rule "pullOutSelect" (formula "10") (term "1,0,1,1") (inst "selectSK=case_study_Node_footprint_0"))
(rule "applyEq" (formula "11") (term "2,1,0,0,0") (ifseqformula "1"))
(rule "simplifySelectOfAnon" (formula "1"))
 (builtin "One Step Simplification" (formula "1"))
(rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "Class_invariant_axiom_for_case_study_SortedList" (formula "9") (ifseqformula "10"))
(rule "andLeft" (formula "9"))
(rule "andLeft" (formula "9"))
(rule "eqSymm" (formula "9"))
(rule "disjointDefinition" (formula "11") (term "1"))
(rule "elementOfUnionEQ" (formula "2") (term "0,0") (ifseqformula "9"))
(rule "elementOfUnionEQ" (formula "3") (term "0,0") (ifseqformula "9"))
(rule "elementOfUnionEQ" (formula "1") (term "0,0,0,0") (ifseqformula "9"))
(rule "elementOfUnion" (formula "2") (term "0,0,0"))
(rule "elementOfSingleton" (formula "2") (term "1,0,0,0"))
 (builtin "One Step Simplification" (formula "2"))
(rule "applyEqReverse" (formula "13") (term "1,0,0") (ifseqformula "2"))
(rule "hideAuxiliaryEq" (formula "2"))
(rule "elementOfUnion" (formula "2") (term "0,0,0"))
(rule "elementOfSingleton" (formula "2") (term "1,0,0,0"))
 (builtin "One Step Simplification" (formula "2"))
(rule "elementOfSingleton" (formula "2") (term "0,0,0"))
 (builtin "One Step Simplification" (formula "2"))
(rule "applyEqReverse" (formula "12") (term "0,0,1,0,0,0") (ifseqformula "2"))
(rule "applyEqReverse" (formula "12") (term "0,0,0,1") (ifseqformula "2"))
(rule "applyEqReverse" (formula "12") (term "1,1,1,0") (ifseqformula "2"))
(rule "applyEqReverse" (formula "1") (term "0,0,0,0,0,0") (ifseqformula "2"))
(rule "applyEqReverse" (formula "1") (term "0,0,0,1,0,0") (ifseqformula "2"))
(rule "applyEqReverse" (formula "1") (term "1,0,0,1,1,0,0") (ifseqformula "2"))
(rule "applyEqReverse" (formula "12") (term "0,0,0,1,0") (ifseqformula "2"))
(rule "applyEqReverse" (formula "1") (term "0,1,0,0,0,0") (ifseqformula "2"))
(rule "applyEqReverse" (formula "1") (term "1,1,0") (ifseqformula "2"))
(rule "applyEqReverse" (formula "1") (term "1,2,0") (ifseqformula "2"))
(rule "hideAuxiliaryEq" (formula "2"))
(rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
(rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0,0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "limit_java_lang_Object__inv_" (formula "8") (term "1"))
(rule "limit_java_lang_Object__inv_" (formula "12") (term "1,1,0"))
(rule "cnf_rightDist" (formula "2") (term "0,0"))
(rule "commute_or" (formula "2") (term "0,0,0"))
(rule "ifthenelse_split" (formula "2") (term "2,0,1,1,0,0"))
(branch "self.first = null TRUE"
    (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")) (ifInst ""  (formula "2")))
   (rule "applyEqReverse" (formula "14") (term "1,0,1,1") (ifseqformula "3"))
   (rule "applyEqReverse" (formula "14") (term "2,1,0,0,0") (ifseqformula "3"))
   (rule "hideAuxiliaryEq" (formula "3"))
   (rule "replace_known_left" (formula "8") (term "0,1,0") (ifseqformula "2"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "eqSymm" (formula "8"))
   (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "2"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "2"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "replace_known_left" (formula "11") (term "0,0,1,0") (ifseqformula "2"))
    (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "2")) (ifInst ""  (formula "2")))
   (rule "eqSymm" (formula "11"))
   (rule "close" (formula "11") (ifseqformula "8"))
)
(branch "self.first = null FALSE"
   (rule "replace_known_right" (formula "2") (term "0,0,0,0,0") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "12")))
   (rule "replace_known_right" (formula "8") (term "0,1,0") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "replace_known_right" (formula "11") (term "0,0") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "replace_known_right" (formula "10") (term "0,0") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "10"))
    (builtin "One Step Simplification" (formula "9"))
   (rule "replace_known_right" (formula "14") (term "0,1,0,0,0") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
   (rule "eqSymm" (formula "14") (term "0,0"))
   (rule "Class_invariant_axiom_for_case_study_Node" (formula "1") (term "1") (ifseqformula "12"))
   (rule "eqSymm" (formula "1") (term "0,0,1"))
   (rule "disjointDefinition" (formula "1") (term "1,1,0,1"))
   (rule "pullOutSelect" (formula "1") (term "1,1,1,1") (inst "selectSK=case_study_Node_tail_0"))
   (rule "applyEq" (formula "2") (term "0,0,0,1,0,1") (ifseqformula "1"))
   (rule "applyEq" (formula "2") (term "0,0,1,0,0,0,1") (ifseqformula "1"))
   (rule "applyEq" (formula "2") (term "1,1,0,1,1,0,1") (ifseqformula "1"))
   (rule "applyEq" (formula "2") (term "1,2,1,0,0,0,1") (ifseqformula "1"))
   (rule "applyEq" (formula "2") (term "0,0,1,1") (ifseqformula "1"))
   (rule "simplifySelectOfAnon" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
   (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfUnionEQ" (formula "1") (term "0,0,0,0") (ifseqformula "9"))
   (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "pullOutSelect" (formula "2") (term "1,0,0,1") (inst "selectSK=case_study_Node_footprint_1"))
   (rule "simplifySelectOfAnon" (formula "2"))
    (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "14")))
   (rule "elementOfSetMinus" (formula "2") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "elementOfUnionEQ" (formula "2") (term "0,0,0,0") (ifseqformula "10"))
   (rule "elementOfUnion" (formula "2") (term "0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "2") (term "1,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "elementOfSingleton" (formula "2") (term "0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "pullOutSelect" (formula "3") (term "1,0,1,1,0,1") (inst "selectSK=case_study_Node_footprint_2"))
   (rule "applyEq" (formula "4") (term "2,1,0,0,0,1") (ifseqformula "3"))
   (rule "simplifySelectOfAnon" (formula "3"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "elementOfSetMinus" (formula "3") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "elementOfUnionEQ" (formula "3") (term "0,0,0,0") (ifseqformula "11"))
   (rule "elementOfUnion" (formula "3") (term "0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "3") (term "0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "elementOfSingleton" (formula "3") (term "0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "commuteUnion_2" (formula "4") (term "0,0,0,0,1"))
   (rule "commuteUnion" (formula "4") (term "0,0,0,0,0,1"))
   (rule "Class_invariant_axiom_for_case_study_Node" (formula "13") (ifseqformula "15"))
   (rule "andLeft" (formula "13"))
   (rule "andLeft" (formula "13"))
   (rule "eqSymm" (formula "13"))
   (rule "disjointDefinition" (formula "14") (term "1"))
   (rule "elementOfUnionEQ" (formula "1") (term "0,0,0,0") (ifseqformula "13"))
   (rule "elementOfUnionEQ" (formula "2") (term "0,0,0,0") (ifseqformula "13"))
   (rule "elementOfUnionEQ" (formula "5") (term "0,1,0,0") (ifseqformula "13"))
   (rule "elementOfUnionEQ" (formula "3") (term "0,0,0,0") (ifseqformula "13"))
   (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfUnion" (formula "2") (term "0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "2") (term "1,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "ifthenelse_negated" (formula "2") (term "0"))
   (rule "elementOfUnion" (formula "5") (term "0,0,1,0,0"))
   (rule "elementOfSingleton" (formula "5") (term "1,0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "5"))
   (rule "ifthenelse_negated" (formula "5") (term "0"))
   (rule "applyEq" (formula "5") (term "0") (ifseqformula "2"))
   (rule "applyEqReverse" (formula "19") (term "1,0,1") (ifseqformula "5"))
   (rule "applyEqReverse" (formula "19") (term "1,1,0,0") (ifseqformula "5"))
   (rule "hideAuxiliaryEq" (formula "5"))
   (rule "elementOfUnion" (formula "3") (term "0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "3") (term "1,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "eqSymm" (formula "3") (term "1,0,0,0,0,0"))
   (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "ifthenelse_negated" (formula "1") (term "0"))
   (rule "elementOfUnion" (formula "3") (term "0,0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "3") (term "0,0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "elementOfSingleton" (formula "3") (term "0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "3"))
   (rule "commuteUnion_2" (formula "12") (term "0,0"))
   (rule "commuteUnion" (formula "12") (term "0,0,0"))
   (rule "Class_invariant_axiom_for_case_study_Node" (formula "18") (term "1,0") (ifseqformula "16"))
   (rule "replaceKnownSelect_taclet1_5" (formula "18") (term "0,0,1,1,0"))
   (rule "replaceKnownSelect_taclet1_5" (formula "18") (term "1,1,1,1,0"))
   (rule "replaceKnownSelect_taclet1_6" (formula "18") (term "0,0,0,1,0"))
   (rule "replaceKnownSelect_taclet1_5" (formula "18") (term "1,1,1,1,0,1,0"))
   (rule "replaceKnownSelect_taclet1_7" (formula "18") (term "1,1,1,0,1,0"))
   (rule "replaceKnownSelect_taclet1_5" (formula "18") (term "0,0,0,1,0,1,0"))
   (rule "replaceKnownSelect_taclet1_5" (formula "18") (term "1,2,1,1,0,0,1,0"))
   (rule "replaceKnownSelect_taclet1_7" (formula "18") (term "2,1,1,0,0,1,0"))
   (rule "replaceKnownSelect_taclet1_5" (formula "18") (term "0,0,1,1,0,0,1,0"))
   (rule "eqSymm" (formula "18") (term "0,0,1,0"))
   (rule "disjointDefinition" (formula "18") (term "1,1,0,1,0"))
   (rule "commuteUnion_2" (formula "18") (term "0,0,0,0,1,0"))
   (rule "commuteUnion" (formula "18") (term "0,0,0,0,0,1,0"))
   (rule "ifthenelse_split" (formula "12") (term "1,0"))
   (branch "self.first.tail = null TRUE"
       (builtin "One Step Simplification" (formula "13"))
      (rule "eqSymm" (formula "13"))
      (rule "replace_known_left" (formula "3") (term "0,2,1,0,0,0,0") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "replace_known_left" (formula "14") (term "0,0") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "true_left" (formula "14"))
      (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "13"))
      (rule "applyEq" (formula "1") (term "1,0") (ifseqformula "12"))
      (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "13"))
      (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "13"))
      (rule "eqSymm" (formula "10"))
      (rule "applyEq" (formula "4") (term "1,1,0,1,1,1") (ifseqformula "10"))
      (rule "applyEq" (formula "4") (term "1,1,0,0") (ifseqformula "10"))
      (rule "applyEq" (formula "17") (term "0,0,0") (ifseqformula "10"))
      (rule "eqSymm" (formula "17") (term "0,0"))
      (rule "applyEq" (formula "17") (term "1,1,0,1,1,1,0") (ifseqformula "10"))
      (rule "distributeIntersection" (formula "14") (term "0"))
      (rule "unionEqualsEmpty" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "disjointWithSingleton1" (formula "15"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "notLeft" (formula "15"))
      (rule "sortsDisjointModuloNull" (formula "15"))
      (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "16"))
       (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "17")))
      (rule "false_right" (formula "15"))
      (rule "distributeIntersection" (formula "14") (term "0"))
      (rule "unionEqualsEmpty" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "disjointWithSingleton1" (formula "14"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "notLeft" (formula "14"))
      (rule "disjointWithSingleton1" (formula "14"))
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "15")))
      (rule "true_left" (formula "14"))
      (rule "sortsDisjointModuloNull" (formula "14"))
      (rule "replace_known_right" (formula "14") (term "1") (ifseqformula "16"))
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "15")))
      (rule "false_right" (formula "14"))
      (rule "commuteUnion_2" (formula "10") (term "1"))
      (rule "commuteUnion_2" (formula "4") (term "1,1,0,1,1,1"))
      (rule "commuteUnion_2" (formula "4") (term "1,1,0,0"))
      (rule "commuteUnion_2" (formula "16") (term "1,0,0"))
      (rule "commuteUnion_2" (formula "16") (term "1,1,0,1,1,1,0"))
      (rule "cnf_rightDist" (formula "3") (term "0,0"))
      (rule "commute_or" (formula "3") (term "1,0,0"))
      (rule "commute_or" (formula "3") (term "0,0,0"))
      (rule "associativeLawUnion" (formula "10") (term "0,1"))
      (rule "associativeLawUnion" (formula "10") (term "0,0,1"))
      (rule "associativeLawUnion" (formula "16") (term "0,1,0,0"))
      (rule "associativeLawUnion" (formula "4") (term "0,1,1,0,0"))
      (rule "associativeLawUnion" (formula "16") (term "0,0,1,0,0"))
      (rule "associativeLawUnion" (formula "4") (term "0,0,1,1,0,0"))
      (rule "ifthenelse_split" (formula "1") (term "0"))
      (branch "self.first.<created> = TRUE TRUE"
         (rule "applyEqReverse" (formula "17") (term "0,0,1,1,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "applyEqReverse" (formula "4") (term "1,2,0") (ifseqformula "2"))
         (rule "applyEqReverse" (formula "4") (term "1,1,0") (ifseqformula "2"))
         (rule "applyEqReverse" (formula "4") (term "0,0,0,0,0,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "applyEqReverse" (formula "5") (term "0,0,1,1") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "applyEqReverse" (formula "4") (term "1,0,0,1,1,0,0") (ifseqformula "2"))
         (rule "applyEqReverse" (formula "4") (term "1,0,0,0,0") (ifseqformula "2"))
         (rule "applyEqReverse" (formula "4") (term "1,0,0,1,0,0") (ifseqformula "2"))
         (rule "applyEqReverse" (formula "5") (term "0,0,0,1,1") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "applyEqReverse" (formula "17") (term "0,0,0,1,1,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "applyEqReverse" (formula "5") (term "0,0,1,0,1") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "applyEqReverse" (formula "17") (term "0,0,1,0,1,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "hideAuxiliaryEq" (formula "2"))
         (rule "eqSymm" (formula "4") (term "1"))
         (rule "eqSymm" (formula "16") (term "1,0"))
         (rule "replace_known_left" (formula "2") (term "0,0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "applyEqReverse" (formula "16") (term "1,0,1") (ifseqformula "2"))
         (rule "applyEqReverse" (formula "16") (term "0,1,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "applyEqReverse" (formula "4") (term "0,1") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "applyEqReverse" (formula "16") (term "1,0,0") (ifseqformula "2"))
         (rule "hideAuxiliaryEq" (formula "2"))
         (rule "replace_known_right" (formula "2") (term "0,0,0,0") (ifseqformula "13"))
          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "13")))
         (rule "hideAuxiliaryEq" (formula "2"))
         (rule "distributeIntersection" (formula "14") (term "0,1"))
         (rule "distributeIntersection" (formula "14") (term "0,0,1"))
         (rule "unionEqualsEmpty" (formula "14") (term "1"))
         (rule "disjointWithSingleton1" (formula "14") (term "1,1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "sortsDisjointModuloNull" (formula "14") (term "0,1,1"))
         (rule "replace_known_right" (formula "14") (term "0,0,1,1") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "13")))
         (rule "unionEqualsEmpty" (formula "14") (term "1"))
         (rule "disjointWithSingleton1" (formula "14") (term "0,1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "sortsDisjointModuloNull" (formula "14") (term "0,0,1"))
         (rule "replace_known_right" (formula "14") (term "0,0,0,1") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "13")))
         (rule "disjointWithSingleton1" (formula "14") (term "1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "sortsDisjointModuloNull" (formula "14") (term "0,1"))
         (rule "replace_known_right" (formula "14") (term "0,0,1") (ifseqformula "12"))
          (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "13")))
         (rule "commuteUnion_2" (formula "14") (term "0"))
         (rule "eqSymm" (formula "14"))
         (rule "unionWithSingletonEqualsUnionWithSingleton" (formula "14"))
         (rule "setMinusOfUnion" (formula "14") (term "1"))
         (rule "setMinusOfUnion" (formula "14") (term "0"))
         (rule "eqSymm" (formula "14"))
         (rule "setMinusOfUnion" (formula "14") (term "1,0"))
         (rule "eqSymm" (formula "14"))
         (rule "setMinusOfUnion" (formula "14") (term "0,0"))
         (rule "eqSymm" (formula "14"))
         (rule "setMinusOfUnion" (formula "14") (term "0,1,0"))
         (rule "eqSymm" (formula "14"))
         (rule "setMinusOfUnion" (formula "14") (term "0,0,0"))
         (rule "associativeLawUnion" (formula "14") (term "1"))
         (rule "associativeLawUnion" (formula "14") (term "0,1"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "closeTrue" (formula "14"))
      )
      (branch "self.first.<created> = TRUE FALSE"
         (rule "referencedObjectIsCreatedRight" (formula "14") (ifseqformula "15"))
         (rule "close" (formula "14") (ifseqformula "5"))
      )
   )
   (branch "self.first.tail = null FALSE"
      (rule "replace_known_right" (formula "3") (term "0,2,1,0,0,0,0") (ifseqformula "16"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "16"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "replace_known_right" (formula "13") (term "0,0") (ifseqformula "16"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "ifthenelse_split" (formula "2") (term "0"))
      (branch "self.first.<created> = TRUE TRUE"
         (rule "applyEqReverse" (formula "20") (term "1,1,0,0") (ifseqformula "3"))
         (rule "applyEqReverse" (formula "5") (term "1,0,0,1") (ifseqformula "3"))
         (rule "applyEqReverse" (formula "20") (term "1,0,1") (ifseqformula "3"))
         (rule "applyEqReverse" (formula "20") (term "1,0,0,1,0") (ifseqformula "3"))
         (rule "hideAuxiliaryEq" (formula "3"))
         (rule "eqSymm" (formula "19") (term "0,0"))
         (rule "replace_known_left" (formula "1") (term "0,0") (ifseqformula "2"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "4") (term "0,0,1,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "19") (term "0,0,1,0,0,0,1,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "3") (term "1,2,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "4") (term "0,0,0,1,0,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "3") (term "1,0,0,1,1,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "3") (term "1,0,0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "3") (term "1,1,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "19") (term "0,0,1,1,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "3") (term "0,1,0,0,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "3") (term "0,0,0,1,0,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "4") (term "0,0,1,0,0,0,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "4") (term "1,1,1,1") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "19") (term "0,0,0,1,0,1,0") (ifseqformula "1"))
         (rule "applyEqReverse" (formula "19") (term "1,1,1,1,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "eqSymm" (formula "2") (term "0,0,0,0,0"))
         (rule "replace_known_right" (formula "2") (term "0,0,1,0,0") (ifseqformula "15"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "replace_known_right" (formula "3") (term "0,1,0,0,0,1") (ifseqformula "15"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "15")) (ifInst ""  (formula "15")))
         (rule "eqSymm" (formula "3") (term "0,0,1"))
         (rule "replace_known_left" (formula "18") (term "0,0") (ifseqformula "9"))
          (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "15")) (ifInst ""  (formula "15")) (ifInst ""  (formula "15")) (ifInst ""  (formula "14")))
         (rule "eqSymm" (formula "18") (term "0,0"))
         (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "notLeft" (formula "3"))
         (rule "commute_and" (formula "18") (term "0"))
         (rule "ifthenelse_split" (formula "2") (term "0"))
         (branch " ¬( self.first.tail = self.first ∨ (self.first.tail, case_study.Node::$footprint) ∊ self.first.tail.footprint) ∨ ¬self.first.tail.<created> = TRUE TRUE"
            (rule "applyEqReverse" (formula "19") (term "1,0,0,0") (ifseqformula "3"))
            (rule "applyEqReverse" (formula "19") (term "1,1,1,0") (ifseqformula "3"))
            (rule "hideAuxiliaryEq" (formula "3"))
            (rule "eqSymm" (formula "18") (term "1,0"))
            (rule "onlyCreatedObjectsAreReferenced" (formula "16") (term "0") (ifseqformula "3"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
            (rule "true_left" (formula "1"))
            (rule "cut_direct" (formula "2") (term "0,1"))
            (branch "CUT: self.first.tail.<created> = TRUE TRUE"
                (builtin "One Step Simplification" (formula "3"))
               (rule "notLeft" (formula "3"))
               (rule "orRight" (formula "14"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,1,0") (ifseqformula "3"))
               (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "2")))
               (rule "true_left" (formula "10"))
                (builtin "Use Dependency Contract" (formula "16") (ifInst ""  (formula "9")) (contract "case_study.Node[java.lang.Object::<inv>()].JML accessible clause.0"))
               (rule "wellFormedAnon" (formula "14") (term "1,1,0,0,0"))
               (rule "replace_known_left" (formula "14") (term "1,1") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "19")) (ifInst ""  (formula "1")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "17")))
               (rule "notLeft" (formula "14"))
               (rule "disjointDefinition" (formula "14") (term "1"))
               (rule "Class_invariant_axiom_for_case_study_Node" (formula "14") (term "0") (ifseqformula "19"))
               (rule "eqSymm" (formula "14") (term "0,0,0"))
               (rule "replace_known_right" (formula "14") (term "0,1,0,0,0,0") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "18")) (ifInst ""  (formula "18")) (ifInst ""  (formula "12")))
               (rule "disjointDefinition" (formula "14") (term "1,0"))
               (rule "replace_known_left" (formula "14") (term "1,0") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "commuteUnion_2" (formula "14") (term "0,0,0"))
               (rule "commuteUnion" (formula "14") (term "0,0,0,0"))
               (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "equalityToElementOfRight" (formula "14") (inst "ov=ov") (inst "fv=fv"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "allRight" (formula "14") (inst "sk=ov_0"))
               (rule "allRight" (formula "14") (inst "sk=fv_0"))
               (rule "notRight" (formula "14"))
               (rule "elementOfIntersect" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "elementOfSetMinus" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "14"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "elementOfUnionEQ" (formula "1") (ifseqformula "11"))
               (rule "elementOfUnion" (formula "1") (term "0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0"))
               (rule "elementOfUnionEQ" (formula "16") (ifseqformula "9"))
               (rule "orRight" (formula "16"))
               (rule "elementOfUnion" (formula "1") (term "0,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
               (rule "elementOfUnion" (formula "16"))
               (rule "orRight" (formula "16"))
               (rule "elementOfSingleton" (formula "16"))
               (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "15"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "false_right" (formula "16"))
               (rule "elementOfSingleton" (formula "16"))
               (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "15"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "false_right" (formula "16"))
               (rule "elementOfUnionEQ" (formula "16") (ifseqformula "11"))
               (rule "orRight" (formula "16"))
               (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "16"))
               (rule "orRight" (formula "16"))
               (rule "elementOfSingleton" (formula "17"))
               (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "16"))
               (rule "orRight" (formula "16"))
               (rule "elementOfSingleton" (formula "16"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "elementOfSingleton" (formula "18"))
               (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "2")))
               (rule "closeTrue" (formula "18"))
            )
            (branch "CUT: self.first.tail.<created> = TRUE FALSE"
                (builtin "One Step Simplification" (formula "2"))
               (rule "referencedObjectIsCreatedRight" (formula "14") (ifseqformula "16"))
               (rule "close" (formula "14") (ifseqformula "3"))
            )
         )
         (branch " ¬( self.first.tail = self.first ∨ (self.first.tail, case_study.Node::$footprint) ∊ self.first.tail.footprint) ∨ ¬self.first.tail.<created> = TRUE FALSE"
            (rule "orRight" (formula "14"))
            (rule "notRight" (formula "15"))
            (rule "notRight" (formula "15"))
            (rule "applyEqReverse" (formula "20") (term "1,0,0,0") (ifseqformula "4"))
            (rule "applyEqReverse" (formula "20") (term "1,1,1,0") (ifseqformula "4"))
            (rule "hideAuxiliaryEq" (formula "4"))
            (rule "eqSymm" (formula "19") (term "1,0"))
            (rule "replace_known_left" (formula "19") (term "1,0") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "12")))
            (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "0") (ifseqformula "4"))
            (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "18"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "4")))
            (rule "true_left" (formula "1"))
            (rule "cut_direct" (formula "1") (term "0"))
            (branch "CUT: self.first.tail = self.first TRUE"
                (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "applyEq" (formula "19") (term "1") (ifseqformula "1"))
               (rule "applyEq" (formula "16") (term "0") (ifseqformula "1"))
               (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "12") (term "1,1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "13") (term "1") (ifseqformula "1"))
               (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "0") (ifseqformula "3"))
               (rule "applyEq" (formula "1") (term "0,0") (ifseqformula "2"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "15"))
                (builtin "One Step Simplification" (formula "1"))
                (builtin "Use Dependency Contract" (formula "14") (ifInst ""  (formula "10")) (contract "case_study.Node[java.lang.Object::<inv>()].JML accessible clause.0"))
               (rule "wellFormedAnon" (formula "14") (term "1,1,0,0,0"))
               (rule "replace_known_left" (formula "14") (term "0,1,0,0,0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "16")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")) (ifInst ""  (formula "15")) (ifInst ""  (formula "10")))
               (rule "notLeft" (formula "14"))
               (rule "disjointDefinition" (formula "14") (term "1"))
               (rule "Class_invariant_axiom_for_case_study_Node" (formula "14") (term "0") (ifseqformula "16"))
               (rule "eqSymm" (formula "14") (term "0,0,0"))
               (rule "disjointDefinition" (formula "14") (term "1,1,0,0"))
               (rule "applyEq" (formula "14") (term "1,2,1,0,0,0,0") (ifseqformula "2"))
               (rule "applyEq" (formula "14") (term "1,1,0,1,1,0,0") (ifseqformula "2"))
               (rule "replace_known_left" (formula "14") (term "1,1,0,0") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "applyEq" (formula "14") (term "1,1,1,0") (ifseqformula "2"))
               (rule "replace_known_left" (formula "14") (term "1,1,0") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "applyEq" (formula "14") (term "0,0,1,0,0") (ifseqformula "2"))
               (rule "replace_known_right" (formula "14") (term "0,1,0,0") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "commuteUnion_2" (formula "14") (term "0,0,0"))
               (rule "commuteUnion" (formula "14") (term "0,0,0,0"))
               (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "equalityToElementOfRight" (formula "14") (inst "ov=ov") (inst "fv=fv"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "allRight" (formula "14") (inst "sk=ov_0"))
               (rule "allRight" (formula "14") (inst "sk=fv_0"))
               (rule "notRight" (formula "14"))
               (rule "elementOfIntersect" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "elementOfSetMinus" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "14"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "13"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "elementOfUnionEQ" (formula "1") (ifseqformula "12"))
               (rule "elementOfUnion" (formula "1") (term "0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0"))
               (rule "replace_known_right" (formula "1") (term "0,1,0") (ifseqformula "15"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnionEQ" (formula "17") (ifseqformula "10"))
               (rule "orRight" (formula "17"))
               (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "17"))
               (rule "orRight" (formula "17"))
               (rule "elementOfSingleton" (formula "17"))
               (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "false_right" (formula "17"))
               (rule "elementOfSingleton" (formula "17"))
               (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "17"))
               (rule "false_right" (formula "17"))
               (rule "elementOfUnion" (formula "1"))
               (rule "elementOfSingleton" (formula "1") (term "1"))
               (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "15"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfSingleton" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "close" (formula "16") (ifseqformula "1"))
            )
            (branch "CUT: self.first.tail = self.first FALSE"
                (builtin "One Step Simplification" (formula "1"))
               (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "16")))
               (rule "false_right" (formula "15"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,1,0") (ifseqformula "4"))
               (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "2")))
               (rule "true_left" (formula "12"))
               (rule "onlyCreatedObjectsAreInLocSets" (formula "1") (ifseqformula "4"))
               (rule "replace_known_left" (formula "1") (term "1") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
               (rule "true_left" (formula "1"))
                (builtin "Use Dependency Contract" (formula "16") (ifInst ""  (formula "10")) (contract "case_study.Node[java.lang.Object::<inv>()].JML accessible clause.0"))
               (rule "wellFormedAnon" (formula "15") (term "1,1,0,0,0"))
               (rule "replace_known_left" (formula "15") (term "0,1,0,0,0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "19")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")) (ifInst ""  (formula "17")) (ifInst ""  (formula "10")))
               (rule "notLeft" (formula "15"))
               (rule "disjointDefinition" (formula "15") (term "1"))
               (rule "Class_invariant_axiom_for_case_study_Node" (formula "15") (term "0") (ifseqformula "19"))
               (rule "eqSymm" (formula "15") (term "0,0,0"))
               (rule "replace_known_right" (formula "15") (term "0,0,1,0,0") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "18")) (ifInst ""  (formula "18")) (ifInst ""  (formula "13")))
               (rule "disjointDefinition" (formula "15") (term "1,0"))
               (rule "replace_known_left" (formula "15") (term "1,0") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "commuteUnion" (formula "15") (term "0,0,0"))
               (rule "commute_and" (formula "15"))
               (rule "associativeLawUnion" (formula "15") (term "0,0,1"))
               (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "equalityToElementOfRight" (formula "15") (inst "ov=ov") (inst "fv=fv"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "allRight" (formula "15") (inst "sk=ov_0"))
               (rule "allRight" (formula "15") (inst "sk=fv_0"))
               (rule "notRight" (formula "15"))
               (rule "elementOfIntersect" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "elementOfSetMinus" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "elementOfUnionEQ" (formula "1") (ifseqformula "12"))
               (rule "elementOfUnion" (formula "1") (term "0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0"))
               (rule "elementOfUnionEQ" (formula "16") (ifseqformula "10"))
               (rule "orRight" (formula "16"))
               (rule "elementOfUnion" (formula "1") (term "0,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
               (rule "elementOfUnion" (formula "16"))
               (rule "orRight" (formula "16"))
               (rule "elementOfSingleton" (formula "17"))
               (rule "elementOfSingleton" (formula "16"))
               (rule "elementOfUnionEQ" (formula "18") (ifseqformula "12"))
               (rule "orRight" (formula "18"))
               (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "18"))
               (rule "orRight" (formula "18"))
               (rule "elementOfSingleton" (formula "19"))
               (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "18"))
               (rule "orRight" (formula "18"))
               (rule "elementOfSingleton" (formula "18"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "andLeft" (formula "1"))
               (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "elementOfSingleton" (formula "20"))
               (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "1")))
               (rule "closeTrue" (formula "20"))
            )
         )
      )
      (branch "self.first.<created> = TRUE FALSE"
         (rule "referencedObjectIsCreatedRight" (formula "16") (ifseqformula "18"))
         (rule "close" (formula "16") (ifseqformula "5"))
      )
   )
)
)
}
